{
  
    
        "post0": {
            "title": "Title",
            "content": "Array in java is a group of like-typed variables referred to by a common name. Arrays in Java work differently than they do in C/C++. Following are some important points about Java arrays. . In Java, all arrays are dynamically allocated. (discussed below) Arrays are stored in contagious memory [consecutive memory locations]. Since arrays are objects in Java, we can find their length using the object property length. This is different from C/C++, where we find length using sizeof. A Java array variable can also be declared like other variables with [] after the data type. The variables in the array are ordered, and each has an index beginning from 0. Java array can also be used as a static field, a local variable, or a method parameter. The size of an array must be specified by int or short value and not long. The direct superclass of an array type is Object. Every array type implements the interfaces Cloneable and java.io.Serializable. This storage of arrays helps us randomly accessing the elements of an array [Support Random Access]. The size of the array cannot be altered(once initialized). However, an array reference can be made to point to another array. An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values are stored in contiguous memory locations. . Hack 1 Swap the first and last element in the array . import java.util.Arrays; import java.util.*; public class ArrayMethods { public static void main(String[] args) { swapping(); } static void swapping() { int[] array = {20, 30, 40}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(array)); int x = array[0]; array[0] = array[array.length-1]; array[array.length-1] = x; System.out.println(&quot;New array after swapping the first and last elements: &quot;+Arrays.toString(array)); } } ArrayMethods.main(null) . Original Array: [20, 30, 40] New array after swapping the first and last elements: [40, 30, 20] . Hack to Evens in array . import java.util.Arrays; import java.util.*; public class ArrayMethods { public static void main(String[] args) { evens(); } static void evens(){ int[] number = {6, 8, 11, 16, 21, 23}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(number)); for(int i=0;i&lt;number.length;i++){ if(number[i]%2==0){ System.out.println(number[i]); } } } ArrayMethods.main(null) . Hack 3 check order (extra credit) . public class ArrayMethods { public static boolean isSorted(int[] a) { int i; for(i = 0; i &lt; a.length; i ++);{ if (a[i] &lt; a[i+1]) { return true; } else { return false; } } } public static void main(String[] args) { int ar[] = {3,5,6,7}; System.out.println(isSorted(ar)); } } . Hack 4 checking duplicates in array (extra credit) . public class ArrayMethods{ public static void main(String[] args) { duplicate(); } public static duplicates { int[] number = {6, 8, 11, 16, 21, 23}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(number)); for (int i = 0; i &lt; names.length; i++) { for (int j = i + 1 ; j &lt; names.length; j++) { if (names[i].equals(names[j])) { // got the duplicate element } } } } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week6.html",
            "relUrl": "/2022/11/06/week6.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Writing classes-Week 5",
            "content": "Class is a set of object which shares common characteristics/ behavior and common properties/ attributes. Class is not a real world entity. It is just a template or blueprint or prototype from which objects are created. Class does not occupy memory. Class is a group of variables of different data types and group of methods. . A class in java can contain: • data member • method • constructor • nested class and • interface . A class is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order: . Modifiers: A class can be public or has default access (Refer this for details). Class keyword: class keyword is used to create a class. Class name: The name should begin with an initial letter (capitalized by convention). Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent. Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface. Body: The class body is surrounded by braces, { }. Constructors are used for initializing new objects. Fields are variables that provide the state of the class and its objects, and methods are used to implement the behavior of the class and its objects. . Homework Assigned . FRQ 2021 1a 3a . //1a public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } . //3a public void addMembers(String[] names, int gradYear) { for(String name : names) memberList.add(new MemberInfo(name, gradYear, true)); } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week5.html",
            "relUrl": "/2022/11/06/week5.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 2",
            "content": "OOP notes . As the name suggests, Object-Oriented Programming or OOPs refers to languages that use objects in programming, they use objects as a primary source to implement what is to happen in the code. Objects are seen by the viewer or user, performing tasks assigned by you. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc. in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function. . Let us discuss prerequisites by polishing concepts of method declaration and message passing. Starting off with the method declaration, it consists of six components: . Access Modifier: Defines the access type of the method i.e. from where it can be accessed in your application. In Java, there are 4 types of access specifiers: public: Accessible in all classes in your application. protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). private: Accessible only within the class in which it is defined. default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. The return type: The data type of the value returned by the method or void if it does not return a value. Method Name: The rules for field names apply to method names as well, but the convention is a little different. Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). Exception list: The exceptions you expect the method to throw. You can specify these exception(s). Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. . import java.util.Random; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } import java.util.Random; public class Duel { public static void fight(Goblin goblin1, Goblin goblin2, Double rand) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { for(int i = 0; i &lt; 5; i++) { if (rand &gt; goblin1.getHitChance()) { System.out.println(&quot;Missed&quot;); } else { System.out.println(&quot;Hit&quot;); break; }} goblin1.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(2); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); Random x = new Random(); double rand = x.nextDouble(); fight(goblin1, goblin2, rand); } } Duel.main(null); gob.txt 3 KB . Hit jeffrey takes 1 damage jeffrey HP: 11 Gunther the great takes 2 damage Gunther the great HP: 2 Hit jeffrey takes 1 damage jeffrey HP: 10 Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great has perished . | gob.txt &#39;;&#39; expected | 3 KB not a statement | gob.txt cannot find symbol symbol: variable gob .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week2.html",
            "relUrl": "/2022/11/06/week2.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "week 3-Boolean and Conditionals",
            "content": "Implementing Boolean into if else statements . boolean isTired = true; // setting boolean to true. if(isTired) { // isTired is the same thing as if(isTired == True) System.out.println(&quot;Go to sleep&quot;); } else { System.out.println(&quot;KeepWorking&quot;); } . Go to sleep . if-elseif-elseif-elsif-else statement, 5 or more conditions . int day= 4; if(day==1){ System.out.println(&quot;Sunday&quot;); } else if(day==2){ System.out.println(&quot;Monday&quot;); } else if(day==3){ System.out.println(&quot;Tuesday&quot;); } else if(day==4){ System.out.println(&quot;Wednesday&quot;); } else if(day==5){ System.out.println(&quot;Thursday&quot;); } else if(day==6){ System.out.println(&quot;Friday&quot;); } else if(day==7){ System.out.println(&quot;Saturday&quot;); } . Wednesday . int day=3; switch(day){ case 1: System.out.println(&quot;Sunday&quot;); break; case 2: System.out.println(&quot;Monday&quot;); break; case 3: System.out.println(&quot;Tuesday&quot;); break; case 4: System.out.println(&quot;Wednesday&quot;); break; case 5: System.out.println(&quot;Thursday&quot;); break; case 6: System.out.println(&quot;Friday&quot;); break; case 7: System.out.println(&quot;Saturday&quot;); break; } . Tuesday . int x = 4, y = 3; if (!(x &lt; 3 || y &gt; 2)) { System.out.println(&quot;True&quot;); } else { System.out.println(&quot;False&quot;); } . Now let&#39;s switch up! Time to make things easier and use switch case . A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each switch case. . int x = 4, y = 3; if (!(x &lt; 3 &amp;&amp; y &gt; 2)) { System.out.println(&quot;True); } else { System.out.println(&quot;False&quot;); } . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2) . Basic logic gates There are seven basic logic gates: AND, OR, XOR, NOT, NAND, NOR, and XNOR. . AND | OR | XOR | NOT | NAND | NOR | XNOR . The AND gate is so named because, if 0 is called &quot;false&quot; and 1 is called &quot;true,&quot; the gate acts in the same way as the logical &quot;and&quot; operator. The following illustration and table show the circuit symbol and logic combinations for an AND gate. (In the symbol, the input terminals are at left and the output terminal is at right.) The output is &quot;true&quot; when both inputs are &quot;true.&quot; Otherwise, the output is &quot;false.&quot; In other words, the output is 1 only when both inputs one AND two are 1. . Homework . 2009 frq 3b 2017 frq 1b 2019 frq 2b . //2009 3b private int getChargingCost(int startHour, int chargeTime) { int cost = 0; int rIndex = startHour; int hoursRemaining = chargeTime; while(hoursRemaining &gt; 0) { cost += rateTable[rIndex]; rIndex++; if(rIndex == rateTable.length) rIndex = 0; hoursRemaining--; } return cost; } . //2017 1b public boolean isStrictlyIncreasing() { for (int i = 0; i &lt; digitList.size()-1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()) { return false; } } return true; } . //2019 frq 2b public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; if(weekday == 7) weekday = 0; } return weekday; } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/Javabooleanif.html",
            "relUrl": "/2022/11/06/Javabooleanif.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "I&#39;m Aryan the Dev Ops engineer for the prometheus team, So for general information we use VS code has our IDE Integrated development environment. We then use docker to build and run our website. We use git pull to then update our site with changes. . Cloudfare is used to run the frontend html code Cloudflare is a global network designed to make everything you connect to the Internet secure, private, fast, and reliable. . After diagram** . This is the NGinx files with the changes made we use local port 8018 . The file name is listed in the bottom . I do testing . ./mvnw spring-boot:run .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/05/devopsrole.html",
            "relUrl": "/2022/11/05/devopsrole.html",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "FRQ",
            "content": "Public class Game Public int getScore(){ int result=0; if(levelOne.goalReached()) { result += levelOne.getPoints(); if(levelTwo.goalReached()) { result += levelTwo.getPoints(); if(levelThree.goalReached()) { result += levelThree.getPoints(); } } } if(isBonus()) result *= 3; return result; } . Frq question 1b . public int playManyTimes(int num) { int max= Integer.MIN_VALUE for(int i=0; i&lt;num; i++){ play(); int current = getScore(); if(current&gt;max){ max=current; } } return max; } . FRQ Question 2 Code: . public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int edition) { super(bookTitle, bookPrice); this.edition = edition; } public int getEdition() { return edition; } public String getBookInfo() { return super.getBookInfo() + &quot;-&quot; + edition; } public boolean canSubstituteFor(Textbook otherTextbook) { if(this.getTitle().equals(otherTextbook.getTitle()) &amp;&amp; this.getEdition() &gt;= otherTextbook.getEdition();){ return false; } else{ return true; } } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/05/FRQ-answers.html",
            "relUrl": "/2022/11/05/FRQ-answers.html",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Notes",
            "content": "Objects are always called instances of a class which are created from a class in java or any other language. They have states and behaviour. . These objects always correspond to things found in the real world, i.e., real entities. So, they are also called run-time entities of the world. These are self–contained which consists of methods and properties which make data useful. Objects can be both physical and logical data. It contains addresses and takes up some space in memory. Some examples of objects are a dog, chair, tree etc. . When we treat animals as objects, it has states like colour, name, breed etc., and behaviours such as eating, wagging the tail etc. . Suppose, we have created a class called My book, we specify the class name followed by the object name, and we use the keyword new. . Object Example 1: . 1 2 3 4 5 6 7 Public class Mybook { int x=10; Public static void main (String args []) { Mybook Myobj= new Mybook (); System.out.println(MyObj.x); } } In the above example, a new object is created, and it returns the value of x which may be the number of books. . Mybook Myobj= new Mybook (); . This is the statement used for creating objects. . System.out.println(Myobj.x); . This statement is used to return the value of x of an object. . We can also create multiple objects in the same class and we can create in one class and access it in another class. This method is used for better organization of classes and always remember that name of the java file and the class name remains the same. . Example 2: . The below example shows how multiple objects are created in the same class and how they are accessed from another class. . Mybook.java 1 2 3 4 Public class Mybook { int x=10; int y=8; } Count.java 1 2 3 4 5 6 7 8 9 Class Count { Public static void main (String [] args) { Mybook myobj1 = new myobj1(); Mybook myobj2 = new myobj2(); System.out.println (myobj1.x); System.out.println (myobj2.y); } } When this program is compiled, it gives the result as 10, and 8 respectively. . What are Classes? Classes are like object constructors for creating objects. The collection of objects is said to be a class. Classes are said to be logical quantities. Classes don’t consume any space in the memory. Class is also called a template of an object. Classes have members which can be fields, methods and constructors. A class has both static and instance initializers. . A class declaration consists of: . Modifiers: These can be public or default access. Class name: Initial letter. Superclass: A class can only extend (subclass) one parent. Interfaces: A class can implement more than one interface. Body: Body surrounded by braces, { }. A class keyword is used to create a class. A simplified general form of the class definition is given below: . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class classname { type instance variable 1; type instance variable 2; . . . type instance variable n; type methodname 1 (parameter list) { // body od method } type methodname 2 (parameter list) { // body od method } type methodnamen (parameter list) { // body od method } } The variables or data defined within a class are called instance variables. Code is always contained in the methods. Therefore, the methods and variables defined within a class are called members of the class. All the methods have the same form as the main () these methods are not specified as static or public. . What is Abstraction? Abstraction is a process which displays only the information needed and hides the unnecessary information. We can say that the main purpose of abstraction is data hiding. Abstraction means selecting data from a large number of data to show the information needed, which helps in reducing programming complexity and efforts. . There are also abstract classes and abstract methods. An abstract class is a type of class that declares one or more abstract methods. An abstract method is a method that has a method definition but not implementation. Once we have modelled our object using data abstraction, the same sets of data can also be used in different applications—abstract classes, generic types of behaviours and object-oriented programming hierarchy. Abstract methods are used when two or more subclasses do the same task in different ways and through different implementations. An abstract class can have both methods, i.e., abstract methods and regular methods. . Now let us see an example related to abstraction. . Suppose we want to create a student application and ask to collect information about the student. . We collect the following information. . Name Class Address Dob Fathers name Mothers’ names and so on. We may not require every information that we have collected to fill out the application. So, we select the data that is required to fill out the application. Hence, we have fetched, removed, and selected the data, the student information from large data. This process is known as abstraction in the oops concept . Inheritance is a method in which one object acquires/inherits another object’s properties, and inheritance also supports hierarchical classification. The idea behind this is that we can create new classes built on existing classes, i.e., when you inherit from an existing class, we can reuse methods and fields of the parent class. Inheritance represents the parent-child relationship. To know more about this concept check the free inheritance in java course. . For example, a whale is a part of the classification of marine animals, which is part of class mammal, which is under that class of animal. We use hierarchical classification, i.e., top-down classification. If we want to describe a more specific class of animals such as mammals, they would have more specific attributes such as teeth; cold-blooded, warm-blooded, etc. This comes under the subclass of animals whereas animals come under the superclass. The subclass is a class which inherits properties of the superclass. This is also called a derived class. A superclass is a base class or parental class from which a subclass inherits properties. . We use inheritance mainly for method overriding and R: . To inherit a class, we use the extend keyword. . There are five types of inheritance single, multilevel, multiple, hybrid and hierarchical. . Single level In this one class i.e., the derived class inherits properties from its parental class. This enables code reusability and also adds new features to the code. Example: class b inherits properties from class a. . Class A is the base or parental class and class b is the derived class. . Syntax: . 1 2 3 4 5 6 Class a { … } Class b extends class a { … } Multilevel This one class is derived from another class which is also derived from another class i.e., this class has more than one parental class, hence it is called multilevel inheritance. . Syntax: . 1 2 3 4 5 6 7 8 9 Class a { …. } Class b extends class a { …. } Class c extends class b { … } Hierarchical level In this one parental class has two or more derived classes or we can say that two or more child classes have one parental class. . Syntax: . 1 2 3 4 5 6 7 8 9 Class a { … } Class b extends class a { .. } Class c extends class a { .. } Hybrid inheritance This is the combination of multiple and multilevel inheritances and in java, multiple inheritances are not supported as it leads to ambiguity and this type of inheritance can only be achieved through interfaces. . Consider that class a is the parental or base class of class b and class c and in turn, class b and class c are parental or a base class of class d. Class b and class c are derived classes from class a and class d is derived class from class b and class c. . The following program creates a superclass called add and a subclass called sub, using extend keyword to create a subclass add. . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // a simple example of inheritance //create a superclass Class Add { int my; int by; . Polymorphism refers to many forms, or it is a process that performs a single action in different ways. It occurs when we have many classes related to each other by inheritance. Polymorphism is of two different types, i.e., compile-time polymorphism and runtime polymorphism. One of the examples of Compile time polymorphism is that when we overload a static method in java. Run time polymorphism also called a dynamic method dispatch is a method in which a call to an overridden method is resolved at run time rather than compile time. In this method, the overridden method is always called through the reference variable. By using method overloading and method overriding, we can perform polymorphism. Generally, the concept of polymorphism is often expressed as one interface, and multiple methods. This reduces complexity by allowing the same interface to be used as a general class of action. . Week 2 OOP . public: Accessible in all classes in your application. . protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). . private: Accessible only within the class in which it is defined. . default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. . The return type: The data type of the value returned by the method or void if it does not return a value . Method Name: The rules for field names apply to method names as well, but the convention is a little different. . Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). . Exception list: The exceptions you expect the method to throw. You can specify these exception(s). . Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/05/Collegeboard.html",
            "relUrl": "/2022/11/05/Collegeboard.html",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "conditionals and booleans",
            "content": "//Part A // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) { return getTime().overlapsWith(other.getTime()); } . //Part B // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) { int i = 0; while (i &lt; apptList.size()) if (((Appointment)apptList.get(i)).conflictsWith(appt)) apptList.remove(i); else i++; 1 } . //Part C // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) { if (emergency) { clearConflicts(appt); apptList.add(appt); return true; } for (int i = 0; i &lt; apptList.size(); i++) if (((Appointment)apptList.get(i)).conflictsWith(appt)) return false; apptList.add(appt); return true; } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/23/conditionalboolean.html",
            "relUrl": "/2022/10/23/conditionalboolean.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "array list",
            "content": "ArrayList in Java . ArrayList can grow and shrink automatically based on the addition and removal of elements. ArrayList can contain duplicate elements ArrayList maintains the insertion order, which means the elements appear in the same order in which they are inserted. ArrayList is non synchronized. However you can make it synchronized. . One can add elements by using Add new elements to an ArrayList using the add() method. . check if an ArrayList is empty using the isEmpty() method. . access the element at a particular index in an ArrayList using the get() method . modify the element at a particular index in an ArrayList using the set() method. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); cars.add(&quot;Breakfast: Protein Pancakes and protein shake&quot;); cars.add(&quot;Lunch: Carbs- pasta arriabata with legumes&quot;); cars.add(&quot;Snack: Peanut butter shake and bannana&quot;); cars.add(&quot;Dinner: Mexican bown with beans&quot;); Collections.sort(cars); for (String i : cars) { System.out.println(i); } } } Main.main(null) . Breakfast: Protein Pancakes and protein shake Dinner: Mexican bown with beans Lunch: Carbs- pasta arriabata with legumes Snack: Peanut butter shake and bannana . Practice towards array item changes, removal, etc. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); cars.add(&quot;Breakfast: Protein Pancakes and protein shake&quot;); cars.add(&quot;Lunch: Carbs- pasta arriabata with legumes&quot;); cars.add(&quot;Snack: Peanut butter shake and bannana&quot;); cars.add(&quot;Dinner: Mexican bown with beans&quot;); Collections.sort(cars); cars.set(2, &quot;Snack is now popcorn&quot;); //set changes the index value 2 which is the third item in the array in this case snack cars.size(); for (String i : cars) { System.out.println(i); } } } Main.main(null) . Breakfast: Protein Pancakes and protein shake Dinner: Mexican bown with beans Snack is now popcorn Snack: Peanut butter shake and bannana . Now I will create a array geared towards usage in my PBL . import java.util.ArrayList; import java.util.Collections; import java.util.Scanner; public class workoutplan { public static void main(String[] args) { ArrayList days= new ArrayList(); days.add(&quot;Day 1&quot;); days.add(&quot;Day 2&quot;); days.add(&quot;Day 3&quot;); days.add(&quot;day 4&quot;); System.out.println(days); Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter Day 1-4:&quot;); String usr = myObj.nextLine(); // Read user input System.out.println(&quot;Day chosen &quot; + usr); // Output user input int num=Integer.parseInt(usr); if(num == 1){ System.out.println(&quot;Todays push&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Bench press 6 sets&quot;); lifts.add(&quot; 2: Push ups 30 reps 3 sets&quot;); lifts.add(&quot; 3: shoulder press 5 sets&quot;); lifts.add(&quot; 4: Incline bench&quot;); lifts.add(&quot; 5: Incline Dumbell press&quot;); lifts.add(&quot; 6: Rest&quot;); lifts.add(&quot; 7: Normal dumbell press&quot;); lifts.add(&quot; 8: Chest machine&quot;); lifts.add(&quot; 9: Incline chest machine&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } if(num == 2){ System.out.println(&quot;Todays push&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Pull up 6 sets&quot;); lifts.add(&quot; 2: Bicept curls 10 reps 3 sets&quot;); lifts.add(&quot; 3: tricept extensions 5 sets&quot;); lifts.add(&quot; 4: Back Machine 5 sets&quot;); lifts.add(&quot; 5: Lat pulldowns 5 sets&quot;); lifts.add(&quot; 6: chin up 5 sets&quot;); lifts.add(&quot; 7: Rest&quot;); lifts.add(&quot; 8: Dumbell Rows&quot;); lifts.add(&quot; 9: Bicept machine&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } if(num == 3){ System.out.println(&quot;Todays a rest day!!&quot;); } if(num == 4){ System.out.println(&quot;Todays List&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Squats 6 sets&quot;); lifts.add(&quot; 2: Lunges 10 reps 3 sets&quot;); lifts.add(&quot; 3: Deadlifts 5 sets&quot;); lifts.add(&quot; 4: Leg press&quot;); lifts.add(&quot; 5: Jump lunges&quot;); lifts.add(&quot; 6: Deadlifts&quot;); lifts.add(&quot; 7: Leg machine&quot;); lifts.add(&quot; 8: Hip thrusts&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } } } workoutplan.main(null); /*Scanner onj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Add day 5 for extra work out: Y or N&quot;); String five = onj.nextLine(); // Read user input if(five.equals(&quot;Y&quot;)){ days.add(&quot;day 5&quot;); system.out.println(days) } else{ system.out.println(&quot;Don&#39;t be lazy SMH&quot;) } */ . [Day 1, Day 2, Day 3, day 4] Enter Day 1-4: Day chosen 3 Todays a rest day!! .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/10/arraylist.html",
            "relUrl": "/2022/10/10/arraylist.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "week 1-Primitives",
            "content": "Casting . The process of converting one data type to another is called casting. Casting is often necessary when a function returns a data of type in different form then we need to perform an operation. Under certain circumstances Type conversion can be carried out automatically, in other cases it must be “forced” manually (explicitly). For example, the read() member function of the standard input stream (System.in) returns an int. If we want to store data of type int returned by read() into a variable of char type, we need to cast it : . Wide type casting example . class Main { public static void main(String[] args) { // create int type variable int num = 10; System.out.println(&quot;The integer value: &quot; + num); // convert into double type double data = num; System.out.println(&quot;The double value: &quot; + data); } } Main.main(null) . The integer value: 10 The double value: 10.0 . Narrow type casting . class Main { public static void main(String[] args) { // create double type variable double num = 10.99; System.out.println(&quot;The double value: &quot; + num); // convert into int type int data = (int)num; System.out.println(&quot;The integer value: &quot; + data); } } Main.main(null) . The double value: 10.99 The integer value: 10 . Operator Operation . Addition | Subtraction | Multiplication / Division % Modulo Operation (Remainder after division) | . Homework . 2006 FRQ 2a and 3a . public double purchasePrice() { return getListPrice() * (1.0 + taxRate); } . public int compareCustomer(Customer other) { int nameCompare = getName().compareTo(other.getName()); if (nameCompare != 0) { return nameCompare; } else { return getID() - other.getID(); } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/05/week1.html",
            "relUrl": "/2022/10/05/week1.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics dove = new Pics(&quot;dove&quot;, &quot;png&quot;); // dove.greyscale(); // dove.redscale(); //dove.greenscale(); //dove.bluescale(); // dove.printStats(&quot;Original&quot;); // dove.resize(33); // dove.printStats(&quot;Scaled&quot;); dove.convertToAscii(); } } Pics.main(null); . import java.awt.*; import java.awt.image.BufferedImage; import java.io.*; import javax.imageio.ImageIO; import javax.swing.JFrame; public class GrayScale { BufferedImage image; int width; int height; public GrayScale() { try { File input = new File(&quot;tate.jpeg&quot;); image = ImageIO.read(input); width = image.getWidth(); height = image.getHeight(); for(int i=0; i&lt;height; i++) { for(int j=0; j&lt;width; j++) { Color c = new Color(image.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); Color newColor = new Color(red+green+blue, red+green+blue,red+green+blue); image.setRGB(j,i,newColor.getRGB()); } } File ouptut = new File(&quot;grayscale.jpg&quot;); ImageIO.write(tate, &quot;jpeg&quot;, output); } catch (Exception e) {} } static public void main(String args[]) throws Exception { GrayScale obj = new GrayScale(); } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/02/greyscale.html",
            "relUrl": "/2022/10/02/greyscale.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { int count = 100, num1 = 0, num2 = 1; System.out.print(&quot;Fibonacci Series of &quot;+count+&quot; numbers:&quot;); for (int i = 1; i &lt;= count; ++i) { System.out.print(num1+&quot; &quot;); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ int sumOfPrevTwo = num1 + num2; num1 = num2; num2 = sumOfPrevTwo; } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Input In [1] * Creator: Nighthawk Coding Society ^ IndentationError: unexpected indent . recursive fibo . Finding the nth digit in fibo . // Fibonacci Series using Recursion finding the nth digit class fibonacci { static int fib(int n) { if (n &lt;= 1) { return n; } else { return fib(n - 1) + fib(n - 2); } } public static void main(String args[]) { int n = 9; System.out.println(fib(n)); System.out.println(fib(7)); } } /* This code is contributed by Rajat Mishra */ fibonacci.main(null) . 34 13 . Fibonacci notes: . In mathematics, the Fibonacci numbers, commonly denoted Fₙ, form a sequence, the Fibonacci sequence, in which each number is the sum of the two preceding ones. The sequence commonly starts from 0 and 1, although some authors omit the initial terms and start the sequence from 1 and 1 or from 1 and 2. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/25/fibo_and_jsquiz.html",
            "relUrl": "/2022/09/25/fibo_and_jsquiz.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Title",
            "content": "Takeaways . It is necessary for me to have a good state of mind to maximize my efficiency | A happy coder is the best coder | . I am grateful for...... . 1) A family 2) Good Friends 3) A good education and support system 4) Being brought up in a good community .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/11/humanday.html",
            "relUrl": "/2022/09/11/humanday.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java week 3",
            "content": "Implementing Boolean into if else statements . boolean isTired = true; // setting boolean to true. if(isTired) { // isTired is the same thing as if(isTired == True) System.out.println(&quot;Go to sleep&quot;); } else { System.out.println(&quot;KeepWorking&quot;); } . Go to sleep . if-elseif-elseif-elsif-else statement, 5 or more conditions . int day= 4; if(day==1){ System.out.println(&quot;Sunday&quot;); } else if(day==2){ System.out.println(&quot;Monday&quot;); } else if(day==3){ System.out.println(&quot;Tuesday&quot;); } else if(day==4){ System.out.println(&quot;Wednesday&quot;); } else if(day==5){ System.out.println(&quot;Thursday&quot;); } else if(day==6){ System.out.println(&quot;Friday&quot;); } else if(day==7){ System.out.println(&quot;Saturday&quot;); } . Wednesday . Now let&#39;s switch up! Time to make things easier and use switch case . A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each switch case. . int day=3; switch(day){ case 1: System.out.println(&quot;Sunday&quot;); break; case 2: System.out.println(&quot;Monday&quot;); break; case 3: System.out.println(&quot;Tuesday&quot;); break; case 4: System.out.println(&quot;Wednesday&quot;); break; case 5: System.out.println(&quot;Thursday&quot;); break; case 6: System.out.println(&quot;Friday&quot;); break; case 7: System.out.println(&quot;Saturday&quot;); break; } . Tuesday . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2) . int x = 4, y = 3; if (!(x &lt; 3 || y &gt; 2)) { System.out.println(&quot;True&quot;); } else { System.out.println(&quot;False&quot;); } . int x = 4, y = 3; if (!(x &lt; 3 &amp;&amp; y &gt; 2)) { System.out.println(&quot;True); } else { System.out.println(&quot;False&quot;); } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/11/Javabooleanif.html",
            "relUrl": "/2022/09/11/Javabooleanif.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Notes",
            "content": "Week 2 OOP . public: Accessible in all classes in your application. . protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). . private: Accessible only within the class in which it is defined. . default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. . The return type: The data type of the value returned by the method or void if it does not return a value . Method Name: The rules for field names apply to method names as well, but the convention is a little different. . Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). . Exception list: The exceptions you expect the method to throw. You can specify these exception(s). . Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/05/Collegeboard.html",
            "relUrl": "/2022/09/05/Collegeboard.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Title",
            "content": "import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.lang.Math.*; public class NamarRep extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JMenu menu1; private JLabel message = new JLabel(&quot;Enter Decimal Number:&quot;); private JTextField numVal = new JTextField(20); private JButton clearButton = new JButton(&quot;Clear&quot;); public String[] NUM = { // 1D Array of Menu Choices &quot;Hex&quot;, &quot;Binary&quot;, &quot;Octal&quot; }; public String[] NUM1 = { // 1D Array of Menu Choices &quot;Sine&quot;, &quot;Cosine&quot;, &quot;Tangent&quot; }; public NamarRep(String title) { //System.setProperty(&quot;java.awt.headless&quot;, &quot;false&quot;); // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Number Representations&quot;); menu1 = new JMenu(&quot;Trigonometric Functions&quot;); //Initializing Menu objects and adding actions for (String mx : NUM) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } //Initializing Menu objects and adding actions for (String mx : NUM1) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu1.add(m); } clearButton.addActionListener(this); menubar.add(menu); menubar.add(menu1); frame.setJMenuBar(menubar); frame.setLayout(new FlowLayout()); //frame.setLayout(50,30); frame.add(message); frame.add(numVal); frame.add(clearButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(500,200); frame.setVisible(true); } public void actionPerformed(ActionEvent e) { String s = e.getActionCommand(); double value=0; //declaring double to hold values with decimals String out=&quot;&quot;; if(s.equals(NUM1[0])) { value = Math.sin(Math.toRadians(Double.parseDouble(numVal.getText()))); //Changes input to radians in order to use sin function and return the value as a double numVal.setText(String.valueOf(value)); //gets value inputted in text box } else if (s.equals(NUM1[1])) { value = Math.cos(Math.toRadians(Double.parseDouble(numVal.getText()))); //Same operation as sin but with cos function numVal.setText(String.valueOf(value)); } else if(s.equals(NUM1[2])) { value = Math.tan(Math.toRadians(Double.parseDouble(numVal.getText()))); //tangent operaton numVal.setText(String.valueOf(value)); } else if(s.equals(NUM[0])) { int x = Integer.parseInt(numVal.getText()); out=&quot;&quot;; int a; for(;x&gt;=1; x=x/16) { a = x % 16; if(a&gt;9) { if(a==10) { out+= &#39;A&#39;; } else if(a == 11) { out+= &#39;B&#39;; } else if(a == 12) { out+= &#39;C&#39;; } else if(a == 13) { out+= &#39;D&#39;; } else if(a == 14) { out+= &#39;E&#39;; } else if(a == 15) { out+= &#39;F&#39;; } } else out+=String.valueOf(a); } numVal.setText(&quot;0x&quot;+reverseString(out)); } else if(s.equals(NUM[1])) { int x = Integer.parseInt(numVal.getText()); int a; out=&quot;&quot;; for(; x&gt;=1; x=x/2) { a = x % 2; out+=String.valueOf(a); } numVal.setText(reverseString(out)); } else if(s.equals(NUM[2])) { int x = Integer.parseInt(numVal.getText()); int a; out = &quot;&quot;; for(;x&gt;=1;x=x/8) { a = x % 8; out+=String.valueOf(a); } numVal.setText(reverseString(out)); } else if(s.equals(&quot;Clear&quot;)) { numVal.setText(&quot;&quot;); } } private String reverseString(String out) { char[] ch = out.toCharArray(); int x = out.length()-1; String s=&quot;&quot;; for(;x&gt;=0;x--) { s+=ch[x]; } return s; } public static void main(String[] args) { NamarRep np= new NamarRep(&quot;My Menu&quot;); } } NamarRep.main(null) . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/partnermenu.html",
            "relUrl": "/2022/09/02/partnermenu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Individual OOP Menu",
            "content": "import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;roll a dice&quot;, &quot;LCM&quot;, &quot;GCM&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action Random dice=new Random(); int x= dice.nextInt(6); msg = &quot;You rolled a: &quot; + x; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action //Here number is the base and p is the exponent int number = 2, p = 5; long result = 1; //Copying the exponent value to the loop counter int i = p; for (;i != 0; --i) { result *= number; } //Displaying the output System.out.println(number+&quot;^&quot;+p+&quot; = &quot;+result); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/menu.html",
            "relUrl": "/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Title",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; double lat=37.372; double longitude= -122.038; HttpRequest request = HttpRequest.newBuilder() //.uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=37.372&amp;long=-122.038&amp;format=json&amp;u=f&quot;)) .uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=&quot;+lat+&quot;&amp;long=&quot;+longitude+&quot;&amp;format=json&amp;u=f&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a53d1a4acemsh90db192dc27d5f7p1028a2jsn2e483944f85c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;yahoo-weather5.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); a . {&#34;location&#34;:{&#34;city&#34;:&#34;Sunnyvale&#34;,&#34;region&#34;:&#34; CA&#34;,&#34;woeid&#34;:2502265,&#34;country&#34;:&#34;United States&#34;,&#34;lat&#34;:37.371609,&#34;long&#34;:-122.038254,&#34;timezone_id&#34;:&#34;America/Los_Angeles&#34;},&#34;current_observation&#34;:{&#34;wind&#34;:{&#34;chill&#34;:68,&#34;direction&#34;:338,&#34;speed&#34;:16},&#34;atmosphere&#34;:{&#34;humidity&#34;:59,&#34;visibility&#34;:9.01,&#34;pressure&#34;:30.01,&#34;rising&#34;:0},&#34;astronomy&#34;:{&#34;sunrise&#34;:&#34;7:5 am&#34;,&#34;sunset&#34;:&#34;6:49 pm&#34;},&#34;condition&#34;:{&#34;code&#34;:32,&#34;text&#34;:&#34;Sunny&#34;,&#34;temperature&#34;:70},&#34;pubDate&#34;:1664816100},&#34;forecasts&#34;:[{&#34;day&#34;:&#34;Mon&#34;,&#34;date&#34;:1664769600,&#34;low&#34;:57,&#34;high&#34;:73,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1664856000,&#34;low&#34;:57,&#34;high&#34;:75,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1664942400,&#34;low&#34;:56,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1665028800,&#34;low&#34;:58,&#34;high&#34;:80,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Fri&#34;,&#34;date&#34;:1665115200,&#34;low&#34;:60,&#34;high&#34;:80,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Sat&#34;,&#34;date&#34;:1665201600,&#34;low&#34;:59,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Sun&#34;,&#34;date&#34;:1665288000,&#34;low&#34;:57,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Mon&#34;,&#34;date&#34;:1665374400,&#34;low&#34;:58,&#34;high&#34;:78,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1665460800,&#34;low&#34;:56,&#34;high&#34;:74,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1665547200,&#34;low&#34;:53,&#34;high&#34;:77,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1665633600,&#34;low&#34;:52,&#34;high&#34;:76,&#34;text&#34;:&#34;Sunny&#34;,&#34;code&#34;:32}]} . | String json_String_to_print = ... illegal start of expression . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; public class Api{ double lat; double longitude; Api(double lat, double longitude) { this.lat= lat; this.longitude= longitude; } public void Call() { HttpRequest request = HttpRequest.newBuilder() //.uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=37.372&amp;long=-122.038&amp;format=json&amp;u=f&quot;)) .uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=&quot;+this.lat+&quot;&amp;long=&quot;+this.longitude+&quot;&amp;format=json&amp;u=f&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a53d1a4acemsh90db192dc27d5f7p1028a2jsn2e483944f85c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;yahoo-weather5.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } public class driver{ Public static void main(String[] args){ Api first=new Api(37.372,-122.038); new.Call(); } } driver.main(null); . | HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); unreported exception java.io.IOException; must be caught or declared to be thrown .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/API.html",
            "relUrl": "/2022/09/02/API.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Objects",
            "content": "import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 7: Unexpected choice, try again. 9: Unexpected choice, try again. 3: Loading...#################### 1: Hello, World! 3: Loading...#################### 7: Unexpected choice, try again. 5: Unexpected choice, try again. 3: Loading...#################### . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/30/objects.html",
            "relUrl": "/2022/08/30/objects.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Markdown",
            "content": "python --version java --version javac --version . Python 3.9.12 java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 . npm -version conda --version . 6.4.1 conda 4.13.0 . conda list . # packages in environment at /Users/HP/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . jupyter kernelspec list . Available kernels: bash /Users/HP/Library/Jupyter/kernels/bash java /Users/HP/Library/Jupyter/kernels/java javascript /Users/HP/Library/Jupyter/kernels/javascript python3 /Users/HP/opt/anaconda3/share/jupyter/kernels/python3 . .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/28/bash.html",
            "relUrl": "/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "My First Python Post",
            "content": "print(&#39;Aryan-hello world&#39;) .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/jupyter/2022/08/21/myfirstpython.html",
            "relUrl": "/jupyter/2022/08/21/myfirstpython.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Ijava Primitives",
            "content": "Ijava Primitives . import java.util.Scanner; public class percent{ public static void main(String args[]){ Scanner input=new Scanner(System.in); int a=input.nextInt(); System.out.println(a); Scanner input3=new Scanner(System.in); String operator=input3.nextLine(); System.out.println(operator); Scanner input2=new Scanner(System.in); int b=input2.nextInt(); System.out.println(b); if(operator.equals(&quot;+&quot;)){ int ans=a+b; System.out.println(&quot;Answer= &quot;+ ans); } if(operator.equals(&quot;x&quot;)){ int answer=a*b; System.out.println(&quot;Answer= &quot;+ answer); } if(operator.equals(&quot;-&quot;)){ //System.out.println(&quot;Answer= &quot;+ a-b); } if(operator.equals(&quot;/&quot;)){ double quotiant=(double) a/(double) b; System.out.println(&quot;Answer= &quot;+ quotiant); } boolean happy= true(;) System.out.println(happy); } } percent.main(null); . 2 x 8 Answer= 16 . import java.util.Scanner; public class JavaExample { public static void main(String args[]) { float p, r, t, sinterest; Scanner scan = new Scanner(System.in); System.out.print(&quot;Enter the Principal : &quot;); p = scan.nextFloat(); System.out.print(&quot;Enter the Rate of interest : &quot;); r = scan.nextFloat(); System.out.print(&quot;Enter the Time period : &quot;); t = scan.nextFloat(); scan.close(); sinterest = (p * r * t) / 100; System.out.print(&quot;Simple Interest is: &quot; +sinterest); } } JavaExample.main(null); . Enter the Principal : Enter the Rate of interest : Enter the Time period : Simple Interest is: 360.0 .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/21/Ijavaprimitaves.html",
            "relUrl": "/2022/08/21/Ijavaprimitaves.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post23": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aryanboxout.github.io/Aryanfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aryanboxout.github.io/Aryanfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aryanboxout.github.io/Aryanfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}