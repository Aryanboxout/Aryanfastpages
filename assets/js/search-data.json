{
  
    
        "post0": {
            "title": "Title",
            "content": "// Prototype Implementation public class APCalendar { /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { // implementation not shown boolean isLeapYear = ((year % 4 == 0) &amp;&amp; (year % 100 != 0) || (year % 400 == 0)); if(isLeapYear){ return true; } else{ return false; } } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { // implementation not shown return 0; } /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // implementation not shown int[] a = {31, 29, 31, 30, 31, 30, 31, 30,31 30, 30, 31 }; int[] b = {31, 28, 31, 30, 31, 30, 31, 30,31 30, 30, 31 }; if(isLeapYear(year)=true;){ for (int i = 0; i &lt; month-1; i++) { // Array.getInt method int x = day; x+=Array.getInt(a, i); } System.out.println(&quot;This is not a leap year&quot;); } else{ for (int i = 0; i &lt; month-1; i++) { // Array.getInt method int x = day; x+=Array.getInt(b, i); } System.out.println(&quot;This is a leap year&quot;); } System.out.println(x); return 1; } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { // to be implemented in part (a) int num=0; for (int i=year1; i&lt;=year2; i++) { if(isLeapYear(i)){ num++; } } return num; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) return 0; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear: &quot; + APCalendar.isLeapYear(2020)); System.out.println(&quot;firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot;numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2019, 2021)); System.out.println(&quot;dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } APCalendar.main(null) . | int[] a = {31, 29, 31, 30, 31, 30, 31, 30,31 30, 30, 31 }; &#39;}&#39; expected | int[] b = {31, 28, 31, 30, 31, 30, 31, 30,31 30, 30, 31 }; &#39;}&#39; expected .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2023/04/06/frq.html",
            "relUrl": "/2023/04/06/frq.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "I&#39;m Aryan the Dev Ops engineer for the prometheus team, So for general information we use VS code has our IDE Integrated development environment. We then use docker to build and run our website. We use git pull to then update our site with changes. . Cloudfare is used to run the frontend html code Cloudflare is a global network designed to make everything you connect to the Internet secure, private, fast, and reliable. . After diagram** . This is the NGinx files with the changes made we use local port 8018 . The file name is listed in the bottom . I do testing . ./mvnw spring-boot:run .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2023/04/06/devopsrole.html",
            "relUrl": "/2023/04/06/devopsrole.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQ",
            "content": "Public class Game Public int getScore(){ int result=0; if(levelOne.goalReached()) { result += levelOne.getPoints(); if(levelTwo.goalReached()) { result += levelTwo.getPoints(); if(levelThree.goalReached()) { result += levelThree.getPoints(); } } } if(isBonus()) result *= 3; return result; } . Frq question 1b . public int playManyTimes(int num) { int max= Integer.MIN_VALUE for(int i=0; i&lt;num; i++){ play(); int current = getScore(); if(current&gt;max){ max=current; } } return max; } . FRQ Question 2 Code: . public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int edition) { super(bookTitle, bookPrice); this.edition = edition; } public int getEdition() { return edition; } public String getBookInfo() { return super.getBookInfo() + &quot;-&quot; + edition; } public boolean canSubstituteFor(Textbook otherTextbook) { if(this.getTitle().equals(otherTextbook.getTitle()) &amp;&amp; this.getEdition() &gt;= otherTextbook.getEdition();){ return false; } else{ return true; } } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2023/04/06/FRQ-answers.html",
            "relUrl": "/2023/04/06/FRQ-answers.html",
            "date": " • Apr 6, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "import java.util.*; public class Main { public static void main(String[] args) { // Initialize the data int[] data = {5, 2, 7, 1, 8, 3}; // Sort the data using Arrays.sort() Arrays.sort(data); // Build the HashMap Map&lt;Integer, Integer&gt; hashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; data.length; i++) { hashMap.put(data[i], i); } // Perform analysis on binary search int index = Arrays.binarySearch(data, 7); if (index &gt;= 0) { System.out.println(&quot;Element found at index &quot; + index); } else { System.out.println(&quot;Element not found&quot;); } // Perform analysis on HashMap lookup if (hashMap.containsKey(7)) { int index2 = hashMap.get(7); System.out.println(&quot;Element found at index &quot; + index2); } else { System.out.println(&quot;Element not found&quot;); } } } Main.main(null); . Element found at index 4 Element found at index 4 . In this example, we start by initializing an array of integers. We then sort the array using Arrays.sort(), which uses the quicksort algorithm. We then build a HashMap by iterating through the sorted array and adding each element to the HashMap with its index as the value. Finally, we perform an analysis on binary search by using Arrays.binarySearch() to search for the element 7. If the element is found, we print its index. If not, we print a message saying that the element was not found. We then perform an analysis on HashMap lookup by using HashMap.containsKey() to check if the HashMap contains the element 7. If it does, we get its index from the HashMap using HashMap.get() and print it. If not, we print a message saying that the element was not found. . As for the performance analysis, binary search has a time complexity of O(log n), where n is the size of the sorted array. This means that as the size of the array grows, the time taken to perform a binary search grows at a slower rate than linearly. On the other hand, HashMap lookup has an average time complexity of O(1) for inserting, deleting, and retrieving elements. However, in the worst case, the time complexity of a HashMap lookup can be O(n), where n is the size of the HashMap, if all the elements have the same hash code and are stored in the same bucket. This is known as a hash collision. In practice, hash collisions are rare, and the time complexity of a HashMap lookup is typically closer to O(1) on average. . Video . Using learning and code for video for extra preperation: . import java.util.HashMap; public class Maps { public static void main(String[] args) { //This map will allow us to hold employee names which are strings with there ids which are integers HashMap&lt;String, Integer&gt; empIds = new HashMap&lt;&gt;(); empIds.put(&quot;Mohammed&quot;, 92125); empIds.put(&quot;shaun&quot;, 92125); empIds.put(&quot;Tony&quot;, 92125); empIds.put(&quot;Sanjay&quot;, 92125); System.out.println(empIds); } } Maps.main(null); . {shaun=92125, Tony=92125, Mohammed=92125, Sanjay=92125} . import java.util.ArrayList; import java.util.Collections; import java.util.Random; import java.util.HashMap; public class Main { public static void main(String[] args) { HashMap&lt;Integer, String&gt; hashMap = new HashMap&lt;&gt;(); ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;(); Random random = new Random(); for (int i = 0; i &lt; 5000; i++) { int key = random.nextInt(100000); String value = &quot;value&quot; + i; hashMap.put(key, value); arrayList.add(key); } Collections.sort(arrayList); long hashMapTime = 0; long binarySearchTime = 0; int numTrials = 12; for (HashMap.Entry&lt;Integer, String&gt; entry : hashMap.entrySet()) { System.out.println(&quot;Key: &quot; + entry.getKey() + &quot;, Value: &quot; + entry.getValue()); } } } Main.main(null); . Key: 16385, Value: value2755 Key: 32769, Value: value2832 Key: 16387, Value: value3580 Key: 8196, Value: value1537 Key: 32772, Value: value1866 Key: 49157, Value: value1983 Key: 32774, Value: value1271 Key: 73739, Value: value2154 Key: 98321, Value: value358 Key: 24593, Value: value3214 Key: 73747, Value: value934 Key: 90131, Value: value3515 Key: 49175, Value: value383 Key: 40985, Value: value496 Key: 49178, Value: value1782 Key: 90141, Value: value3597 Key: 81948, Value: value1591 Key: 98335, Value: value2271 Key: 24606, Value: value2703 Key: 57375, Value: value3464 Key: 16416, Value: value172 Key: 40992, Value: value2931 Key: 8224, Value: value4380 Key: 98337, Value: value4864 Key: 98336, Value: value1348 Key: 40994, Value: value3804 Key: 57381, Value: value2133 Key: 8232, Value: value4068 Key: 42, Value: value2475 Key: 57387, Value: value570 Key: 49195, Value: value4622 Key: 47, Value: value59 Key: 90158, Value: value1747 Key: 65582, Value: value3517 Key: 32816, Value: value3987 Key: 81977, Value: value4127 Key: 49209, Value: value4830 Key: 73787, Value: value1393 Key: 8252, Value: value4937 Key: 64, Value: value1923 Key: 49218, Value: value3261 Key: 8261, Value: value3177 Key: 8262, Value: value906 Key: 71, Value: value201 Key: 81992, Value: value385 Key: 98379, Value: value4537 Key: 57419, Value: value1404 Key: 32844, Value: value2781 Key: 8271, Value: value3263 Key: 49231, Value: value3608 Key: 8273, Value: value2392 Key: 90194, Value: value1534 Key: 84, Value: value4662 Key: 41046, Value: value3000 Key: 90198, Value: value305 Key: 87, Value: value4166 Key: 90200, Value: value4947 Key: 57434, Value: value4957 Key: 90204, Value: value4572 Key: 82015, Value: value2945 Key: 57439, Value: value3769 Key: 90211, Value: value4601 Key: 8292, Value: value1276 Key: 90213, Value: value2225 Key: 57445, Value: value2425 Key: 101, Value: value2564 Key: 65636, Value: value3837 Key: 41062, Value: value2002 Key: 49256, Value: value1227 Key: 57448, Value: value2459 Key: 49257, Value: value3719 Key: 65643, Value: value3325 Key: 49263, Value: value4674 Key: 82032, Value: value607 Key: 32881, Value: value4934 Key: 82039, Value: value4966 Key: 41079, Value: value494 Key: 121, Value: value2759 Key: 32891, Value: value4635 Key: 32894, Value: value360 Key: 8319, Value: value535 Key: 82049, Value: value4608 Key: 90241, Value: value4758 Key: 24706, Value: value1180 Key: 90245, Value: value4561 Key: 82052, Value: value2055 Key: 90244, Value: value3938 Key: 65670, Value: value1693 Key: 137, Value: value2021 Key: 32908, Value: value4065 Key: 16528, Value: value298 Key: 41104, Value: value1748 Key: 8338, Value: value3159 Key: 73874, Value: value3431 Key: 82069, Value: value4630 Key: 65684, Value: value2462 Key: 49303, Value: value1039 Key: 24729, Value: value2719 Key: 24730, Value: value1550 Key: 98461, Value: value4552 Key: 82079, Value: value115 Key: 73886, Value: value2539 Key: 16550, Value: value2606 Key: 73895, Value: value3206 Key: 73894, Value: value3270 Key: 41128, Value: value1359 Key: 16552, Value: value1841 Key: 73897, Value: value4492 Key: 41130, Value: value3452 Key: 73898, Value: value551 Key: 8363, Value: value1545 Key: 49324, Value: value3020 Key: 82092, Value: value2152 Key: 8366, Value: value2941 Key: 82096, Value: value2579 Key: 65712, Value: value2700 Key: 90291, Value: value37 Key: 182, Value: value3162 Key: 65718, Value: value2810 Key: 41144, Value: value1366 Key: 49337, Value: value4285 Key: 41146, Value: value759 Key: 73917, Value: value1956 Key: 41149, Value: value3741 Key: 65729, Value: value1790 Key: 57536, Value: value2635 Key: 49346, Value: value645 Key: 32966, Value: value3292 Key: 82121, Value: value1343 Key: 24778, Value: value4524 Key: 90317, Value: value4122 Key: 41165, Value: value1910 Key: 57549, Value: value3722 Key: 90318, Value: value2840 Key: 57552, Value: value988 Key: 98515, Value: value1741 Key: 49365, Value: value1715 Key: 16603, Value: value3442 Key: 224, Value: value422 Key: 41186, Value: value1187 Key: 8422, Value: value688 Key: 16615, Value: value1042 Key: 73962, Value: value184 Key: 98541, Value: value4640 Key: 57582, Value: value3728 Key: 90350, Value: value4219 Key: 73968, Value: value1943 Key: 24817, Value: value1994 Key: 41201, Value: value4511 Key: 82162, Value: value1563 Key: 98546, Value: value2646 Key: 49395, Value: value3068 Key: 57587, Value: value4595 Key: 57589, Value: value1333 Key: 98548, Value: value1735 Key: 65783, Value: value4663 Key: 16631, Value: value4019 Key: 49401, Value: value560 Key: 254, Value: value485 Key: 16639, Value: value1822 Key: 258, Value: value543 Key: 98563, Value: value1681 Key: 73986, Value: value1517 Key: 259, Value: value1795 Key: 49415, Value: value3018 Key: 98568, Value: value2014 Key: 82186, Value: value3274 Key: 98573, Value: value3359 Key: 41235, Value: value1744 Key: 33044, Value: value780 Key: 49428, Value: value2497 Key: 65812, Value: value2335 Key: 90391, Value: value2634 Key: 65817, Value: value1371 Key: 24859, Value: value241 Key: 98586, Value: value669 Key: 8475, Value: value3047 Key: 74015, Value: value818 Key: 57632, Value: value4680 Key: 33058, Value: value3078 Key: 90402, Value: value1134 Key: 24868, Value: value3732 Key: 41252, Value: value4148 Key: 33060, Value: value4609 Key: 98597, Value: value4656 Key: 41253, Value: value2896 Key: 33063, Value: value1407 Key: 74027, Value: value277 Key: 57642, Value: value2772 Key: 57643, Value: value3485 Key: 41260, Value: value2551 Key: 16687, Value: value3718 Key: 49461, Value: value4518 Key: 49462, Value: value739 Key: 16697, Value: value309 Key: 24889, Value: value3672 Key: 33083, Value: value3653 Key: 16700, Value: value1844 Key: 24892, Value: value3556 Key: 74049, Value: value3098 Key: 98624, Value: value2047 Key: 322, Value: value4409 Key: 98626, Value: value2022 Key: 16714, Value: value2200 Key: 98634, Value: value835 Key: 24909, Value: value647 Key: 41293, Value: value2115 Key: 8525, Value: value4460 Key: 82255, Value: value4789 Key: 49487, Value: value711 Key: 41295, Value: value1734 Key: 65870, Value: value1737 Key: 8531, Value: value4160 Key: 82261, Value: value4367 Key: 82260, Value: value1339 Key: 82263, Value: value2005 Key: 57687, Value: value4396 Key: 57689, Value: value3382 Key: 57690, Value: value3113 Key: 8539, Value: value2965 Key: 82268, Value: value3716 Key: 90460, Value: value4532 Key: 24926, Value: value1986 Key: 98654, Value: value4574 Key: 98657, Value: value181 Key: 82273, Value: value2349 Key: 98656, Value: value3947 Key: 16737, Value: value4926 Key: 8546, Value: value2153 Key: 49507, Value: value701 Key: 82276, Value: value290 Key: 57702, Value: value1991 Key: 33127, Value: value2736 Key: 360, Value: value3060 Key: 361, Value: value3866 Key: 98664, Value: value4578 Key: 8555, Value: value869 Key: 49516, Value: value4602 Key: 90480, Value: value1627 Key: 57714, Value: value3797 Key: 57716, Value: value1326 Key: 74102, Value: value4158 Key: 24952, Value: value1608 Key: 8569, Value: value3486 Key: 24955, Value: value2783 Key: 16764, Value: value2360 Key: 33148, Value: value3199 Key: 74111, Value: value1448 Key: 24958, Value: value2106 Key: 16767, Value: value3767 Key: 90497, Value: value1577 Key: 24962, Value: value2631 Key: 65925, Value: value769 Key: 16772, Value: value1506 Key: 24964, Value: value2013 Key: 90501, Value: value4980 Key: 33158, Value: value2545 Key: 8582, Value: value3154 Key: 57738, Value: value2583 Key: 57739, Value: value2250 Key: 74124, Value: value194 Key: 57743, Value: value3956 Key: 24981, Value: value2199 Key: 33175, Value: value1540 Key: 8599, Value: value2096 Key: 98713, Value: value794 Key: 65944, Value: value2092 Key: 49564, Value: value3530 Key: 414, Value: value4970 Key: 33183, Value: value275 Key: 65950, Value: value3782 Key: 82337, Value: value409 Key: 16800, Value: value4482 Key: 33186, Value: value2995 Key: 49571, Value: value1904 Key: 41380, Value: value261 Key: 49573, Value: value47 Key: 16806, Value: value1060 Key: 25001, Value: value4878 Key: 25002, Value: value4826 Key: 41389, Value: value815 Key: 8622, Value: value2277 Key: 49582, Value: value2647 Key: 16818, Value: value2683 Key: 41395, Value: value3120 Key: 41396, Value: value196 Key: 8633, Value: value253 Key: 98747, Value: value4310 Key: 16828, Value: value728 Key: 444, Value: value4522 Key: 41405, Value: value3080 Key: 49597, Value: value3850 Key: 82364, Value: value4277 Key: 98751, Value: value1129 Key: 33218, Value: value4224 Key: 74179, Value: value4257 Key: 16835, Value: value1136 Key: 25028, Value: value2819 Key: 49606, Value: value368 Key: 57802, Value: value572 Key: 8650, Value: value4991 Key: 461, Value: value2017 Key: 90574, Value: value2911 Key: 82387, Value: value1760 Key: 49619, Value: value419 Key: 74196, Value: value4618 Key: 33238, Value: value7 Key: 472, Value: value2037 Key: 57816, Value: value4846 Key: 49625, Value: value2629 Key: 33241, Value: value3649 Key: 90584, Value: value4564 Key: 16858, Value: value706 Key: 82397, Value: value736 Key: 90588, Value: value4936 Key: 57822, Value: value4463 Key: 82398, Value: value2484 Key: 82401, Value: value186 Key: 41441, Value: value4417 Key: 41444, Value: value4149 Key: 82404, Value: value3275 Key: 49639, Value: value507 Key: 41449, Value: value2714 Key: 33257, Value: value3941 Key: 489, Value: value4868 Key: 66024, Value: value4875 Key: 49645, Value: value370 Key: 16879, Value: value3409 Key: 90606, Value: value4798 Key: 41456, Value: value4935 Key: 33265, Value: value3256 Key: 49649, Value: value3777 Key: 74226, Value: value3997 Key: 8694, Value: value2408 Key: 25079, Value: value3736 Key: 41464, Value: value3967 Key: 8702, Value: value2016 Key: 8707, Value: value4735 Key: 98820, Value: value3614 Key: 33286, Value: value1375 Key: 49670, Value: value1852 Key: 90631, Value: value3892 Key: 25097, Value: value1936 Key: 33290, Value: value1059 Key: 57867, Value: value1057 Key: 33292, Value: value235 Key: 8719, Value: value1855 Key: 74259, Value: value4284 Key: 82450, Value: value4547 Key: 49685, Value: value4794 Key: 74263, Value: value4529 Key: 98838, Value: value1811 Key: 41497, Value: value1686 Key: 98843, Value: value3676 Key: 539, Value: value2848 Key: 57885, Value: value292 Key: 8734, Value: value2362 Key: 57887, Value: value1473 Key: 98846, Value: value1560 Key: 544, Value: value136 Key: 90656, Value: value1085 Key: 16929, Value: value3922 Key: 41505, Value: value4870 Key: 90661, Value: value2590 Key: 8741, Value: value4767 Key: 57895, Value: value4237 Key: 66089, Value: value2907 Key: 57898, Value: value2610 Key: 74285, Value: value326 Key: 8748, Value: value889 Key: 16940, Value: value3749 Key: 74287, Value: value2786 Key: 41519, Value: value95 Key: 16943, Value: value2104 Key: 98865, Value: value2073 Key: 74290, Value: value116 Key: 41523, Value: value2686 Key: 25140, Value: value2370 Key: 66103, Value: value2435 Key: 74299, Value: value1156 Key: 82491, Value: value2644 Key: 49725, Value: value568 Key: 574, Value: value919 Key: 98878, Value: value1575 Key: 74302, Value: value3085 Key: 575, Value: value3231 Key: 41540, Value: value2682 Key: 25157, Value: value192 Key: 33349, Value: value2636 Key: 74311, Value: value717 Key: 41542, Value: value1573 Key: 90700, Value: value2477 Key: 57937, Value: value1378 Key: 98899, Value: value71 Key: 90707, Value: value4942 Key: 49747, Value: value597 Key: 66133, Value: value2922 Key: 90709, Value: value1838 Key: 98903, Value: value4879 Key: 16983, Value: value1249 Key: 98907, Value: value79 Key: 57947, Value: value3618 Key: 66141, Value: value410 Key: 74335, Value: value331 Key: 8798, Value: value3358 Key: 33377, Value: value1 Key: 16993, Value: value2059 Key: 57956, Value: value3471 Key: 74340, Value: value968 Key: 41573, Value: value2660 Key: 66151, Value: value2498 Key: 82536, Value: value4039 Key: 49770, Value: value1266 Key: 25196, Value: value4681 Key: 74350, Value: value4570 Key: 624, Value: value1287 Key: 74353, Value: value1630 Key: 57970, Value: value2502 Key: 41589, Value: value813 Key: 49782, Value: value3551 Key: 49783, Value: value2658 Key: 82550, Value: value3870 Key: 90742, Value: value4541 Key: 98936, Value: value2914 Key: 635, Value: value3828 Key: 17020, Value: value622 Key: 66172, Value: value124 Key: 66174, Value: value63 Key: 33407, Value: value88 Key: 74366, Value: value4017 Key: 49793, Value: value2089 Key: 17026, Value: value2823 Key: 98946, Value: value2283 Key: 66178, Value: value4201 Key: 41606, Value: value4787 Key: 25223, Value: value3894 Key: 66185, Value: value2064 Key: 654, Value: value2496 Key: 98958, Value: value867 Key: 82577, Value: value2237 Key: 82579, Value: value1644 Key: 82581, Value: value594 Key: 17045, Value: value3796 Key: 66196, Value: value4136 Key: 25238, Value: value193 Key: 90775, Value: value2191 Key: 41623, Value: value1328 Key: 58007, Value: value4287 Key: 82582, Value: value4712 Key: 41626, Value: value909 Key: 8859, Value: value4236 Key: 98972, Value: value2723 Key: 82590, Value: value3058 Key: 82596, Value: value173 Key: 17062, Value: value1572 Key: 8872, Value: value550 Key: 98984, Value: value3057 Key: 685, Value: value2447 Key: 41646, Value: value3534 Key: 82606, Value: value4147 Key: 82609, Value: value2999 Key: 74424, Value: value4641 Key: 99006, Value: value4041 Key: 90816, Value: value239 Key: 17089, Value: value3428 Key: 66243, Value: value2582 Key: 8898, Value: value4185 Key: 49861, Value: value3836 Key: 710, Value: value1972 Key: 66247, Value: value4348 Key: 25288, Value: value664 Key: 8908, Value: value4504 Key: 66252, Value: value984 Key: 17101, Value: value4749 Key: 17103, Value: value2615 Key: 74454, Value: value247 Key: 8919, Value: value2854 Key: 99041, Value: value2519 Key: 58088, Value: value3077 Key: 58089, Value: value753 Key: 90856, Value: value4500 Key: 33513, Value: value866 Key: 99053, Value: value2643 Key: 49900, Value: value4378 Key: 33518, Value: value3557 Key: 58095, Value: value2246 Key: 25328, Value: value3789 Key: 17139, Value: value2400 Key: 41716, Value: value457 Key: 90869, Value: value757 Key: 17140, Value: value4016 Key: 82676, Value: value788 Key: 74490, Value: value4514 Key: 74493, Value: value4362 Key: 49917, Value: value1453 Key: 82687, Value: value2420 Key: 90881, Value: value397 Key: 99072, Value: value4015 Key: 25347, Value: value1799 Key: 58115, Value: value3338 Key: 8964, Value: value1618 Key: 82693, Value: value2657 Key: 8967, Value: value4128 Key: 25354, Value: value449 Key: 8972, Value: value1592 Key: 8975, Value: value1164 Key: 17167, Value: value1672 Key: 82707, Value: value3448 Key: 787, Value: value792 Key: 90902, Value: value1331 Key: 99094, Value: value2491 Key: 25367, Value: value3365 Key: 8983, Value: value4948 Key: 792, Value: value76 Key: 33560, Value: value2587 Key: 49945, Value: value2227 Key: 795, Value: value3040 Key: 41755, Value: value3153 Key: 25372, Value: value1006 Key: 66333, Value: value2787 Key: 796, Value: value3481 Key: 58140, Value: value3697 Key: 58141, Value: value4204 Key: 90910, Value: value2122 Key: 90913, Value: value3371 Key: 66341, Value: value579 Key: 8997, Value: value3566 Key: 66345, Value: value2015 Key: 17193, Value: value4223 Key: 9002, Value: value313 Key: 66347, Value: value1887 Key: 25388, Value: value1461 Key: 82732, Value: value3134 Key: 99116, Value: value4240 Key: 66350, Value: value1912 Key: 41779, Value: value3680 Key: 41784, Value: value2171 Key: 49978, Value: value1696 Key: 99137, Value: value2255 Key: 49985, Value: value1320 Key: 99136, Value: value1723 Key: 41794, Value: value479 Key: 834, Value: value2940 Key: 9028, Value: value4867 Key: 33605, Value: value1620 Key: 33609, Value: value3970 Key: 58185, Value: value4339 Key: 99146, Value: value109 Key: 66378, Value: value1970 Key: 844, Value: value2334 Key: 58188, Value: value4972 Key: 41805, Value: value379 Key: 66385, Value: value3627 Key: 33618, Value: value1420 Key: 50005, Value: value4384 Key: 82776, Value: value1679 Key: 17243, Value: value3363 Key: 74590, Value: value4258 Key: 50016, Value: value2815 Key: 50021, Value: value2452 Key: 25446, Value: value1495 Key: 870, Value: value2343 Key: 50026, Value: value2902 Key: 25452, Value: value541 Key: 99181, Value: value1755 Key: 25454, Value: value3928 Key: 9072, Value: value364 Key: 25458, Value: value1920 Key: 50036, Value: value3761 Key: 90996, Value: value2176 Key: 82808, Value: value2833 Key: 66429, Value: value4782 Key: 66428, Value: value3473 Key: 82817, Value: value1004 Key: 905, Value: value1600 Key: 17291, Value: value4951 Key: 41868, Value: value4040 Key: 91020, Value: value4405 Key: 33678, Value: value1337 Key: 74639, Value: value4856 Key: 17296, Value: value2824 Key: 99216, Value: value576 Key: 74644, Value: value2584 Key: 9110, Value: value1292 Key: 918, Value: value1666 Key: 66457, Value: value4386 Key: 41881, Value: value2165 Key: 33692, Value: value1121 Key: 91038, Value: value1733 Key: 50081, Value: value4775 Key: 50082, Value: value3234 Key: 9122, Value: value4950 Key: 58275, Value: value1889 Key: 58279, Value: value2479 Key: 9127, Value: value3567 Key: 9130, Value: value1000 Key: 99243, Value: value4398 Key: 58283, Value: value1947 Key: 940, Value: value4186 Key: 91052, Value: value4242 Key: 99247, Value: value2597 Key: 944, Value: value1714 Key: 50098, Value: value442 Key: 947, Value: value4495 Key: 58294, Value: value1776 Key: 91062, Value: value1435 Key: 50105, Value: value2913 Key: 82872, Value: value4270 Key: 50106, Value: value1232 Key: 99259, Value: value3460 Key: 91066, Value: value4217 Key: 66493, Value: value1223 Key: 58301, Value: value4358 Key: 58305, Value: value2112 Key: 66496, Value: value2557 Key: 41921, Value: value2624 Key: 74691, Value: value8 Key: 82884, Value: value3132 Key: 66502, Value: value2285 Key: 17353, Value: value1314 Key: 74705, Value: value1451 Key: 50131, Value: value2450 Key: 9174, Value: value2018 Key: 984, Value: value638 Key: 99289, Value: value932 Key: 50139, Value: value3692 Key: 988, Value: value3774 Key: 9180, Value: value4810 Key: 9181, Value: value487 Key: 82908, Value: value549 Key: 74716, Value: value4720 Key: 66527, Value: value2123 Key: 99296, Value: value1114 Key: 74720, Value: value1315 Key: 41955, Value: value4164 Key: 58340, Value: value288 Key: 66533, Value: value3160 Key: 33764, Value: value4000 Key: 99305, Value: value965 Key: 91119, Value: value2424 Key: 1006, Value: value2978 Key: 99313, Value: value1011 Key: 74737, Value: value2345 Key: 9203, Value: value2693 Key: 74742, Value: value2595 Key: 82934, Value: value4869 Key: 33785, Value: value758 Key: 9210, Value: value2286 Key: 50172, Value: value3348 Key: 9214, Value: value2180 Key: 41983, Value: value733 Key: 9216, Value: value1654 Key: 58368, Value: value2147 Key: 17409, Value: value4276 Key: 99335, Value: value2058 Key: 1032, Value: value3093 Key: 82952, Value: value683 Key: 58378, Value: value1054 Key: 42000, Value: value1908 Key: 42004, Value: value330 Key: 17428, Value: value4239 Key: 42008, Value: value2427 Key: 74780, Value: value3337 Key: 99359, Value: value4066 Key: 91167, Value: value4592 Key: 91169, Value: value2983 Key: 17441, Value: value1247 Key: 82979, Value: value748 Key: 33826, Value: value1909 Key: 58404, Value: value2348 Key: 1061, Value: value2670 Key: 74790, Value: value1299 Key: 33832, Value: value2938 Key: 99370, Value: value1556 Key: 33839, Value: value1885 Key: 1073, Value: value2274 Key: 58417, Value: value2605 Key: 66608, Value: value2982 Key: 25650, Value: value4182 Key: 74803, Value: value4843 Key: 1076, Value: value2661 Key: 9269, Value: value3101 Key: 58422, Value: value222 Key: 58425, Value: value4945 Key: 91195, Value: value3072 Key: 17469, Value: value2030 Key: 50238, Value: value2159 Key: 83007, Value: value4932 Key: 33855, Value: value2307 Key: 83011, Value: value821 Key: 74821, Value: value1981 Key: 74820, Value: value2812 Key: 66631, Value: value4599 Key: 33864, Value: value1634 Key: 50250, Value: value2675 Key: 1099, Value: value91 Key: 99402, Value: value500 Key: 17484, Value: value995 Key: 50253, Value: value205 Key: 25678, Value: value353 Key: 1103, Value: value3112 Key: 25681, Value: value250 Key: 74832, Value: value893 Key: 50257, Value: value3521 Key: 50259, Value: value2776 Key: 91221, Value: value1183 Key: 1110, Value: value1988 Key: 9302, Value: value2743 Key: 66647, Value: value2849 Key: 74843, Value: value2166 Key: 74842, Value: value3285 Key: 58460, Value: value2684 Key: 74845, Value: value3712 Key: 74844, Value: value1036 Key: 99425, Value: value1496 Key: 91233, Value: value2113 Key: 9314, Value: value3502 Key: 74852, Value: value569 Key: 1126, Value: value1399 Key: 83046, Value: value4510 Key: 9320, Value: value1089 Key: 99432, Value: value4650 Key: 25707, Value: value561 Key: 99437, Value: value2835 Key: 9326, Value: value202 Key: 58479, Value: value1452 Key: 83059, Value: value1966 Key: 99443, Value: value2288 Key: 83063, Value: value3957 Key: 33912, Value: value1207 Key: 17528, Value: value3183 Key: 66680, Value: value1727 Key: 83066, Value: value1924 Key: 25724, Value: value1586 Key: 17532, Value: value2701 Key: 17538, Value: value981 Key: 58498, Value: value3017 Key: 9347, Value: value745 Key: 83076, Value: value4634 Key: 9350, Value: value989 Key: 17544, Value: value2432 Key: 74889, Value: value2791 Key: 1160, Value: value3164 Key: 9352, Value: value3593 Key: 91275, Value: value3030 Key: 66701, Value: value587 Key: 33935, Value: value4488 Key: 33936, Value: value336 Key: 74900, Value: value2455 Key: 33948, Value: value2093 Key: 1182, Value: value2998 Key: 50336, Value: value2210 Key: 83108, Value: value4227 Key: 58534, Value: value4610 Key: 99497, Value: value862 Key: 91307, Value: value3885 Key: 66730, Value: value2908 Key: 99501, Value: value4424 Key: 74924, Value: value1730 Key: 83116, Value: value3049 Key: 9390, Value: value1250 Key: 1199, Value: value4346 Key: 9391, Value: value1754 Key: 74933, Value: value4861 Key: 66743, Value: value1660 Key: 50358, Value: value2511 Key: 9399, Value: value1401 Key: 25785, Value: value3126 Key: 17598, Value: value1304 Key: 50366, Value: value3138 Key: 42175, Value: value2434 Key: 58559, Value: value4391 Key: 50369, Value: value2875 Key: 58562, Value: value3276 Key: 17603, Value: value3604 Key: 33988, Value: value411 Key: 1220, Value: value3475 Key: 74951, Value: value710 Key: 83144, Value: value1661 Key: 25801, Value: value4655 Key: 91339, Value: value978 Key: 25802, Value: value1892 Key: 99532, Value: value911 Key: 66767, Value: value4896 Key: 25806, Value: value4596 Key: 9423, Value: value3191 Key: 99537, Value: value1899 Key: 74965, Value: value4269 Key: 42199, Value: value552 Key: 74968, Value: value4420 Key: 74972, Value: value581 Key: 66780, Value: value2863 Key: 34013, Value: value4700 Key: 42208, Value: value3426 Key: 1249, Value: value4881 Key: 58594, Value: value4576 Key: 66786, Value: value350 Key: 99554, Value: value4104 Key: 9444, Value: value2962 Key: 34021, Value: value1135 Key: 50409, Value: value1273 Key: 66796, Value: value1110 Key: 74988, Value: value4025 Key: 91372, Value: value4443 Key: 99567, Value: value1009 Key: 17648, Value: value913 Key: 9456, Value: value2516 Key: 25840, Value: value3497 Key: 91376, Value: value3994 Key: 34035, Value: value367 Key: 66802, Value: value1434 Key: 9460, Value: value141 Key: 74996, Value: value456 Key: 25846, Value: value408 Key: 9468, Value: value3998 Key: 66812, Value: value1251 Key: 25855, Value: value763 Key: 83201, Value: value1561 Key: 42240, Value: value4888 Key: 50433, Value: value278 Key: 83202, Value: value489 Key: 58627, Value: value4801 Key: 42244, Value: value857 Key: 9477, Value: value428 Key: 50437, Value: value3172 Key: 75019, Value: value1861 Key: 42250, Value: value4373 Key: 34063, Value: value534 Key: 9487, Value: value1096 Key: 66830, Value: value2552 Key: 58639, Value: value4255 Key: 42256, Value: value294 Key: 66832, Value: value2162 Key: 75024, Value: value4230 Key: 34065, Value: value4441 Key: 66837, Value: value112 Key: 66841, Value: value4540 Key: 83227, Value: value3202 Key: 17691, Value: value1311 Key: 75039, Value: value285 Key: 66847, Value: value1809 Key: 58654, Value: value3239 Key: 50465, Value: value2681 Key: 83239, Value: value3772 Key: 66854, Value: value242 Key: 75046, Value: value2358 Key: 9513, Value: value1668 Key: 91435, Value: value2422 Key: 66860, Value: value1169 Key: 50478, Value: value3757 Key: 99635, Value: value3032 Key: 50483, Value: value248 Key: 58678, Value: value4726 Key: 17720, Value: value635 Key: 34106, Value: value4742 Key: 25919, Value: value1213 Key: 58688, Value: value3706 Key: 50499, Value: value4451 Key: 42309, Value: value2342 Key: 66888, Value: value2208 Key: 50506, Value: value943 Key: 58700, Value: value1064 Key: 1357, Value: value1886 Key: 34125, Value: value4825 Key: 34126, Value: value3963 Key: 83283, Value: value4709 Key: 66900, Value: value3266 Key: 99675, Value: value1486 Key: 75103, Value: value1598 Key: 91487, Value: value2204 Key: 1374, Value: value4631 Key: 66910, Value: value795 Key: 1375, Value: value3630 Key: 42339, Value: value860 Key: 9571, Value: value973 Key: 75109, Value: value513 Key: 1383, Value: value3035 Key: 25960, Value: value238 Key: 66921, Value: value3419 Key: 50536, Value: value2649 Key: 1384, Value: value3579 Key: 58729, Value: value760 Key: 83304, Value: value2958 Key: 91499, Value: value3024 Key: 83311, Value: value3223 Key: 17774, Value: value4803 Key: 25968, Value: value907 Key: 99696, Value: value3603 Key: 75122, Value: value279 Key: 42359, Value: value4054 Key: 17783, Value: value4290 Key: 83320, Value: value100 Key: 1402, Value: value3923 Key: 66945, Value: value528 Key: 17793, Value: value806 Key: 34181, Value: value2284 Key: 17797, Value: value4497 Key: 9607, Value: value741 Key: 66950, Value: value1925 Key: 25992, Value: value2090 Key: 99723, Value: value3926 Key: 42380, Value: value626 Key: 25997, Value: value969 Key: 66956, Value: value4467 Key: 75153, Value: value2442 Key: 50576, Value: value3320 Key: 1424, Value: value3965 Key: 66963, Value: value4170 Key: 91541, Value: value530 Key: 58772, Value: value2175 Key: 9621, Value: value1547 Key: 83353, Value: value4030 Key: 34203, Value: value3351 Key: 17821, Value: value4753 Key: 17822, Value: value2367 Key: 34206, Value: value3069 Key: 91553, Value: value4883 Key: 75168, Value: value347 Key: 26018, Value: value256 Key: 91555, Value: value4611 Key: 66978, Value: value3037 Key: 42406, Value: value532 Key: 9639, Value: value3507 Key: 58793, Value: value2959 Key: 58794, Value: value2895 Key: 66989, Value: value4536 Key: 66991, Value: value3341 Key: 75182, Value: value436 Key: 26035, Value: value1403 Key: 26037, Value: value762 Key: 66996, Value: value1896 Key: 1462, Value: value2062 Key: 42423, Value: value553 Key: 9656, Value: value944 Key: 99769, Value: value1230 Key: 17852, Value: value1181 Key: 99772, Value: value2177 Key: 1469, Value: value3812 Key: 50623, Value: value3249 Key: 91595, Value: value956 Key: 17866, Value: value3048 Key: 50636, Value: value1698 Key: 17868, Value: value2010 Key: 50639, Value: value65 Key: 83406, Value: value2466 Key: 83415, Value: value2410 Key: 91611, Value: value833 Key: 26076, Value: value1242 Key: 17884, Value: value4134 Key: 50653, Value: value3651 Key: 34269, Value: value3955 Key: 83422, Value: value2433 Key: 9697, Value: value99 Key: 42467, Value: value4474 Key: 91622, Value: value2326 Key: 17896, Value: value1212 Key: 17899, Value: value709 Key: 42475, Value: value4778 Key: 83438, Value: value2099 Key: 99822, Value: value2495 Key: 34288, Value: value3416 Key: 91633, Value: value4006 Key: 42481, Value: value655 Key: 26097, Value: value2160 Key: 58865, Value: value3305 Key: 1522, Value: value1425 Key: 75253, Value: value3108 Key: 75252, Value: value2257 Key: 67060, Value: value2571 Key: 99833, Value: value1341 Key: 50681, Value: value3262 Key: 99835, Value: value3899 Key: 99836, Value: value1761 Key: 1534, Value: value1182 Key: 26110, Value: value2534 Key: 67073, Value: value2779 Key: 17920, Value: value3808 Key: 58884, Value: value3205 Key: 26120, Value: value2126 Key: 42504, Value: value4267 Key: 99850, Value: value3800 Key: 17932, Value: value2929 Key: 1550, Value: value1379 Key: 9743, Value: value3936 Key: 99856, Value: value3167 Key: 34323, Value: value4752 Key: 58900, Value: value4199 Key: 9749, Value: value4923 Key: 91670, Value: value1234 Key: 99862, Value: value2003 Key: 91676, Value: value2589 Key: 50721, Value: value206 Key: 9761, Value: value1090 Key: 75299, Value: value4898 Key: 34339, Value: value3410 Key: 99877, Value: value692 Key: 83492, Value: value4254 Key: 75305, Value: value4374 Key: 91688, Value: value808 Key: 58921, Value: value964 Key: 67114, Value: value3372 Key: 67116, Value: value4567 Key: 91697, Value: value1262 Key: 67121, Value: value1750 Key: 42547, Value: value4392 Key: 75316, Value: value1728 Key: 17976, Value: value3910 Key: 75323, Value: value2807 Key: 83514, Value: value2111 Key: 75325, Value: value2667 Key: 42557, Value: value1382 Key: 34367, Value: value1564 Key: 26176, Value: value1787 Key: 58946, Value: value2702 Key: 91717, Value: value1584 Key: 67140, Value: value4003 Key: 9798, Value: value3303 Key: 26183, Value: value2572 Key: 58952, Value: value3457 Key: 67144, Value: value3436 Key: 26186, Value: value2716 Key: 50763, Value: value918 Key: 9803, Value: value2898 Key: 34380, Value: value1721 Key: 17996, Value: value2802 Key: 83534, Value: value562 Key: 34389, Value: value2901 Key: 1622, Value: value2268 Key: 91734, Value: value1387 Key: 99926, Value: value2789 Key: 58967, Value: value4393 Key: 1624, Value: value526 Key: 50776, Value: value1103 Key: 99929, Value: value1173 Key: 9816, Value: value4707 Key: 83546, Value: value4646 Key: 1628, Value: value3087 Key: 9821, Value: value60 Key: 34401, Value: value1645 Key: 34402, Value: value4917 Key: 1635, Value: value2632 Key: 67173, Value: value501 Key: 99943, Value: value2671 Key: 99945, Value: value667 Key: 75369, Value: value4412 Key: 18029, Value: value3122 Key: 91759, Value: value3432 Key: 58991, Value: value1995 Key: 26225, Value: value939 Key: 58997, Value: value2827 Key: 34425, Value: value2476 Key: 26235, Value: value2617 Key: 9851, Value: value3851 Key: 1659, Value: value3902 Key: 18044, Value: value1596 Key: 9853, Value: value928 Key: 9854, Value: value2788 Key: 26239, Value: value211 Key: 83582, Value: value2375 Key: 26240, Value: value3414 Key: 91780, Value: value499 Key: 83591, Value: value812 Key: 67207, Value: value4921 Key: 75403, Value: value3590 Key: 75402, Value: value1897 Key: 42636, Value: value2354 Key: 75405, Value: value4643 Key: 34446, Value: value189 Key: 18063, Value: value1719 Key: 59027, Value: value1256 Key: 18070, Value: value22 Key: 34454, Value: value4571 Key: 1687, Value: value296 Key: 50842, Value: value5 Key: 75419, Value: value2806 Key: 1691, Value: value1504 Key: 18077, Value: value2930 Key: 26272, Value: value3986 Key: 67234, Value: value916 Key: 34467, Value: value1722 Key: 34469, Value: value1144 Key: 67236, Value: value3011 Key: 91812, Value: value4238 Key: 9895, Value: value4587 Key: 50856, Value: value3543 Key: 59050, Value: value4403 Key: 42669, Value: value2971 Key: 67247, Value: value2164 Key: 34478, Value: value4815 Key: 9904, Value: value3400 Key: 75440, Value: value3186 Key: 18101, Value: value523 Key: 42677, Value: value1086 Key: 75444, Value: value4355 Key: 26295, Value: value4629 Key: 67257, Value: value132 Key: 91832, Value: value0 Key: 91837, Value: value2025 Key: 34496, Value: value3109 Key: 1729, Value: value178 Key: 83651, Value: value4114 Key: 34501, Value: value3484 Key: 83656, Value: value629 Key: 18123, Value: value276 Key: 42701, Value: value3148 Key: 26319, Value: value2954 Key: 42703, Value: value2973 Key: 75473, Value: value723 Key: 50896, Value: value1019 Key: 67281, Value: value4617 Key: 59094, Value: value1629 Key: 26328, Value: value2550 Key: 50906, Value: value1963 Key: 75483, Value: value2352 Key: 9947, Value: value458 Key: 18140, Value: value4484 Key: 9950, Value: value3862 Key: 75489, Value: value4719 Key: 83685, Value: value2767 Key: 67301, Value: value3832 Key: 42726, Value: value3244 Key: 83687, Value: value3640 Key: 26344, Value: value2694 Key: 83691, Value: value3479 Key: 18157, Value: value2463 Key: 50925, Value: value4076 Key: 34541, Value: value4776 Key: 26350, Value: value3023 Key: 91889, Value: value2223 Key: 1777, Value: value1307 Key: 9971, Value: value4202 Key: 67316, Value: value1498 Key: 75508, Value: value2687 Key: 18169, Value: value3361 Key: 26361, Value: value4408 Key: 67320, Value: value4486 Key: 67324, Value: value4545 Key: 34558, Value: value4077 Key: 50944, Value: value2844 Key: 26369, Value: value234 Key: 1793, Value: value1531 Key: 50946, Value: value586 Key: 67333, Value: value2666 Key: 67332, Value: value3977 Key: 34567, Value: value3294 Key: 83720, Value: value4332 Key: 26379, Value: value1673 Key: 1804, Value: value2745 Key: 26381, Value: value4338 Key: 50957, Value: value4988 Key: 42768, Value: value3211 Key: 26384, Value: value4023 Key: 34577, Value: value2897 Key: 75551, Value: value2079 Key: 26398, Value: value4350 Key: 59168, Value: value3445 Key: 75552, Value: value1742 Key: 34594, Value: value4548 Key: 42788, Value: value775 Key: 50980, Value: value3127 Key: 1830, Value: value1507 Key: 67367, Value: value2762 Key: 34599, Value: value3208 Key: 83753, Value: value897 Key: 10024, Value: value3552 Key: 59176, Value: value4755 Key: 10031, Value: value1132 Key: 42802, Value: value1301 Key: 83762, Value: value4671 Key: 34612, Value: value2436 Key: 42805, Value: value1948 Key: 34613, Value: value4098 Key: 91956, Value: value4260 Key: 83767, Value: value3982 Key: 18232, Value: value4967 Key: 67386, Value: value4272 Key: 51008, Value: value78 Key: 91970, Value: value1290 Key: 59203, Value: value4399 Key: 75589, Value: value4319 Key: 83783, Value: value1244 Key: 10055, Value: value4961 Key: 59208, Value: value3399 Key: 67403, Value: value2919 Key: 67402, Value: value3360 Key: 51022, Value: value2179 Key: 59214, Value: value2441 Key: 1871, Value: value101 Key: 51023, Value: value4824 Key: 18256, Value: value950 Key: 51025, Value: value3413 Key: 75600, Value: value4551 Key: 1875, Value: value2046 Key: 83796, Value: value3391 Key: 42839, Value: value838 Key: 51031, Value: value2294 Key: 83801, Value: value4493 Key: 26459, Value: value2541 Key: 59229, Value: value4300 Key: 75619, Value: value1289 Key: 34659, Value: value1664 Key: 10090, Value: value143 Key: 75628, Value: value1228 Key: 51053, Value: value1360 Key: 10094, Value: value2327 Key: 1902, Value: value4583 Key: 75630, Value: value3904 Key: 59248, Value: value86 Key: 18288, Value: value3765 Key: 75633, Value: value2910 Key: 67440, Value: value1500 Key: 42866, Value: value4738 Key: 51061, Value: value3636 Key: 67450, Value: value1119 Key: 67453, Value: value4490 Key: 18301, Value: value486 Key: 26495, Value: value3463 Key: 26496, Value: value1732 Key: 59265, Value: value375 Key: 67459, Value: value1257 Key: 51075, Value: value4221 Key: 51076, Value: value639 Key: 26500, Value: value2387 Key: 51080, Value: value3278 Key: 18314, Value: value3506 Key: 75660, Value: value2904 Key: 59279, Value: value4043 Key: 92051, Value: value4033 Key: 67474, Value: value4762 Key: 18325, Value: value209 Key: 83860, Value: value942 Key: 75671, Value: value400 Key: 75670, Value: value3383 Key: 1945, Value: value868 Key: 59289, Value: value4265 Key: 26523, Value: value1007 Key: 42907, Value: value2287 Key: 92061, Value: value2469 Key: 75676, Value: value3163 Key: 26527, Value: value787 Key: 34719, Value: value2718 Key: 59295, Value: value3783 Key: 18336, Value: value3999 Key: 92067, Value: value3119 Key: 42915, Value: value1017 Key: 75687, Value: value1108 Key: 34726, Value: value1726 Key: 26534, Value: value2575 Key: 92070, Value: value1523 Key: 83881, Value: value4031 Key: 42922, Value: value831 Key: 75693, Value: value4331 Key: 83887, Value: value1845 Key: 18350, Value: value3964 Key: 75700, Value: value2912 Key: 1975, Value: value1854 Key: 26555, Value: value1161 Key: 26558, Value: value2339 Key: 42944, Value: value1176 Key: 67520, Value: value4329 Key: 67523, Value: value2379 Key: 92099, Value: value4586 Key: 92100, Value: value1687 Key: 75716, Value: value2374 Key: 83908, Value: value3932 Key: 92103, Value: value2130 Key: 75719, Value: value4924 Key: 18375, Value: value1998 Key: 51144, Value: value863 Key: 42954, Value: value2627 Key: 59342, Value: value618 Key: 34766, Value: value3715 Key: 75726, Value: value3632 Key: 75729, Value: value1123 Key: 83925, Value: value2515 Key: 92116, Value: value3347 Key: 2006, Value: value1766 Key: 75737, Value: value2213 Key: 59352, Value: value4543 Key: 18393, Value: value2456 Key: 34777, Value: value3723 Key: 67546, Value: value1310 Key: 83930, Value: value1649 Key: 2014, Value: value2244 Key: 34783, Value: value3511 Key: 67553, Value: value1140 Key: 83937, Value: value2980 Key: 34787, Value: value765 Key: 92130, Value: value2382 Key: 75746, Value: value2483 Key: 83946, Value: value470 Key: 92138, Value: value3582 Key: 51179, Value: value3814 Key: 59376, Value: value2405 Key: 18416, Value: value3386 Key: 75763, Value: value764 Key: 42998, Value: value1383 Key: 42999, Value: value3227 Key: 18424, Value: value4326 Key: 34809, Value: value268 Key: 92152, Value: value2205 Key: 2043, Value: value1288 Key: 67578, Value: value4264 Key: 43006, Value: value1624 Key: 43008, Value: value3425 Key: 75779, Value: value1202 Key: 34821, Value: value26 Key: 26631, Value: value1344 Key: 67595, Value: value2280 Key: 2060, Value: value4014 Key: 92179, Value: value3329 Key: 75797, Value: value246 Key: 26645, Value: value1394 Key: 43030, Value: value654 Key: 51226, Value: value1154 Key: 10267, Value: value3533 Key: 75802, Value: value4132 Key: 10269, Value: value1127 Key: 18462, Value: value2512 Key: 10271, Value: value2883 Key: 26658, Value: value1975 Key: 43043, Value: value3389 Key: 43044, Value: value3288 Key: 18472, Value: value414 Key: 92202, Value: value2070 Key: 84014, Value: value3818 Key: 84016, Value: value4400 Key: 34866, Value: value947 Key: 84019, Value: value1588 Key: 2099, Value: value1012 Key: 84018, Value: value3856 Key: 51254, Value: value602 Key: 75833, Value: value119 Key: 92223, Value: value4167 Key: 43073, Value: value188 Key: 51266, Value: value384 Key: 75843, Value: value2633 Key: 43075, Value: value3541 Key: 26692, Value: value3950 Key: 43078, Value: value2155 Key: 43080, Value: value1466 Key: 92232, Value: value2992 Key: 43082, Value: value4597 Key: 2125, Value: value3152 Key: 10320, Value: value1048 Key: 34897, Value: value159 Key: 84051, Value: value951 Key: 75858, Value: value421 Key: 18517, Value: value3207 Key: 43094, Value: value3644 Key: 18518, Value: value4722 Key: 67671, Value: value4208 Key: 26714, Value: value483 Key: 51293, Value: value1062 Key: 43101, Value: value2533 Key: 2144, Value: value1282 Key: 75872, Value: value4472 Key: 59492, Value: value4343 Key: 59494, Value: value4743 Key: 84070, Value: value3192 Key: 67690, Value: value1091 Key: 43115, Value: value2562 Key: 84076, Value: value634 Key: 92273, Value: value2733 Key: 18545, Value: value3867 Key: 2164, Value: value72 Key: 67702, Value: value2161 Key: 75902, Value: value3669 Key: 84096, Value: value2304 Key: 18563, Value: value4418 Key: 18564, Value: value4912 Key: 10373, Value: value3411 Key: 26757, Value: value4075 Key: 2181, Value: value4874 Key: 51335, Value: value604 Key: 43144, Value: value4603 Key: 10377, Value: value69 Key: 43145, Value: value4528 Key: 59531, Value: value4750 Key: 18580, Value: value4067 Key: 43156, Value: value4744 Key: 34966, Value: value633 Key: 75927, Value: value2189 Key: 43158, Value: value4632 Key: 43159, Value: value4198 Key: 75929, Value: value689 Key: 92319, Value: value3376 Key: 2206, Value: value4110 Key: 51360, Value: value4354 Key: 59555, Value: value4734 Key: 10406, Value: value1165 Key: 92329, Value: value354 Key: 10412, Value: value73 Key: 67757, Value: value3605 Key: 75949, Value: value3664 Key: 2221, Value: value2721 Key: 26797, Value: value3671 Key: 84144, Value: value4248 Key: 92338, Value: value853 Key: 43193, Value: value967 Key: 43196, Value: value4648 Key: 18621, Value: value2261 Key: 75967, Value: value1525 Key: 92351, Value: value4780 Key: 43199, Value: value1978 Key: 84160, Value: value2007 Key: 92354, Value: value339 Key: 26824, Value: value516 Key: 59593, Value: value4466 Key: 67787, Value: value1018 Key: 18634, Value: value3455 Key: 18636, Value: value3029 Key: 35022, Value: value1481 Key: 75982, Value: value4115 Key: 26831, Value: value4220 Key: 26837, Value: value3059 Key: 92375, Value: value363 Key: 59607, Value: value1467 Key: 35033, Value: value1022 Key: 35039, Value: value801 Key: 26851, Value: value2604 Key: 59624, Value: value767 Key: 51432, Value: value1295 Key: 92397, Value: value4024 Key: 76012, Value: value39 Key: 2287, Value: value3491 Key: 76014, Value: value4802 Key: 76021, Value: value3555 Key: 51445, Value: value3512 Key: 43254, Value: value1112 Key: 92407, Value: value2932 Key: 67833, Value: value1642 Key: 10488, Value: value2402 Key: 26873, Value: value3045 Key: 43258, Value: value1068 Key: 43259, Value: value1976 Key: 10493, Value: value735 Key: 35073, Value: value2282 Key: 2307, Value: value4773 Key: 26884, Value: value1713 Key: 51461, Value: value1381 Key: 26887, Value: value3917 Key: 10505, Value: value272 Key: 51472, Value: value946 Key: 51473, Value: value4243 Key: 84242, Value: value2729 Key: 18708, Value: value3572 Key: 59668, Value: value4695 Key: 35093, Value: value1261 Key: 67863, Value: value1974 Key: 43289, Value: value3461 Key: 76058, Value: value1934 Key: 18720, Value: value244 Key: 67874, Value: value3546 Key: 2341, Value: value4731 Key: 76070, Value: value2251 Key: 2346, Value: value2622 Key: 26925, Value: value2001 Key: 84268, Value: value4151 Key: 43310, Value: value2970 Key: 51504, Value: value3667 Key: 67891, Value: value3540 Key: 76085, Value: value2072 Key: 51510, Value: value3848 Key: 35127, Value: value2966 Key: 51513, Value: value308 Key: 84283, Value: value4370 Key: 51515, Value: value503 Key: 59710, Value: value4293 Key: 59712, Value: value3306 Key: 43330, Value: value3743 Key: 26948, Value: value3091 Key: 26949, Value: value1906 Key: 26950, Value: value4909 Key: 92491, Value: value2394 Key: 67915, Value: value4910 Key: 18766, Value: value1050 Key: 18772, Value: value1606 Key: 92503, Value: value823 Key: 26967, Value: value1410 Key: 67930, Value: value3537 Key: 43360, Value: value1497 Key: 92515, Value: value2053 Key: 51556, Value: value2409 Key: 67941, Value: value1594 Key: 26982, Value: value1428 Key: 18790, Value: value1622 Key: 35180, Value: value1657 Key: 76140, Value: value1610 Key: 51566, Value: value4455 Key: 18799, Value: value1309 Key: 76147, Value: value4741 Key: 76149, Value: value650 Key: 35189, Value: value1716 Key: 59766, Value: value1146 Key: 67958, Value: value834 Key: 59767, Value: value3713 Key: 76153, Value: value3175 Key: 51577, Value: value357 Key: 43386, Value: value1178 Key: 10620, Value: value3927 Key: 18815, Value: value2765 Key: 67969, Value: value575 Key: 2432, Value: value3995 Key: 92547, Value: value1104 Key: 43394, Value: value1457 Key: 51587, Value: value2841 Key: 59779, Value: value3996 Key: 27013, Value: value2403 Key: 67979, Value: value3751 Key: 27019, Value: value2359 Key: 51597, Value: value3346 Key: 2446, Value: value80 Key: 43408, Value: value431 Key: 43409, Value: value4985 Key: 84373, Value: value3465 Key: 51605, Value: value214 Key: 43414, Value: value45 Key: 51607, Value: value3948 Key: 84377, Value: value3308 Key: 76188, Value: value3240 Key: 27038, Value: value4544 Key: 43424, Value: value1237 Key: 84385, Value: value3204 Key: 68003, Value: value254 Key: 27042, Value: value3437 Key: 2468, Value: value473 Key: 18853, Value: value225 Key: 59814, Value: value1300 Key: 68011, Value: value3264 Key: 27050, Value: value3531 Key: 84396, Value: value2974 Key: 51630, Value: value387 Key: 43440, Value: value1483 Key: 92593, Value: value2060 Key: 84400, Value: value3390 Key: 10673, Value: value3934 Key: 68023, Value: value4485 Key: 27063, Value: value2508 Key: 68024, Value: value1671 Key: 43450, Value: value2708 Key: 2491, Value: value418 Key: 43457, Value: value1280 Key: 59842, Value: value1196 Key: 18882, Value: value1951 Key: 92613, Value: value1950 Key: 59845, Value: value2724 Key: 43461, Value: value3581 Key: 35270, Value: value3225 Key: 92617, Value: value2731 Key: 2506, Value: value2406 Key: 68042, Value: value4693 Key: 84426, Value: value4895 Key: 10700, Value: value2674 Key: 18893, Value: value2847 Key: 76240, Value: value280 Key: 51669, Value: value2471 Key: 68054, Value: value1253 Key: 92632, Value: value3738 Key: 2522, Value: value2238 Key: 76250, Value: value1049 Key: 35293, Value: value880 Key: 84444, Value: value2713 Key: 59877, Value: value4080 Key: 27111, Value: value2710 Key: 59881, Value: value3330 Key: 51691, Value: value2071 Key: 43502, Value: value2828 Key: 92657, Value: value4925 Key: 35313, Value: value424 Key: 18931, Value: value372 Key: 68085, Value: value1362 Key: 59892, Value: value1505 Key: 51700, Value: value4958 Key: 76276, Value: value4011 Key: 59894, Value: value2341 Key: 2551, Value: value3474 Key: 35321, Value: value2259 Key: 84481, Value: value4250 Key: 84480, Value: value1194 Key: 35329, Value: value1513 Key: 92675, Value: value797 Key: 59906, Value: value1832 Key: 27138, Value: value2753 Key: 10756, Value: value4761 Key: 84484, Value: value4058 Key: 84487, Value: value2158 Key: 59910, Value: value2566 Key: 43530, Value: value122 Key: 2570, Value: value3565 Key: 27147, Value: value233 Key: 84490, Value: value884 Key: 68109, Value: value1356 Key: 92685, Value: value4007 Key: 18958, Value: value1402 Key: 68117, Value: value1336 Key: 76313, Value: value997 Key: 68121, Value: value2057 Key: 10778, Value: value971 Key: 51742, Value: value4216 Key: 35359, Value: value3044 Key: 43554, Value: value1674 Key: 68133, Value: value1443 Key: 51749, Value: value243 Key: 43557, Value: value4303 Key: 10790, Value: value4468 Key: 35367, Value: value4045 Key: 68139, Value: value1197 Key: 2603, Value: value4078 Key: 2604, Value: value2725 Key: 51756, Value: value3729 Key: 2606, Value: value2711 Key: 84527, Value: value3117 Key: 76337, Value: value1915 Key: 84528, Value: value879 Key: 35377, Value: value2531 Key: 59954, Value: value4162 Key: 59955, Value: value1739 Key: 68149, Value: value217 Key: 76341, Value: value4649 Key: 68148, Value: value1095 Key: 43573, Value: value3561 Key: 51765, Value: value4315 Key: 27190, Value: value3116 Key: 68155, Value: value3421 Key: 68159, Value: value1875 Key: 92737, Value: value374 Key: 84544, Value: value23 Key: 19009, Value: value1313 Key: 43586, Value: value1929 Key: 76355, Value: value3688 Key: 2626, Value: value3871 Key: 68166, Value: value1306 Key: 35400, Value: value819 Key: 59978, Value: value2310 Key: 76363, Value: value2836 Key: 51787, Value: value2211 Key: 76365, Value: value1858 Key: 59982, Value: value3073 Key: 51792, Value: value1046 Key: 10832, Value: value1941 Key: 19025, Value: value2641 Key: 92754, Value: value344 Key: 51796, Value: value623 Key: 10836, Value: value3281 Key: 35414, Value: value644 Key: 68184, Value: value4922 Key: 27227, Value: value2201 Key: 84572, Value: value1544 Key: 19039, Value: value887 Key: 43616, Value: value3699 Key: 68192, Value: value2769 Key: 2660, Value: value2293 Key: 76388, Value: value484 Key: 35431, Value: value3916 Key: 19048, Value: value3313 Key: 60009, Value: value510 Key: 19049, Value: value1204 Key: 19050, Value: value334 Key: 2669, Value: value4100 Key: 68208, Value: value1502 Key: 68211, Value: value345 Key: 10868, Value: value707 Key: 2681, Value: value4105 Key: 60026, Value: value615 Key: 27258, Value: value3647 Key: 76413, Value: value4318 Key: 68223, Value: value990 Key: 27262, Value: value3724 Key: 84609, Value: value4509 Key: 60034, Value: value3393 Key: 76421, Value: value1840 Key: 43655, Value: value521 Key: 51847, Value: value4059 Key: 68233, Value: value3639 Key: 2697, Value: value3607 Key: 43660, Value: value4333 Key: 43661, Value: value3128 Key: 27277, Value: value3843 Key: 35471, Value: value1454 Key: 51857, Value: value1074 Key: 10897, Value: value4135 Key: 27283, Value: value304 Key: 2707, Value: value420 Key: 51859, Value: value620 Key: 43668, Value: value3886 Key: 76439, Value: value478 Key: 43670, Value: value2467 Key: 19095, Value: value453 Key: 10903, Value: value4317 Key: 10905, Value: value1945 Key: 60057, Value: value2097 Key: 92827, Value: value2979 Key: 92826, Value: value3840 Key: 35486, Value: value3880 Key: 60063, Value: value2083 Key: 51871, Value: value2156 Key: 10913, Value: value118 Key: 92832, Value: value310 Key: 76453, Value: value2396 Key: 68264, Value: value2773 Key: 35498, Value: value2689 Key: 84653, Value: value3476 Key: 60077, Value: value3075 Key: 19117, Value: value3501 Key: 68270, Value: value3931 Key: 76464, Value: value2241 Key: 84656, Value: value2532 Key: 35509, Value: value1891 Key: 43703, Value: value220 Key: 27319, Value: value2890 Key: 92857, Value: value466 Key: 10947, Value: value3976 Key: 43717, Value: value1465 Key: 51909, Value: value2067 Key: 76487, Value: value432 Key: 68295, Value: value4615 Key: 92875, Value: value4145 Key: 60106, Value: value4990 Key: 84682, Value: value4999 Key: 76495, Value: value3139 Key: 68302, Value: value1820 Key: 76497, Value: value407 Key: 68307, Value: value1125 Key: 10962, Value: value1626 Key: 92885, Value: value3746 Key: 76500, Value: value2279 Key: 19157, Value: value2445 Key: 43735, Value: value3708 Key: 92886, Value: value4705 Key: 19160, Value: value1529 Key: 43737, Value: value1798 Key: 35546, Value: value4590 Key: 51930, Value: value4660 Key: 60123, Value: value4589 Key: 2781, Value: value1880 Key: 35549, Value: value2489 Key: 92895, Value: value2081 Key: 68320, Value: value1637 Key: 76515, Value: value518 Key: 19170, Value: value905 Key: 51938, Value: value1179 Key: 27362, Value: value1579 Key: 43749, Value: value791 Key: 2789, Value: value3025 Key: 76519, Value: value665 Key: 35558, Value: value4448 Key: 10986, Value: value858 Key: 92909, Value: value1770 Key: 68333, Value: value3586 Key: 35566, Value: value3081 Key: 10991, Value: value3125 Key: 27377, Value: value3609 Key: 68339, Value: value1157 Key: 84722, Value: value2298 Key: 51955, Value: value2668 Key: 35575, Value: value152 Key: 43767, Value: value3739 Key: 76534, Value: value3526 Key: 76538, Value: value3823 Key: 2816, Value: value4512 Key: 60162, Value: value4436 Key: 51971, Value: value4757 Key: 27397, Value: value4638 Key: 11014, Value: value4375 Key: 60169, Value: value4625 Key: 51978, Value: value4494 Key: 60171, Value: value43 Key: 19214, Value: value2538 Key: 92942, Value: value1294 Key: 92945, Value: value2637 Key: 35603, Value: value445 Key: 2835, Value: value3492 Key: 51987, Value: value4710 Key: 43799, Value: value1546 Key: 92952, Value: value2454 Key: 84760, Value: value4725 Key: 68380, Value: value258 Key: 27423, Value: value452 Key: 2847, Value: value1118 Key: 11039, Value: value2363 Key: 84766, Value: value3509 Key: 68382, Value: value3807 Key: 27424, Value: value700 Key: 60193, Value: value935 Key: 68386, Value: value2426 Key: 27428, Value: value3858 Key: 76583, Value: value3401 Key: 27432, Value: value3794 Key: 19241, Value: value1376 Key: 76584, Value: value4312 Key: 2859, Value: value3387 Key: 2864, Value: value1900 Key: 27440, Value: value1968 Key: 19249, Value: value2742 Key: 52020, Value: value4831 Key: 84788, Value: value3663 Key: 43829, Value: value3920 Key: 60213, Value: value4197 Key: 76599, Value: value4477 Key: 43833, Value: value933 Key: 84792, Value: value2630 Key: 92984, Value: value4502 Key: 52026, Value: value4259 Key: 68413, Value: value1474 Key: 43838, Value: value1777 Key: 84801, Value: value4050 Key: 2884, Value: value1587 Key: 27462, Value: value68 Key: 11079, Value: value1406 Key: 35657, Value: value3883 Key: 68427, Value: value1113 Key: 19278, Value: value3548 Key: 27471, Value: value2607 Key: 84818, Value: value2801 Key: 11091, Value: value3034 Key: 43860, Value: value27 Key: 43861, Value: value3619 Key: 76630, Value: value2950 Key: 43864, Value: value4342 Key: 11097, Value: value1385 Key: 27481, Value: value2325 Key: 84827, Value: value3805 Key: 52058, Value: value4281 Key: 93018, Value: value4081 Key: 60254, Value: value3940 Key: 93022, Value: value652 Key: 76640, Value: value4769 Key: 52067, Value: value830 Key: 60260, Value: value135 Key: 35685, Value: value4779 Key: 2919, Value: value2486 Key: 52072, Value: value4328 Key: 11112, Value: value4971 Key: 11114, Value: value1051 Key: 68459, Value: value1189 Key: 93034, Value: value2972 Key: 93037, Value: value2028 Key: 2925, Value: value4084 Key: 27501, Value: value4256 Key: 60270, Value: value4233 Key: 93043, Value: value2169 Key: 19326, Value: value97 Key: 2942, Value: value165 Key: 11134, Value: value4811 Key: 11135, Value: value512 Key: 60287, Value: value2265 Key: 35711, Value: value4723 Key: 19329, Value: value3483 Key: 76677, Value: value986 Key: 43911, Value: value3841 Key: 93064, Value: value3969 Key: 68490, Value: value1201 Key: 35723, Value: value3815 Key: 52108, Value: value4594 Key: 93070, Value: value2957 Key: 2960, Value: value2651 Key: 27536, Value: value4395 Key: 2962, Value: value4645 Key: 19350, Value: value4051 Key: 35735, Value: value588 Key: 2967, Value: value1093 Key: 2968, Value: value958 Key: 52123, Value: value4579 Key: 2972, Value: value2880 Key: 35741, Value: value1836 Key: 35742, Value: value544 Key: 19358, Value: value3799 Key: 60319, Value: value4943 Key: 52130, Value: value4383 Key: 35749, Value: value4685 Key: 84907, Value: value70 Key: 43949, Value: value584 Key: 52141, Value: value4207 Key: 2991, Value: value4717 Key: 19377, Value: value4092 Key: 68533, Value: value1987 Key: 84917, Value: value2414 Key: 19381, Value: value1895 Key: 60342, Value: value4478 Key: 76728, Value: value2074 Key: 93115, Value: value3701 Key: 11195, Value: value1597 Key: 35772, Value: value3830 Key: 27582, Value: value4390 Key: 3008, Value: value1284 Key: 68545, Value: value1689 Key: 93121, Value: value3115 Key: 19394, Value: value1813 Key: 11202, Value: value3539 Key: 35779, Value: value993 Key: 60356, Value: value1953 Key: 19397, Value: value691 Key: 43973, Value: value3975 Key: 68552, Value: value1163 Key: 3017, Value: value1342 Key: 35786, Value: value1352 Key: 84939, Value: value3662 Key: 52174, Value: value429 Key: 3026, Value: value636 Key: 43990, Value: value3449 Key: 93145, Value: value4063 Key: 19417, Value: value1149 Key: 3034, Value: value4109 Key: 19418, Value: value4389 Key: 35805, Value: value3542 Key: 76767, Value: value3516 Key: 60386, Value: value546 Key: 44002, Value: value2953 Key: 11234, Value: value4820 Key: 84962, Value: value287 Key: 11235, Value: value369 Key: 68578, Value: value1810 Key: 35812, Value: value592 Key: 84967, Value: value4940 Key: 19432, Value: value2766 Key: 3048, Value: value4454 Key: 84972, Value: value1944 Key: 11246, Value: value4605 Key: 76784, Value: value1973 Key: 52212, Value: value4279 Key: 35833, Value: value1101 Key: 93176, Value: value1162 Key: 27642, Value: value2553 Key: 19451, Value: value2870 Key: 52220, Value: value1762 Key: 68605, Value: value3336 Key: 68607, Value: value3398 Key: 11262, Value: value3477 Key: 60418, Value: value151 Key: 44035, Value: value4931 Key: 84996, Value: value3973 Key: 11271, Value: value2556 Key: 11274, Value: value1508 Key: 3084, Value: value899 Key: 76813, Value: value2315 Key: 44046, Value: value295 Key: 44048, Value: value2110 Key: 27664, Value: value1764 Key: 35856, Value: value1522 Key: 76817, Value: value2760 Key: 93200, Value: value1192 Key: 52241, Value: value2793 Key: 11282, Value: value4760 Key: 27667, Value: value2860 Key: 3093, Value: value2488 Key: 76825, Value: value3395 Key: 19480, Value: value4360 Key: 27674, Value: value4018 Key: 68634, Value: value1459 Key: 85018, Value: value1472 Key: 11295, Value: value3992 Key: 3103, Value: value4032 Key: 19491, Value: value61 Key: 3110, Value: value2655 Key: 44071, Value: value12 Key: 3111, Value: value3250 Key: 68648, Value: value705 Key: 11306, Value: value2440 Key: 93229, Value: value4636 Key: 3120, Value: value2665 Key: 44080, Value: value2867 Key: 11317, Value: value273 Key: 35893, Value: value1757 Key: 44085, Value: value4859 Key: 11322, Value: value3907 Key: 35899, Value: value2577 Key: 52286, Value: value871 Key: 35903, Value: value2311 Key: 35905, Value: value1258 Key: 68672, Value: value1753 Key: 27713, Value: value2811 Key: 60482, Value: value4432 Key: 85061, Value: value2520 Key: 27717, Value: value1340 Key: 93252, Value: value3334 Key: 85063, Value: value1444 Key: 11334, Value: value4178 Key: 52295, Value: value322 Key: 85069, Value: value4347 Key: 76876, Value: value1235 Key: 35918, Value: value2236 Key: 76883, Value: value4627 Key: 11347, Value: value50 Key: 60506, Value: value3675 Key: 85082, Value: value4569 Key: 11356, Value: value2768 Key: 35933, Value: value3901 Key: 11357, Value: value4768 Key: 85089, Value: value3397 Key: 60516, Value: value2672 Key: 3175, Value: value3185 Key: 76902, Value: value1536 Key: 3176, Value: value3257 Key: 35945, Value: value617 Key: 52329, Value: value2322 Key: 27753, Value: value4613 Key: 52330, Value: value58 Key: 27756, Value: value2032 Key: 44140, Value: value3844 Key: 93297, Value: value979 Key: 68723, Value: value996 Key: 52342, Value: value977 Key: 3190, Value: value4334 Key: 68729, Value: value2864 Key: 44154, Value: value2437 Key: 76925, Value: value3188 Key: 93309, Value: value4002 Key: 35965, Value: value908 Key: 3197, Value: value2418 Key: 52350, Value: value2109 Key: 76929, Value: value3944 Key: 52353, Value: value4788 Key: 44163, Value: value1905 Key: 68741, Value: value519 Key: 35982, Value: value2886 Key: 19602, Value: value3003 Key: 11412, Value: value1746 Key: 11413, Value: value3462 Key: 76950, Value: value4215 Key: 35992, Value: value144 Key: 93336, Value: value491 Key: 85146, Value: value1709 Key: 93341, Value: value3766 Key: 60574, Value: value1414 Key: 3231, Value: value1562 Key: 60577, Value: value1829 Key: 52386, Value: value2082 Key: 44201, Value: value536 Key: 60587, Value: value1706 Key: 3244, Value: value4314 Key: 11443, Value: value2316 Key: 52412, Value: value2390 Key: 27838, Value: value938 Key: 68799, Value: value3121 Key: 68801, Value: value2967 Key: 27842, Value: value3695 Key: 68805, Value: value698 Key: 52421, Value: value2253 Key: 36037, Value: value3441 Key: 11462, Value: value2559 Key: 19654, Value: value4176 Key: 76999, Value: value4372 Key: 52425, Value: value976 Key: 27854, Value: value2968 Key: 52430, Value: value3786 Key: 44241, Value: value3156 Key: 3283, Value: value4034 Key: 60628, Value: value270 Key: 3284, Value: value2056 Key: 44245, Value: value3229 Key: 77014, Value: value2704 Key: 3289, Value: value3219 Key: 36061, Value: value4247 Key: 85216, Value: value836 Key: 68834, Value: value4821 Key: 93412, Value: value4056 Key: 77031, Value: value656 Key: 85222, Value: value3750 Key: 93417, Value: value3596 Key: 93419, Value: value800 Key: 11498, Value: value3333 Key: 77034, Value: value1763 Key: 60655, Value: value158 Key: 27890, Value: value435 Key: 11506, Value: value1615 Key: 27892, Value: value843 Key: 36084, Value: value4087 Key: 85239, Value: value2735 Key: 27895, Value: value2431 Key: 36088, Value: value4659 Key: 52474, Value: value1935 Key: 11515, Value: value1318 Key: 19716, Value: value3053 Key: 36105, Value: value302 Key: 52489, Value: value4508 Key: 77067, Value: value2142 Key: 60685, Value: value2598 Key: 85260, Value: value4721 Key: 52495, Value: value1415 Key: 52497, Value: value9 Key: 27921, Value: value559 Key: 77072, Value: value3331 Key: 60692, Value: value282 Key: 68884, Value: value2127 Key: 3351, Value: value3585 Key: 44312, Value: value54 Key: 36120, Value: value2500 Key: 27930, Value: value2843 Key: 85275, Value: value3853 Key: 36123, Value: value708 Key: 52507, Value: value960 Key: 68890, Value: value2281 Key: 27931, Value: value2510 Key: 68894, Value: value267 Key: 11552, Value: value4008 Key: 52513, Value: value4739 Key: 27939, Value: value1670 Key: 68901, Value: value1166 Key: 3364, Value: value4091 Key: 36135, Value: value2222 Key: 85289, Value: value1980 Key: 19756, Value: value75 Key: 27957, Value: value4430 Key: 19769, Value: value1717 Key: 85304, Value: value2829 Key: 77117, Value: value3554 Key: 3390, Value: value2234 Key: 3393, Value: value4746 Key: 27970, Value: value4918 Key: 93506, Value: value1736 Key: 36165, Value: value3002 Key: 44365, Value: value2857 Key: 93521, Value: value2182 Key: 68944, Value: value937 Key: 44369, Value: value4286 Key: 85333, Value: value2905 Key: 19801, Value: value3352 Key: 11610, Value: value57 Key: 3419, Value: value1421 Key: 27995, Value: value3433 Key: 93535, Value: value426 Key: 36190, Value: value1438 Key: 52575, Value: value103 Key: 52576, Value: value1984 Key: 85345, Value: value3747 Key: 36194, Value: value771 Key: 60776, Value: value199 Key: 3434, Value: value3344 Key: 68970, Value: value18 Key: 60779, Value: value539 Key: 44398, Value: value93 Key: 68975, Value: value3218 Key: 11633, Value: value2906 Key: 28017, Value: value4689 Key: 11635, Value: value85 Key: 93556, Value: value2976 Key: 28023, Value: value3438 Key: 44407, Value: value4913 Key: 93561, Value: value2421 Key: 11644, Value: value4981 Key: 36227, Value: value4123 Key: 93573, Value: value1139 Key: 11655, Value: value324 Key: 36232, Value: value4340 Key: 28040, Value: value4407 Key: 28041, Value: value903 Key: 44425, Value: value3213 Key: 3467, Value: value1150 Key: 93578, Value: value2878 Key: 44428, Value: value3508 Key: 3469, Value: value2203 Key: 19853, Value: value3989 Key: 77199, Value: value4143 Key: 36248, Value: value2368 Key: 69016, Value: value4915 Key: 36256, Value: value1583 Key: 19873, Value: value3062 Key: 3490, Value: value527 Key: 36262, Value: value4074 Key: 11689, Value: value3100 Key: 19885, Value: value4320 Key: 3505, Value: value4549 Key: 28086, Value: value4804 Key: 85430, Value: value2026 Key: 19895, Value: value3041 Key: 36279, Value: value3430 Key: 28089, Value: value3620 Key: 28093, Value: value2446 Key: 36287, Value: value2333 Key: 85438, Value: value3781 Key: 19905, Value: value1482 Key: 69063, Value: value3065 Key: 69062, Value: value972 Key: 93638, Value: value3084 Key: 44487, Value: value3287 Key: 19911, Value: value3504 Key: 60877, Value: value865 Key: 69071, Value: value4005 Key: 77262, Value: value488 Key: 36306, Value: value1718 Key: 60882, Value: value3124 Key: 52690, Value: value4530 Key: 69075, Value: value4941 Key: 44500, Value: value4593 Key: 3541, Value: value4974 Key: 36312, Value: value974 Key: 3548, Value: value356 Key: 60895, Value: value915 Key: 85473, Value: value3267 Key: 93667, Value: value2035 Key: 44517, Value: value4431 Key: 69092, Value: value4781 Key: 28134, Value: value628 Key: 93672, Value: value563 Key: 60905, Value: value1069 Key: 77288, Value: value3660 Key: 69099, Value: value3209 Key: 3567, Value: value3946 Key: 60911, Value: value4770 Key: 69105, Value: value2858 Key: 3569, Value: value4822 Key: 3571, Value: value1520 Key: 93682, Value: value2599 Key: 36340, Value: value1559 Key: 19960, Value: value877 Key: 93689, Value: value1203 Key: 69112, Value: value300 Key: 69117, Value: value2900 Key: 60924, Value: value3321 Key: 28156, Value: value4765 Key: 60925, Value: value4357 Key: 28162, Value: value4263 Key: 93701, Value: value3063 Key: 3590, Value: value1424 Key: 85511, Value: value4157 Key: 36359, Value: value1806 Key: 69128, Value: value2621 Key: 19978, Value: value1241 Key: 52747, Value: value557 Key: 44555, Value: value1172 Key: 28171, Value: value3203 Key: 3596, Value: value885 Key: 28174, Value: value1789 Key: 28175, Value: value4173 Key: 85520, Value: value4459 Key: 85523, Value: value1797 Key: 60950, Value: value2216 Key: 44571, Value: value1768 Key: 60955, Value: value2029 Key: 93724, Value: value3659 Key: 11806, Value: value2638 Key: 19998, Value: value3954 Key: 20000, Value: value2876 Key: 36386, Value: value1075 Key: 52771, Value: value2482 Key: 3625, Value: value4313 Key: 93738, Value: value2355 Key: 52783, Value: value2129 Key: 28207, Value: value3529 Key: 3632, Value: value2868 Key: 3635, Value: value319 Key: 60980, Value: value4777 Key: 93751, Value: value1092 Key: 3640, Value: value439 Key: 60986, Value: value4835 Key: 20027, Value: value661 Key: 93757, Value: value325 Key: 20028, Value: value366 Key: 28221, Value: value4 Key: 11837, Value: value1533 Key: 69180, Value: value4047 Key: 93759, Value: value1243 Key: 44607, Value: value2404 Key: 11839, Value: value3221 Key: 77377, Value: value1555 Key: 93763, Value: value213 Key: 60994, Value: value4302 Key: 69186, Value: value1008 Key: 20035, Value: value2591 Key: 60996, Value: value855 Key: 44613, Value: value2944 Key: 69190, Value: value4577 Key: 77385, Value: value4200 Key: 44617, Value: value1700 Key: 61003, Value: value4714 Key: 28237, Value: value373 Key: 93772, Value: value2744 Key: 69196, Value: value3161 Key: 77391, Value: value1462 Key: 77390, Value: value3730 Key: 93782, Value: value590 Key: 36440, Value: value699 Key: 20056, Value: value1846 Key: 28251, Value: value32 Key: 61021, Value: value2209 Key: 61023, Value: value108 Key: 20065, Value: value4669 Key: 44644, Value: value333 Key: 44646, Value: value1851 Key: 3690, Value: value3754 Key: 3693, Value: value3798 Key: 52846, Value: value1549 Key: 61039, Value: value2338 Key: 3706, Value: value1353 Key: 52859, Value: value1214 Key: 36476, Value: value2628 Key: 28285, Value: value1003 Key: 77436, Value: value3576 Key: 77439, Value: value2525 Key: 20097, Value: value204 Key: 11905, Value: value2061 Key: 61057, Value: value3895 Key: 85635, Value: value2882 Key: 93827, Value: value4069 Key: 52867, Value: value4984 Key: 61061, Value: value1058 Key: 69255, Value: value4884 Key: 44681, Value: value1553 Key: 85645, Value: value697 Key: 20109, Value: value4465 Key: 11920, Value: value677 Key: 3728, Value: value3366 Key: 20113, Value: value4252 Key: 52883, Value: value955 Key: 69266, Value: value1960 Key: 28307, Value: value4550 Key: 20116, Value: value3929 Key: 3734, Value: value1429 Key: 20121, Value: value1485 Key: 93848, Value: value1872 Key: 44698, Value: value4251 Key: 52891, Value: value1480 Key: 85658, Value: value1773 Key: 44700, Value: value1849 Key: 61085, Value: value3343 Key: 85663, Value: value3915 Key: 61088, Value: value1470 Key: 85665, Value: value1774 Key: 28320, Value: value4079 Key: 3746, Value: value4644 Key: 93861, Value: value153 Key: 52900, Value: value1823 Key: 44709, Value: value3888 Key: 52902, Value: value3753 Key: 52906, Value: value4085 Key: 93870, Value: value2290 Key: 28337, Value: value187 Key: 36532, Value: value337 Key: 20150, Value: value1638 Key: 69303, Value: value2949 Key: 36536, Value: value4914 Key: 44731, Value: value1636 Key: 3771, Value: value4882 Key: 44732, Value: value2856 Key: 61116, Value: value3650 Key: 3773, Value: value2509 Key: 28349, Value: value4976 Key: 85694, Value: value4703 Key: 44737, Value: value4513 Key: 11970, Value: value1862 Key: 3787, Value: value2344 Key: 3790, Value: value1932 Key: 28366, Value: value3683 Key: 44754, Value: value1958 Key: 3796, Value: value4487 Key: 85718, Value: value1653 Key: 3800, Value: value4156 Key: 36570, Value: value2464 Key: 61147, Value: value4283 Key: 11995, Value: value4421 Key: 20188, Value: value1158 Key: 11997, Value: value4639 Key: 36575, Value: value2548 Key: 20193, Value: value4298 Key: 52963, Value: value2267 Key: 3811, Value: value4089 Key: 61159, Value: value556 Key: 20199, Value: value4150 Key: 77549, Value: value1226 Key: 93935, Value: value4851 Key: 3823, Value: value1218 Key: 12015, Value: value3446 Key: 61168, Value: value1441 Key: 44784, Value: value3979 Key: 20209, Value: value1940 Key: 12020, Value: value621 Key: 28404, Value: value1195 Key: 44788, Value: value4849 Key: 36600, Value: value4813 Key: 77563, Value: value1749 Key: 12027, Value: value3248 Key: 52988, Value: value3826 Key: 77564, Value: value451 Key: 28413, Value: value4585 Key: 44798, Value: value376 Key: 20222, Value: value4927 Key: 93950, Value: value755 Key: 61183, Value: value2570 Key: 12031, Value: value4562 Key: 69376, Value: value2173 Key: 61186, Value: value307 Key: 69379, Value: value3896 Key: 61188, Value: value4751 Key: 77575, Value: value963 Key: 36615, Value: value1325 Key: 36616, Value: value1361 Key: 61195, Value: value2181 Key: 36621, Value: value2748 Key: 77585, Value: value3877 Key: 12050, Value: value4982 Key: 12051, Value: value3691 Key: 85785, Value: value4097 Key: 3864, Value: value4692 Key: 36634, Value: value2183 Key: 61211, Value: value1275 Key: 85786, Value: value2184 Key: 36636, Value: value1788 Key: 28445, Value: value4793 Key: 77600, Value: value992 Key: 85796, Value: value1347 Key: 3878, Value: value1010 Key: 53038, Value: value3852 Key: 94001, Value: value842 Key: 77617, Value: value3300 Key: 69426, Value: value4244 Key: 12084, Value: value3878 Key: 77620, Value: value1082 Key: 44853, Value: value3368 Key: 77624, Value: value3980 Key: 36666, Value: value3123 Key: 28474, Value: value3906 Key: 3900, Value: value4365 Key: 36669, Value: value3265 Key: 53053, Value: value3450 Key: 53055, Value: value3036 Key: 3904, Value: value182 Key: 28481, Value: value3731 Key: 3908, Value: value4575 Key: 12103, Value: value3589 Key: 3914, Value: value4288 Key: 28491, Value: value2626 Key: 53068, Value: value1151 Key: 85836, Value: value3258 Key: 36685, Value: value3536 Key: 69452, Value: value3595 Key: 61262, Value: value554 Key: 12111, Value: value599 Key: 36688, Value: value4903 Key: 61264, Value: value4904 Key: 69459, Value: value3583 Key: 36691, Value: value3268 Key: 44884, Value: value1848 Key: 85845, Value: value4376 Key: 28501, Value: value2879 Key: 61270, Value: value921 Key: 85851, Value: value2429 Key: 44890, Value: value3968 Key: 44891, Value: value2146 Key: 85850, Value: value4489 Key: 12125, Value: value2623 Key: 36701, Value: value3865 Key: 20318, Value: value4457 Key: 12127, Value: value583 Key: 36706, Value: value854 Key: 94050, Value: value2196 Key: 69474, Value: value3046 Key: 44899, Value: value4428 Key: 94063, Value: value2530 Key: 69486, Value: value197 Key: 3953, Value: value3210 Key: 85875, Value: value2927 Key: 12147, Value: value3015 Key: 69496, Value: value4330 Key: 77691, Value: value3822 Key: 94075, Value: value4042 Key: 53114, Value: value4193 Key: 20347, Value: value1072 Key: 20348, Value: value1881 Key: 36735, Value: value1267 Key: 3967, Value: value2275 Key: 85889, Value: value1694 Key: 69507, Value: value2157 Key: 3972, Value: value1619 Key: 36741, Value: value927 Key: 3973, Value: value1281 Key: 44933, Value: value2749 Key: 12170, Value: value493 Key: 36753, Value: value612 Key: 69523, Value: value4304 Key: 44947, Value: value4534 Key: 12181, Value: value3733 Key: 28566, Value: value1460 Key: 77718, Value: value3924 Key: 85916, Value: value1437 Key: 44958, Value: value4894 Key: 12191, Value: value3776 Key: 12192, Value: value4181 Key: 77731, Value: value3299 Key: 36771, Value: value1567 Key: 94117, Value: value403 Key: 4004, Value: value1490 Key: 28580, Value: value2289 Key: 69541, Value: value4435 Key: 4005, Value: value715 Key: 94119, Value: value1767 Key: 77736, Value: value2526 Key: 85928, Value: value3354 Key: 61355, Value: value1938 Key: 85932, Value: value4792 Key: 94127, Value: value142 Key: 85935, Value: value3752 Key: 20400, Value: value3038 Key: 77746, Value: value514 Key: 44979, Value: value2256 Key: 36787, Value: value4715 Key: 12212, Value: value1102 Key: 53179, Value: value1141 Key: 28603, Value: value2600 Key: 36797, Value: value746 Key: 61375, Value: value2887 Key: 28609, Value: value1264 Key: 4035, Value: value2987 Key: 12229, Value: value1635 Key: 61381, Value: value3791 Key: 12234, Value: value1939 Key: 77773, Value: value676 Key: 69580, Value: value1690 Key: 12237, Value: value4623 Key: 61390, Value: value4654 Key: 69582, Value: value3854 Key: 94161, Value: value3466 Key: 53202, Value: value4498 Key: 36819, Value: value2245 Key: 20436, Value: value3226 Key: 45012, Value: value3467 Key: 12245, Value: value4538 Key: 12246, Value: value4521 Key: 61399, Value: value33 Key: 69593, Value: value4088 Key: 85981, Value: value4854 Key: 45023, Value: value3535 Key: 94174, Value: value4994 Key: 45025, Value: value20 Key: 94182, Value: value4657 Key: 20456, Value: value1780 Key: 77802, Value: value1769 Key: 69613, Value: value3845 Key: 36845, Value: value4523 Key: 12274, Value: value4628 Key: 86002, Value: value2535 Key: 77810, Value: value3611 Key: 4085, Value: value3028 Key: 20469, Value: value4992 Key: 61432, Value: value2891 Key: 45049, Value: value2094 Key: 28667, Value: value232 Key: 53244, Value: value3601 Key: 94204, Value: value44 Key: 69631, Value: value4203 Key: 45056, Value: value30 Key: 94209, Value: value2709 Key: 53250, Value: value2565 Key: 69636, Value: value754 Key: 94212, Value: value4906 Key: 4105, Value: value3945 Key: 28683, Value: value3577 Key: 20491, Value: value4565 Key: 77837, Value: value1346 Key: 36876, Value: value1843 Key: 86029, Value: value4817 Key: 94220, Value: value3558 Key: 4112, Value: value177 Key: 94227, Value: value4563 Key: 36886, Value: value533 Key: 20504, Value: value2800 Key: 45080, Value: value3140 Key: 45081, Value: value731 Key: 69659, Value: value190 Key: 36896, Value: value4748 Key: 36901, Value: value1033 Key: 77860, Value: value2481 Key: 20518, Value: value3142 Key: 45095, Value: value265 Key: 28712, Value: value4863 Key: 61481, Value: value3913 Key: 53292, Value: value1023 Key: 36910, Value: value856 Key: 53296, Value: value4172 Key: 53297, Value: value4206 Key: 4145, Value: value4381 Key: 77875, Value: value1111 Key: 4146, Value: value3367 Key: 36916, Value: value1377 Key: 36917, Value: value461 Key: 4149, Value: value1238 Key: 69689, Value: value658 Key: 69693, Value: value1031 Key: 53308, Value: value1602 Key: 28740, Value: value1302 Key: 86084, Value: value719 Key: 12357, Value: value1329 Key: 94278, Value: value1373 Key: 77897, Value: value892 Key: 28744, Value: value4516 Key: 12361, Value: value2784 Key: 86090, Value: value377 Key: 61519, Value: value1130 Key: 4177, Value: value2990 Key: 77908, Value: value936 Key: 77910, Value: value2149 Key: 53336, Value: value3169 Key: 53337, Value: value3480 Key: 28762, Value: value2909 Key: 36955, Value: value2101 Key: 12379, Value: value3553 Key: 4188, Value: value2380 Key: 45152, Value: value2389 Key: 61540, Value: value4877 Key: 12394, Value: value4121 Key: 45163, Value: value848 Key: 28780, Value: value3070 Key: 4206, Value: value257 Key: 20592, Value: value2946 Key: 77941, Value: value1967 Key: 20596, Value: value3592 Key: 12405, Value: value2948 Key: 36982, Value: value1468 Key: 45176, Value: value4099 Key: 69752, Value: value107 Key: 12413, Value: value269 Key: 20605, Value: value1380 Key: 20608, Value: value3296 Key: 94337, Value: value3638 Key: 4229, Value: value1729 Key: 61577, Value: value2317 Key: 4235, Value: value4496 Key: 28812, Value: value215 Key: 4236, Value: value2139 Key: 61580, Value: value2383 Key: 37005, Value: value3215 Key: 77966, Value: value3939 Key: 86161, Value: value3930 Key: 20625, Value: value2361 Key: 4252, Value: value2692 Key: 69791, Value: value4471 Key: 53410, Value: value2676 Key: 53411, Value: value4979 Key: 86181, Value: value4786 Key: 77991, Value: value4885 Key: 69801, Value: value82 Key: 61609, Value: value750 Key: 37033, Value: value3616 Key: 77996, Value: value1759 Key: 12461, Value: value2650 Key: 77999, Value: value603 Key: 78001, Value: value2741 Key: 28849, Value: value1368 Key: 61620, Value: value1044 Key: 37044, Value: value3735 Key: 4276, Value: value4187 Key: 28854, Value: value3269 Key: 4281, Value: value3131 Key: 45241, Value: value4573 Key: 45244, Value: value4278 Key: 37054, Value: value511 Key: 37056, Value: value2465 Key: 4291, Value: value3519 Key: 94402, Value: value3657 Key: 28868, Value: value2220 Key: 53449, Value: value3520 Key: 94408, Value: value3778 Key: 61642, Value: value251 Key: 20685, Value: value839 Key: 53454, Value: value1013 Key: 4303, Value: value3991 Key: 94417, Value: value1816 Key: 28881, Value: value777 Key: 61652, Value: value4797 Key: 53462, Value: value212 Key: 12503, Value: value4953 Key: 78043, Value: value537 Key: 28890, Value: value1519 Key: 86235, Value: value1604 Key: 12507, Value: value3458 Key: 86234, Value: value3658 Key: 61661, Value: value2722 Key: 78046, Value: value271 Key: 86238, Value: value1440 Key: 20704, Value: value2952 Key: 61667, Value: value1821 Key: 4323, Value: value3528 Key: 78053, Value: value1743 Key: 28904, Value: value4253 Key: 78056, Value: value2764 Key: 78058, Value: value40 Key: 61677, Value: value4759 Key: 37102, Value: value3246 Key: 53490, Value: value3700 Key: 12531, Value: value2353 Key: 94453, Value: value3513 Key: 37110, Value: value4857 Key: 4343, Value: value320 Key: 4344, Value: value640 Key: 69881, Value: value4964 Key: 61690, Value: value96 Key: 20730, Value: value4795 Key: 37118, Value: value1297 Key: 4351, Value: value1834 Key: 45312, Value: value3560 Key: 69888, Value: value3709 Key: 4355, Value: value802 Key: 45318, Value: value1043 Key: 69895, Value: value1772 Key: 94475, Value: value895 Key: 4363, Value: value2961 Key: 12555, Value: value3415 Key: 28941, Value: value4728 Key: 53522, Value: value914 Key: 86290, Value: value454 Key: 78101, Value: value606 Key: 20757, Value: value2963 Key: 4375, Value: value1633 Key: 45335, Value: value2758 Key: 53531, Value: value1783 Key: 94492, Value: value3898 Key: 20771, Value: value3304 Key: 12582, Value: value4447 Key: 94502, Value: value4379 Key: 12587, Value: value4995 Key: 12591, Value: value2514 Key: 12593, Value: value3694 Key: 20785, Value: value4619 Key: 20786, Value: value4218 Key: 78130, Value: value2885 Key: 61750, Value: value3831 Key: 53564, Value: value957 Key: 12605, Value: value945 Key: 20797, Value: value1977 Key: 12608, Value: value2839 Key: 94528, Value: value1710 Key: 78149, Value: value2172 Key: 20808, Value: value74 Key: 94547, Value: value1582 Key: 61778, Value: value3369 Key: 45394, Value: value4083 Key: 20819, Value: value2818 Key: 53589, Value: value1447 Key: 4438, Value: value3763 Key: 69975, Value: value4812 Key: 29016, Value: value155 Key: 94555, Value: value663 Key: 4442, Value: value1720 Key: 37211, Value: value3150 Key: 20827, Value: value4855 Key: 45404, Value: value891 Key: 86364, Value: value1692 Key: 29021, Value: value4600 Key: 37214, Value: value1957 Key: 45408, Value: value2920 Key: 29024, Value: value3039 Key: 4451, Value: value2044 Key: 12643, Value: value3873 Key: 37223, Value: value1272 Key: 12647, Value: value4266 Key: 78184, Value: value2134 Key: 78187, Value: value2771 Key: 29035, Value: value1215 Key: 69994, Value: value2662 Key: 69999, Value: value150 Key: 37233, Value: value2242 Key: 53617, Value: value3847 Key: 70000, Value: value4241 Key: 70002, Value: value1216 Key: 20851, Value: value1334 Key: 45427, Value: value4261 Key: 53622, Value: value3833 Key: 70007, Value: value4652 Key: 29050, Value: value625 Key: 53626, Value: value3290 Key: 94589, Value: value2679 Key: 20860, Value: value3232 Key: 4476, Value: value4819 Key: 94588, Value: value1120 Key: 20861, Value: value3615 Key: 94591, Value: value4268 Key: 78206, Value: value472 Key: 94590, Value: value3610 Key: 86400, Value: value2050 Key: 45442, Value: value4515 Key: 29062, Value: value134 Key: 70023, Value: value4291 Key: 29070, Value: value948 Key: 61839, Value: value2640 Key: 12688, Value: value3875 Key: 12690, Value: value4095 Key: 20882, Value: value4458 Key: 70035, Value: value4664 Key: 53654, Value: value3884 Key: 45463, Value: value3522 Key: 86425, Value: value3816 Key: 29083, Value: value930 Key: 12699, Value: value2809 Key: 12701, Value: value3273 Key: 20894, Value: value2365 Key: 4513, Value: value2732 Key: 29089, Value: value3678 Key: 12710, Value: value3790 Key: 45480, Value: value2588 Key: 53673, Value: value4696 Key: 61867, Value: value164 Key: 45488, Value: value2761 Key: 86448, Value: value4296 Key: 45491, Value: value1386 Key: 86450, Value: value4102 Key: 37300, Value: value4470 Key: 45494, Value: value355 Key: 4540, Value: value2347 Key: 12732, Value: value3282 Key: 61884, Value: value4713 Key: 61886, Value: value1568 Key: 12735, Value: value926 Key: 53698, Value: value4554 Key: 94661, Value: value611 Key: 4549, Value: value3897 Key: 4554, Value: value4666 Key: 86477, Value: value1160 Key: 20940, Value: value2312 Key: 53712, Value: value231 Key: 86480, Value: value3083 Key: 94672, Value: value3103 Key: 20950, Value: value3286 Key: 94682, Value: value1955 Key: 86490, Value: value3394 Key: 78300, Value: value4580 Key: 45536, Value: value4475 Key: 4577, Value: value4704 Key: 37346, Value: value84 Key: 53730, Value: value3322 Key: 45538, Value: value4832 Key: 12771, Value: value3780 Key: 53732, Value: value3726 Key: 94695, Value: value2770 Key: 4586, Value: value203 Key: 45547, Value: value3404 Key: 12780, Value: value4214 Key: 61934, Value: value1263 Key: 12786, Value: value4871 Key: 20982, Value: value4661 Key: 61943, Value: value4686 Key: 12793, Value: value2043 Key: 94715, Value: value4987 Key: 20987, Value: value4190 Key: 78332, Value: value1833 Key: 94720, Value: value1422 Key: 20994, Value: value1548 Key: 78342, Value: value1254 Key: 61961, Value: value2505 Key: 86536, Value: value2955 Key: 4618, Value: value1056 Key: 37387, Value: value784 Key: 4619, Value: value3031 Key: 29197, Value: value480 Key: 21005, Value: value3835 Key: 12817, Value: value582 Key: 45586, Value: value1020 Key: 70165, Value: value3612 Key: 94743, Value: value608 Key: 86553, Value: value4462 Key: 94746, Value: value1475 Key: 12827, Value: value3066 Key: 86557, Value: value4324 Key: 78364, Value: value1122 Key: 12830, Value: value3670 Key: 53790, Value: value4141 Key: 4640, Value: value1427 Key: 29217, Value: value160 Key: 86560, Value: value3549 Key: 45603, Value: value1989 Key: 53796, Value: value4876 Key: 61989, Value: value4691 Key: 45607, Value: value4322 Key: 45608, Value: value3756 Key: 61992, Value: value3813 Key: 45614, Value: value1191 Key: 70190, Value: value3335 Key: 4656, Value: value4899 Key: 45617, Value: value1814 Key: 37425, Value: value2884 Key: 12855, Value: value1374 Key: 45624, Value: value4401 Key: 86584, Value: value1778 Key: 4666, Value: value1949 Key: 53819, Value: value3637 Key: 29248, Value: value900 Key: 37441, Value: value1804 Key: 4673, Value: value1898 Key: 94784, Value: value3444 Key: 53829, Value: value2739 Key: 29253, Value: value3744 Key: 78407, Value: value3178 Key: 12872, Value: value2851 Key: 4681, Value: value1229 Key: 78408, Value: value2960 Key: 62026, Value: value849 Key: 4684, Value: value3600 Key: 37452, Value: value3364 Key: 37459, Value: value283 Key: 4691, Value: value293 Key: 53844, Value: value3587 Key: 12890, Value: value580 Key: 37467, Value: value3092 Key: 70237, Value: value1801 Key: 62045, Value: value2144 Key: 4701, Value: value4129 Key: 86620, Value: value4771 Key: 45662, Value: value1094 Key: 12895, Value: value783 Key: 70238, Value: value985 Key: 21088, Value: value1345 Key: 78435, Value: value631 Key: 62052, Value: value1053 Key: 37483, Value: value2943 Key: 70252, Value: value2871 Key: 53870, Value: value386 Key: 78448, Value: value2569 Key: 70256, Value: value4860 Key: 4722, Value: value531 Key: 86643, Value: value4438 Key: 29301, Value: value4364 Key: 4727, Value: value3099 Key: 12919, Value: value3309 Key: 70264, Value: value1370 Key: 78458, Value: value1413 Key: 78463, Value: value128 Key: 45694, Value: value2639 Key: 70271, Value: value4651 Key: 70270, Value: value2490 Key: 94846, Value: value2652 Key: 62079, Value: value3459 Key: 94850, Value: value83 Key: 94854, Value: value1999 Key: 45705, Value: value2775 Key: 4746, Value: value616 Key: 37514, Value: value4004 Key: 45707, Value: value547 Key: 29324, Value: value3280 Key: 70289, Value: value4754 Key: 53906, Value: value1478 Key: 45716, Value: value1874 Key: 70292, Value: value1248 Key: 78487, Value: value1222 Key: 37526, Value: value3874 Key: 94873, Value: value4036 Key: 4763, Value: value1677 Key: 70301, Value: value684 Key: 86687, Value: value2008 Key: 37534, Value: value2478 Key: 45728, Value: value284 Key: 70304, Value: value3082 Key: 4770, Value: value3061 Key: 94882, Value: value3327 Key: 45732, Value: value4437 Key: 70310, Value: value1137 Key: 53927, Value: value3972 Key: 21163, Value: value2398 Key: 37548, Value: value4962 Key: 78510, Value: value2136 Key: 53937, Value: value3345 Key: 45745, Value: value3689 Key: 70325, Value: value2568 Key: 86708, Value: value1349 Key: 21173, Value: value3107 Key: 21174, Value: value953 Key: 45754, Value: value737 Key: 12986, Value: value4517 Key: 86717, Value: value4675 Key: 86719, Value: value1100 Key: 78527, Value: value4022 Key: 29380, Value: value156 Key: 70342, Value: value4507 Key: 70347, Value: value2373 Key: 53965, Value: value3088 Key: 53966, Value: value548 Key: 70350, Value: value1612 Key: 29392, Value: value2997 Key: 29393, Value: value1231 Key: 37587, Value: value1397 Key: 37592, Value: value482 Key: 13018, Value: value1888 Key: 21211, Value: value138 Key: 94938, Value: value174 Key: 37595, Value: value2712 Key: 21212, Value: value4387 Key: 78561, Value: value2537 Key: 94945, Value: value4559 Key: 45793, Value: value722 Key: 94946, Value: value2993 Key: 53990, Value: value4893 Key: 4842, Value: value1682 Key: 45811, Value: value1409 Key: 54003, Value: value1824 Key: 37620, Value: value2831 Key: 21237, Value: value2041 Key: 70390, Value: value2262 Key: 37624, Value: value3420 Key: 86777, Value: value4687 Key: 21241, Value: value2372 Key: 78587, Value: value2385 Key: 86779, Value: value3469 Key: 94973, Value: value2269 Key: 37630, Value: value3418 Key: 86784, Value: value4119 Key: 13058, Value: value4539 Key: 54019, Value: value2391 Key: 78597, Value: value4763 Key: 37637, Value: value2292 Key: 13062, Value: value4814 Key: 86793, Value: value4297 Key: 4873, Value: value3147 Key: 78604, Value: value1621 Key: 86799, Value: value3180 Key: 13070, Value: value4838 Key: 86800, Value: value3174 Key: 54034, Value: value2664 Key: 54036, Value: value1552 Key: 29460, Value: value4232 Key: 54037, Value: value4533 Key: 29463, Value: value1354 Key: 45848, Value: value2924 Key: 37659, Value: value1530 Key: 29467, Value: value3500 Key: 4892, Value: value105 Key: 45854, Value: value230 Key: 13087, Value: value3547 Key: 37664, Value: value352 Key: 78629, Value: value4836 Key: 78628, Value: value2977 Key: 13095, Value: value3197 Key: 21289, Value: value686 Key: 86826, Value: value4473 Key: 13100, Value: value218 Key: 21294, Value: value2371 Key: 86830, Value: value1240 Key: 95024, Value: value1870 Key: 70451, Value: value4169 Key: 37683, Value: value1015 Key: 45879, Value: value2936 Key: 62264, Value: value446 Key: 70460, Value: value2407 Key: 86844, Value: value2969 Key: 78652, Value: value4841 Key: 70465, Value: value3643 Key: 45889, Value: value4642 Key: 70467, Value: value4499 Key: 86853, Value: value104 Key: 95046, Value: value1751 Key: 21320, Value: value3086 Key: 86862, Value: value2088 Key: 54096, Value: value2899 Key: 37712, Value: value4929 Key: 86867, Value: value2717 Key: 45908, Value: value1433 Key: 86868, Value: value983 Key: 54101, Value: value3953 Key: 29526, Value: value2750 Key: 54106, Value: value4235 Key: 21339, Value: value3170 Key: 13149, Value: value796 Key: 54109, Value: value4131 Key: 21345, Value: value721 Key: 86883, Value: value2822 Key: 78691, Value: value4806 Key: 37735, Value: value2865 Key: 78694, Value: value4989 Key: 45929, Value: value3392 Key: 70510, Value: value1055 Key: 45936, Value: value64 Key: 86896, Value: value1593 Key: 21363, Value: value3578 Key: 4981, Value: value131 Key: 29559, Value: value145 Key: 37751, Value: value704 Key: 54136, Value: value4919 Key: 86908, Value: value4137 Key: 45952, Value: value1890 Key: 37761, Value: value1198 Key: 95108, Value: value4809 Key: 54151, Value: value121 Key: 45960, Value: value2893 Key: 5000, Value: value3004 Key: 70537, Value: value4152 Key: 70536, Value: value2506 Key: 29578, Value: value2780 Key: 45962, Value: value3104 Key: 45963, Value: value4612 Key: 13196, Value: value2918 Key: 86925, Value: value3129 Key: 5005, Value: value4353 Key: 62351, Value: value2873 Key: 5010, Value: value1430 Key: 86931, Value: value2444 Key: 62355, Value: value3993 Key: 78740, Value: value2078 Key: 62358, Value: value3588 Key: 37783, Value: value3302 Key: 95128, Value: value4028 Key: 5019, Value: value29 Key: 13213, Value: value1364 Key: 95132, Value: value4969 Key: 13216, Value: value896 Key: 62370, Value: value3114 Key: 45988, Value: value1524 Key: 86948, Value: value1298 Key: 54181, Value: value4133 Key: 29606, Value: value2302 Key: 21416, Value: value3130 Key: 37801, Value: value1576 Key: 45994, Value: value2423 Key: 54186, Value: value3966 Key: 29614, Value: value776 Key: 54193, Value: value1285 Key: 5041, Value: value3151 Key: 13236, Value: value1651 Key: 78775, Value: value1463 Key: 21430, Value: value3478 Key: 70582, Value: value129 Key: 70584, Value: value4321 Key: 37819, Value: value1902 Key: 62398, Value: value2240 Key: 5062, Value: value508 Key: 78791, Value: value3097 Key: 62409, Value: value720 Key: 54224, Value: value2254 Key: 21458, Value: value4402 Key: 13267, Value: value3315 Key: 86994, Value: value3453 Key: 29656, Value: value3111 Key: 29659, Value: value1175 Key: 21468, Value: value4800 Key: 95196, Value: value2546 Key: 62429, Value: value4852 Key: 78814, Value: value332 Key: 29663, Value: value1796 Key: 21473, Value: value2846 Key: 46049, Value: value4249 Key: 95203, Value: value3051 Key: 70626, Value: value1805 Key: 87013, Value: value1839 Key: 5099, Value: value1566 Key: 78831, Value: value1917 Key: 5103, Value: value4531 Key: 37875, Value: value2319 Key: 95225, Value: value1613 Key: 13305, Value: value427 Key: 29692, Value: value4702 Key: 95232, Value: value525 Key: 95235, Value: value2845 Key: 5123, Value: value3978 Key: 21509, Value: value1471 Key: 46085, Value: value4070 Key: 95240, Value: value1106 Key: 95251, Value: value4423 Key: 70674, Value: value4505 Key: 95253, Value: value4213 Key: 5145, Value: value3598 Key: 5146, Value: value2178 Key: 5150, Value: value824 Key: 87073, Value: value3532 Key: 78883, Value: value1037 Key: 62500, Value: value929 Key: 78884, Value: value3451 Key: 37929, Value: value3456 Key: 95275, Value: value3423 Key: 95274, Value: value1971 Key: 87085, Value: value2688 Key: 37940, Value: value3952 Key: 29750, Value: value3243 Key: 54327, Value: value2734 Key: 29754, Value: value1147 Key: 21562, Value: value2401 Key: 21567, Value: value2618 Key: 54339, Value: value4053 Key: 29764, Value: value1565 Key: 62533, Value: value3574 Key: 78919, Value: value4783 Key: 95305, Value: value4125 Key: 87112, Value: value2705 Key: 29771, Value: value2249 Key: 87119, Value: value2278 Key: 13395, Value: value3990 Key: 95316, Value: value4930 Key: 21590, Value: value140 Key: 62550, Value: value4998 Key: 13402, Value: value2052 Key: 37978, Value: value3544 Key: 29787, Value: value2673 Key: 46174, Value: value3925 Key: 29791, Value: value3422 Key: 29793, Value: value998 Key: 29794, Value: value66 Key: 37986, Value: value170 Key: 46180, Value: value4411 Key: 46182, Value: value3380 Key: 54375, Value: value4604 Key: 70760, Value: value4796 Key: 87146, Value: value912 Key: 5227, Value: value920 Key: 13419, Value: value3617 Key: 54385, Value: value399 Key: 70770, Value: value4369 Key: 13428, Value: value1911 Key: 95349, Value: value4975 Key: 21624, Value: value3193 Key: 70778, Value: value2656 Key: 62589, Value: value682 Key: 54399, Value: value898 Key: 38015, Value: value4621 Key: 62592, Value: value3503 Key: 95361, Value: value3846 Key: 21632, Value: value4106 Key: 87171, Value: value740 Key: 13443, Value: value335 Key: 87176, Value: value1388 Key: 62603, Value: value789 Key: 78986, Value: value3538 Key: 87178, Value: value4799 Key: 62606, Value: value1034 Key: 70798, Value: value3717 Key: 95376, Value: value4020 Key: 62609, Value: value4422 Key: 13458, Value: value1847 Key: 62613, Value: value4469 Key: 95382, Value: value4192 Key: 79001, Value: value1771 Key: 79005, Value: value52 Key: 87199, Value: value1395 Key: 54430, Value: value3328 Key: 79006, Value: value4889 Key: 54433, Value: value3661 Key: 38052, Value: value883 Key: 87205, Value: value4965 Key: 13477, Value: value346 Key: 62629, Value: value1408 Key: 21672, Value: value1432 Key: 13480, Value: value1869 Key: 95405, Value: value497 Key: 46252, Value: value1418 Key: 13488, Value: value2752 Key: 54448, Value: value3171 Key: 21686, Value: value4289 Key: 95416, Value: value1578 Key: 38073, Value: value3629 Key: 38076, Value: value462 Key: 46272, Value: value157 Key: 70851, Value: value4784 Key: 79042, Value: value1554 Key: 13508, Value: value1695 Key: 21704, Value: value3983 Key: 87242, Value: value1616 Key: 13516, Value: value406 Key: 79053, Value: value1208 Key: 21712, Value: value596 Key: 95441, Value: value1607 Key: 70865, Value: value3573 Key: 46289, Value: value1646 Key: 87251, Value: value1171 Key: 21716, Value: value1219 Key: 54485, Value: value555 Key: 46294, Value: value2663 Key: 29910, Value: value4337 Key: 95449, Value: value4476 Key: 5338, Value: value674 Key: 62682, Value: value3793 Key: 5339, Value: value799 Key: 70876, Value: value1539 Key: 95452, Value: value3373 Key: 38111, Value: value4928 Key: 21728, Value: value3825 Key: 46304, Value: value3106 Key: 29920, Value: value4311 Key: 29921, Value: value1585 Key: 29923, Value: value1078 Key: 13540, Value: value2066 Key: 29925, Value: value4093 Key: 95460, Value: value4892 Key: 46316, Value: value1793 Key: 54512, Value: value1221 Key: 62707, Value: value53 Key: 46324, Value: value3890 Key: 79095, Value: value3642 Key: 87289, Value: value1076 Key: 13560, Value: value4371 Key: 29945, Value: value3052 Key: 46330, Value: value2272 Key: 79098, Value: value734 Key: 95482, Value: value982 Key: 70906, Value: value1930 Key: 79101, Value: value778 Key: 70910, Value: value4029 Key: 95490, Value: value398 Key: 38148, Value: value3682 Key: 70918, Value: value2443 Key: 79115, Value: value2163 Key: 87306, Value: value168 Key: 79114, Value: value2474 Key: 5388, Value: value1931 Key: 79116, Value: value2366 Key: 46350, Value: value395 Key: 62737, Value: value77 Key: 46356, Value: value4665 Key: 21788, Value: value3429 Key: 62749, Value: value162 Key: 38173, Value: value3958 Key: 13599, Value: value1029 Key: 70945, Value: value1965 Key: 54560, Value: value3707 Key: 29984, Value: value4684 Key: 5409, Value: value1569 Key: 5410, Value: value3881 Key: 87332, Value: value495 Key: 13605, Value: value1859 Key: 62759, Value: value4155 Key: 5416, Value: value1390 Key: 62760, Value: value3319 Key: 70955, Value: value660 Key: 46378, Value: value2045 Key: 79147, Value: value3863 Key: 70956, Value: value4653 Key: 70960, Value: value1138 Key: 13622, Value: value1245 Key: 95543, Value: value3524 Key: 46391, Value: value1997 Key: 13625, Value: value4165 Key: 70971, Value: value2859 Key: 30010, Value: value4071 Key: 79165, Value: value3903 Key: 79166, Value: value690 Key: 54592, Value: value1964 Key: 54594, Value: value4442 Key: 5443, Value: value3310 Key: 87367, Value: value2747 Key: 70986, Value: value817 Key: 30027, Value: value4880 Key: 46417, Value: value3525 Key: 62802, Value: value1269 Key: 79188, Value: value4139 Key: 95575, Value: value492 Key: 46424, Value: value3652 Key: 46425, Value: value2805 Key: 71000, Value: value3633 Key: 46429, Value: value4294 Key: 62818, Value: value2504 Key: 71011, Value: value4453 Key: 13667, Value: value4222 Key: 87403, Value: value4211 Key: 62828, Value: value2522 Key: 95601, Value: value4791 Key: 71024, Value: value774 Key: 30069, Value: value3324 Key: 30070, Value: value4309 Key: 5494, Value: value4546 Key: 5497, Value: value1305 Key: 21889, Value: value4140 Key: 54657, Value: value4591 Key: 79234, Value: value506 Key: 21893, Value: value4866 Key: 46470, Value: value538 Key: 87439, Value: value3937 Key: 95637, Value: value1954 Key: 46487, Value: value600 Key: 13721, Value: value260 Key: 71064, Value: value2038 Key: 87450, Value: value176 Key: 30109, Value: value545 Key: 79260, Value: value1369 Key: 46493, Value: value3228 Key: 79262, Value: value3295 Key: 46496, Value: value2612 Key: 71072, Value: value2217 Key: 46498, Value: value3110 Key: 79266, Value: value4747 Key: 46500, Value: value1725 Key: 21924, Value: value4834 Key: 21926, Value: value779 Key: 71081, Value: value923 Key: 54697, Value: value2264 Key: 38313, Value: value2935 Key: 38316, Value: value2187 Key: 79277, Value: value2376 Key: 5548, Value: value3440 Key: 62893, Value: value4730 Key: 71086, Value: value2084 Key: 95662, Value: value3194 Key: 38321, Value: value894 Key: 30129, Value: value3016 Key: 46514, Value: value94 Key: 62898, Value: value4345 Key: 95669, Value: value401 Key: 30132, Value: value4560 Key: 21943, Value: value3704 Key: 95673, Value: value2399 Key: 30136, Value: value3435 Key: 30141, Value: value3074 Key: 21949, Value: value4183 Key: 38334, Value: value2065 Key: 30144, Value: value1335 Key: 87489, Value: value2746 Key: 46528, Value: value3176 Key: 62913, Value: value390 Key: 95684, Value: value3094 Key: 79302, Value: value2214 Key: 79305, Value: value2069 Key: 87496, Value: value2121 Key: 21962, Value: value770 Key: 30157, Value: value1316 Key: 5581, Value: value3727 Key: 79311, Value: value41 Key: 13775, Value: value4439 Key: 95697, Value: value2054 Key: 5586, Value: value1684 Key: 30165, Value: value2411 Key: 46549, Value: value4553 Key: 54742, Value: value3666 Key: 87510, Value: value10 Key: 21975, Value: value2270 Key: 46551, Value: value3759 Key: 87517, Value: value673 Key: 54748, Value: value2296 Key: 30173, Value: value1332 Key: 5598, Value: value4624 Key: 30176, Value: value890 Key: 5600, Value: value4993 Key: 54753, Value: value2031 Key: 38371, Value: value3043 Key: 62949, Value: value4933 Key: 79335, Value: value1853 Key: 21990, Value: value4027 Key: 46567, Value: value4756 Key: 30186, Value: value3222 Key: 54767, Value: value2232 Key: 21999, Value: value2578 Key: 30197, Value: value540 Key: 79348, Value: value1817 Key: 30201, Value: value4670 Key: 62971, Value: value3297 Key: 71165, Value: value524 Key: 13823, Value: value1084 Key: 71168, Value: value2923 Key: 13828, Value: value4501 Key: 30213, Value: value13 Key: 5637, Value: value1450 Key: 95748, Value: value3891 Key: 30215, Value: value696 Key: 22024, Value: value872 Key: 38409, Value: value3496 Key: 22026, Value: value2384 Key: 87562, Value: value175 Key: 71181, Value: value1170 Key: 38412, Value: value2696 Key: 87565, Value: value3238 Key: 79372, Value: value349 Key: 38419, Value: value2817 Key: 46613, Value: value504 Key: 46614, Value: value3317 Key: 46616, Value: value443 Key: 46617, Value: value859 Key: 54809, Value: value3909 Key: 63002, Value: value2813 Key: 87581, Value: value1509 Key: 46624, Value: value2991 Key: 5665, Value: value1117 Key: 13858, Value: value1907 Key: 22050, Value: value4872 Key: 5669, Value: value659 Key: 38441, Value: value609 Key: 63017, Value: value675 Key: 79400, Value: value2528 Key: 5673, Value: value3702 Key: 87597, Value: value1510 Key: 38446, Value: value768 Key: 13870, Value: value3655 Key: 54832, Value: value2076 Key: 5684, Value: value3362 Key: 54839, Value: value4308 Key: 30267, Value: value2782 Key: 30268, Value: value1650 Key: 63036, Value: value3027 Key: 30269, Value: value850 Key: 38461, Value: value4096 Key: 95808, Value: value2614 Key: 22082, Value: value1255 Key: 63044, Value: value1442 Key: 22084, Value: value3771 Key: 46661, Value: value861 Key: 95814, Value: value3283 Key: 71241, Value: value3149 Key: 95822, Value: value725 Key: 54863, Value: value4461 Key: 46673, Value: value1528 Key: 13908, Value: value3289 Key: 30294, Value: value3370 Key: 38486, Value: value3802 Key: 79446, Value: value1643 Key: 79452, Value: value3829 Key: 95839, Value: value3168 Key: 87646, Value: value1538 Key: 22111, Value: value3602 Key: 13920, Value: value2892 Key: 95840, Value: value3026 Key: 5731, Value: value2561 Key: 87650, Value: value3067 Key: 5732, Value: value2695 Key: 79463, Value: value4772 Key: 87657, Value: value772 Key: 22120, Value: value4094 Key: 5737, Value: value2228 Key: 63085, Value: value2501 Key: 13934, Value: value1142 Key: 54894, Value: value3591 Key: 30320, Value: value961 Key: 38512, Value: value1595 Key: 13937, Value: value3810 Key: 13938, Value: value648 Key: 46708, Value: value1791 Key: 13942, Value: value51 Key: 95862, Value: value3933 Key: 87672, Value: value4944 Key: 63098, Value: value3495 Key: 79485, Value: value123 Key: 46719, Value: value1702 Key: 71294, Value: value4012 Key: 22147, Value: value1217 Key: 38531, Value: value2619 Key: 22149, Value: value2048 Key: 71303, Value: value2576 Key: 38540, Value: value4090 Key: 54926, Value: value441 Key: 79506, Value: value2439 Key: 71317, Value: value1961 Key: 71316, Value: value3594 Key: 5782, Value: value2100 Key: 38550, Value: value3353 Key: 13979, Value: value2224 Key: 22172, Value: value1367 Key: 71327, Value: value2996 Key: 79518, Value: value2727 Key: 63136, Value: value417 Key: 71329, Value: value3277 Key: 95904, Value: value2611 Key: 22178, Value: value2356 Key: 30370, Value: value3834 Key: 79522, Value: value3342 Key: 5797, Value: value2492 Key: 22186, Value: value4130 Key: 46763, Value: value3625 Key: 71342, Value: value1024 Key: 14001, Value: value3279 Key: 71346, Value: value3900 Key: 71349, Value: value120 Key: 22203, Value: value4708 Key: 87740, Value: value2300 Key: 22209, Value: value952 Key: 14017, Value: value4026 Key: 79564, Value: value3838 Key: 14030, Value: value578 Key: 5839, Value: value2231 Key: 30418, Value: value450 Key: 79571, Value: value2814 Key: 14044, Value: value3402 Key: 38620, Value: value4968 Key: 5856, Value: value1190 Key: 22245, Value: value2248 Key: 79588, Value: value4678 Key: 14055, Value: value34 Key: 46828, Value: value2150 Key: 95981, Value: value2419 Key: 87788, Value: value327 Key: 55022, Value: value679 Key: 79601, Value: value1372 Key: 87797, Value: value1609 Key: 22262, Value: value4568 Key: 79609, Value: value185 Key: 30457, Value: value314 Key: 63229, Value: value117 Key: 46846, Value: value1489 Key: 38655, Value: value455 Key: 96003, Value: value3787 Key: 63236, Value: value2659 Key: 71433, Value: value1045 Key: 38664, Value: value1658 Key: 96010, Value: value264 Key: 30478, Value: value393 Key: 87823, Value: value1206 Key: 22289, Value: value1035 Key: 87827, Value: value2903 Key: 30483, Value: value2042 Key: 71445, Value: value1184 Key: 87831, Value: value672 Key: 71447, Value: value4180 Key: 79639, Value: value4890 Key: 87830, Value: value3487 Key: 96022, Value: value4900 Key: 14105, Value: value509 Key: 55066, Value: value1574 Key: 38683, Value: value595 Key: 79648, Value: value2989 Key: 46884, Value: value2756 Key: 14118, Value: value3960 Key: 87849, Value: value4163 Key: 22321, Value: value2608 Key: 5939, Value: value1516 Key: 96052, Value: value1296 Key: 46901, Value: value3645 Key: 79672, Value: value227 Key: 38713, Value: value2063 Key: 22332, Value: value4978 Key: 46909, Value: value475 Key: 71488, Value: value4873 Key: 14146, Value: value382 Key: 30531, Value: value3974 Key: 22340, Value: value3690 Key: 55108, Value: value3876 Key: 87878, Value: value591 Key: 71494, Value: value888 Key: 14154, Value: value3575 Key: 38731, Value: value4010 Key: 87882, Value: value4404 Key: 71501, Value: value613 Key: 38734, Value: value4606 Key: 79694, Value: value1174 Key: 30544, Value: value3357 Key: 14164, Value: value2087 Key: 14165, Value: value3235 Key: 22359, Value: value1922 Key: 96089, Value: value130 Key: 5976, Value: value3146 Key: 71515, Value: value4271 Key: 46940, Value: value2040 Key: 14176, Value: value2086 Key: 46948, Value: value1071 Key: 87909, Value: value3198 Key: 38757, Value: value743 Key: 71524, Value: value3158 Key: 87912, Value: value825 Key: 79720, Value: value2174 Key: 46957, Value: value3505 Key: 87918, Value: value4626 Key: 38768, Value: value2862 Key: 79731, Value: value4413 Key: 22389, Value: value1705 Key: 22393, Value: value3076 Key: 6010, Value: value2207 Key: 79739, Value: value2942 Key: 22397, Value: value236 Key: 55165, Value: value2678 Key: 6014, Value: value1324 Key: 63360, Value: value2412 Key: 38784, Value: value3606 Key: 79744, Value: value1876 Key: 22403, Value: value2185 Key: 87941, Value: value169 Key: 6028, Value: value111 Key: 79759, Value: value1066 Key: 63382, Value: value3879 Key: 79767, Value: value4356 Key: 55191, Value: value4062 Key: 63387, Value: value881 Key: 71581, Value: value2337 Key: 30625, Value: value2075 Key: 22438, Value: value1893 Key: 63400, Value: value2937 Key: 79784, Value: value4246 Key: 38825, Value: value4887 Key: 87981, Value: value3775 Key: 38829, Value: value803 Key: 6067, Value: value712 Key: 79803, Value: value4107 Key: 63422, Value: value4939 Key: 88000, Value: value3089 Key: 96192, Value: value3621 Key: 96195, Value: value4697 Key: 88002, Value: value183 Key: 22468, Value: value1652 Key: 96197, Value: value2219 Key: 96198, Value: value4850 Key: 22472, Value: value3318 Key: 38856, Value: value3439 Key: 47051, Value: value2328 Key: 6094, Value: value3355 Key: 47055, Value: value2331 Key: 88017, Value: value2229 Key: 71634, Value: value829 Key: 71637, Value: value1916 Key: 55254, Value: value4410 Key: 30678, Value: value4676 Key: 6103, Value: value2295 Key: 71641, Value: value632 Key: 6106, Value: value316 Key: 71642, Value: value1384 Key: 55259, Value: value4072 Key: 55260, Value: value4829 Key: 71646, Value: value1417 Key: 96222, Value: value4446 Key: 55263, Value: value4584 Key: 14306, Value: value3012 Key: 88037, Value: value463 Key: 63461, Value: value3312 Key: 79851, Value: value467 Key: 96235, Value: value3563 Key: 63471, Value: value2098 Key: 63472, Value: value687 Key: 79856, Value: value340 Key: 38900, Value: value35 Key: 30712, Value: value2855 Key: 55293, Value: value110 Key: 79868, Value: value2039 Key: 30717, Value: value4196 Key: 55296, Value: value1775 Key: 71680, Value: value3698 Key: 88066, Value: value727 Key: 79874, Value: value3665 Key: 79877, Value: value917 Key: 22532, Value: value2981 Key: 79878, Value: value502 Key: 88070, Value: value2493 Key: 14343, Value: value3454 Key: 22539, Value: value226 Key: 22540, Value: value3943 Key: 63507, Value: value210 Key: 6163, Value: value415 Key: 63510, Value: value3981 Key: 71707, Value: value1107 Key: 55323, Value: value1827 Key: 38941, Value: value975 Key: 88095, Value: value4816 Key: 79904, Value: value1303 Key: 30755, Value: value4295 Key: 30756, Value: value498 Key: 79908, Value: value2677 Key: 6182, Value: value940 Key: 30763, Value: value3021 Key: 47148, Value: value49 Key: 6189, Value: value4086 Key: 6190, Value: value1446 Key: 71726, Value: value4956 Key: 47152, Value: value2301 Key: 63543, Value: value702 Key: 55353, Value: value4341 Key: 79932, Value: value1678 Key: 14401, Value: value3942 Key: 47174, Value: value3145 Key: 14407, Value: value1532 Key: 14409, Value: value3374 Key: 30796, Value: value2033 Key: 71759, Value: value434 Key: 55374, Value: value1001 Key: 14415, Value: value1016 Key: 71763, Value: value3624 Key: 79954, Value: value1785 Key: 14423, Value: value1724 Key: 6232, Value: value1993 Key: 88155, Value: value2985 Key: 30811, Value: value4225 Key: 55389, Value: value3424 Key: 88160, Value: value392 Key: 88164, Value: value3842 Key: 47206, Value: value1514 Key: 63590, Value: value4394 Key: 63591, Value: value1126 Key: 22632, Value: value624 Key: 6248, Value: value2547 Key: 96361, Value: value2928 Key: 88171, Value: value2816 Key: 63598, Value: value255 Key: 22650, Value: value2680 Key: 39037, Value: value4847 Key: 79999, Value: value3918 Key: 96385, Value: value3212 Key: 88193, Value: value4064 Key: 14467, Value: value4668 Key: 96389, Value: value2306 Key: 22661, Value: value4740 Key: 6280, Value: value1779 Key: 14478, Value: value2194 Key: 14482, Value: value3568 Key: 47256, Value: value3518 Key: 88219, Value: value2869 Key: 14491, Value: value2451 Key: 30875, Value: value2460 Key: 47260, Value: value98 Key: 30879, Value: value1079 Key: 14497, Value: value4908 Key: 55460, Value: value846 Key: 96420, Value: value2091 Key: 14502, Value: value1358 Key: 80039, Value: value3447 Key: 30886, Value: value4805 Key: 6313, Value: value4349 Key: 88235, Value: value828 Key: 80045, Value: value1469 Key: 14509, Value: value810 Key: 39086, Value: value1512 Key: 39087, Value: value312 Key: 55471, Value: value1365 Key: 14515, Value: value3105 Key: 39098, Value: value62 Key: 6330, Value: value3009 Key: 30908, Value: value4729 Key: 71868, Value: value464 Key: 6333, Value: value782 Key: 39103, Value: value1389 Key: 71870, Value: value2720 Key: 14527, Value: value3740 Key: 47299, Value: value3293 Key: 55491, Value: value4790 Key: 47302, Value: value1808 Key: 96454, Value: value3622 Key: 71883, Value: value2009 Key: 80077, Value: value3935 Key: 47311, Value: value2984 Key: 14547, Value: value2247 Key: 88276, Value: value1551 Key: 80086, Value: value3859 Key: 6359, Value: value4620 Key: 71899, Value: value1731 Key: 14554, Value: value4385 Key: 39131, Value: value1200 Key: 80093, Value: value2140 Key: 39134, Value: value4526 Key: 39135, Value: value2049 Key: 55519, Value: value4044 Key: 30945, Value: value2602 Key: 6369, Value: value4112 Key: 63715, Value: value515 Key: 71906, Value: value2738 Key: 22756, Value: value3868 Key: 96485, Value: value4177 Key: 39145, Value: value3136 Key: 96491, Value: value252 Key: 71915, Value: value4764 Key: 14581, Value: value822 Key: 22773, Value: value3298 Key: 63736, Value: value529 Key: 39162, Value: value1319 Key: 55547, Value: value38 Key: 80122, Value: value2555 Key: 6395, Value: value4848 Key: 80124, Value: value4108 Key: 63741, Value: value1937 Key: 47359, Value: value3201 Key: 14592, Value: value4301 Key: 39169, Value: value726 Key: 55554, Value: value4614 Key: 22787, Value: value1815 Key: 39172, Value: value3144 Key: 88326, Value: value925 Key: 47367, Value: value2308 Key: 14600, Value: value3673 Key: 22792, Value: value4745 Key: 88328, Value: value4226 Key: 55564, Value: value1338 Key: 71948, Value: value1032 Key: 47373, Value: value3472 Key: 88336, Value: value1456 Key: 96531, Value: value1962 Key: 39188, Value: value2581 Key: 55573, Value: value2119 Key: 39190, Value: value1070 Key: 22806, Value: value1081 Key: 96537, Value: value81 Key: 39199, Value: value826 Key: 80158, Value: value2799 Key: 88353, Value: value2324 Key: 63778, Value: value1979 Key: 88358, Value: value1918 Key: 96553, Value: value1996 Key: 14634, Value: value3570 Key: 6444, Value: value3961 Key: 31021, Value: value4174 Key: 63789, Value: value4363 Key: 14639, Value: value1969 Key: 71982, Value: value1990 Key: 47407, Value: value3236 Key: 63792, Value: value4013 Key: 47409, Value: value816 Key: 88373, Value: value3385 Key: 80182, Value: value1617 Key: 31034, Value: value3196 Key: 71994, Value: value481 Key: 31036, Value: value4161 Key: 55619, Value: value416 Key: 80197, Value: value785 Key: 55625, Value: value2273 Key: 80206, Value: value338 Key: 72017, Value: value637 Key: 63824, Value: value2449 Key: 14672, Value: value2852 Key: 63827, Value: value2642 Key: 80213, Value: value42 Key: 96596, Value: value342 Key: 39253, Value: value1277 Key: 72023, Value: value3189 Key: 80220, Value: value3118 Key: 39266, Value: value477 Key: 96610, Value: value291 Key: 14691, Value: value4706 Key: 96613, Value: value2226 Key: 63846, Value: value92 Key: 80230, Value: value3237 Key: 22887, Value: value3291 Key: 55655, Value: value4116 Key: 6503, Value: value4737 Key: 88425, Value: value1396 Key: 47465, Value: value1946 Key: 80234, Value: value21 Key: 22892, Value: value1087 Key: 47468, Value: value4845 Key: 88431, Value: value668 Key: 72047, Value: value2543 Key: 88430, Value: value3742 Key: 88432, Value: value1745 Key: 80243, Value: value4839 Key: 22899, Value: value574 Key: 47476, Value: value1317 Key: 47480, Value: value1323 Key: 72063, Value: value3184 Key: 80254, Value: value2230 Key: 96638, Value: value2309 Key: 22914, Value: value1699 Key: 80258, Value: value941 Key: 14724, Value: value3247 Key: 22919, Value: value200 Key: 55687, Value: value1884 Key: 6539, Value: value1515 Key: 88460, Value: value713 Key: 96654, Value: value4732 Key: 55698, Value: value2803 Key: 14742, Value: value465 Key: 88470, Value: value1400 Key: 80278, Value: value1786 Key: 39319, Value: value3489 Key: 80281, Value: value3253 Key: 88472, Value: value4188 Key: 96666, Value: value281 Key: 96672, Value: value2964 Key: 88483, Value: value4142 Key: 6562, Value: value4175 Key: 55714, Value: value4542 Key: 14755, Value: value2792 Key: 47524, Value: value237 Key: 22950, Value: value4434 Key: 96681, Value: value1205 Key: 14760, Value: value3490 Key: 55722, Value: value2601 Key: 72109, Value: value3307 Key: 47538, Value: value1322 Key: 55731, Value: value2141 Key: 96692, Value: value3564 Key: 22969, Value: value4415 Key: 96699, Value: value4938 Key: 39355, Value: value3482 Key: 6591, Value: value4009 Key: 88513, Value: value4126 Key: 31168, Value: value4963 Key: 80325, Value: value4818 Key: 88518, Value: value601 Key: 14792, Value: value1493 Key: 80329, Value: value1503 Key: 72136, Value: value1860 Key: 47561, Value: value3677 Key: 22986, Value: value3806 Key: 88525, Value: value882 Key: 72141, Value: value4479 Key: 22993, Value: value804 Key: 55762, Value: value3919 Key: 39384, Value: value3760 Key: 55768, Value: value4828 Key: 55770, Value: value814 Key: 23003, Value: value2573 Key: 14811, Value: value2574 Key: 72154, Value: value3173 Key: 6621, Value: value3179 Key: 47583, Value: value1030 Key: 14820, Value: value2095 Key: 96741, Value: value3233 Key: 80356, Value: value1484 Key: 39400, Value: value3271 Key: 72168, Value: value2188 Key: 88555, Value: value2707 Key: 31211, Value: value459 Key: 47597, Value: value1145 Key: 47603, Value: value3 Key: 55795, Value: value1711 Key: 63989, Value: value4808 Key: 31222, Value: value1871 Key: 47606, Value: value2820 Key: 63990, Value: value3687 Key: 80374, Value: value3056 Key: 72185, Value: value718 Key: 39416, Value: value2609 Key: 23038, Value: value490 Key: 96767, Value: value4581 Key: 31232, Value: value1491 Key: 55808, Value: value4837 Key: 64003, Value: value2697 Key: 55816, Value: value3684 Key: 47625, Value: value565 Key: 23051, Value: value3788 Key: 88589, Value: value2580 Key: 64021, Value: value1580 Key: 47637, Value: value2523 Key: 80406, Value: value3143 Key: 72217, Value: value3571 Key: 23066, Value: value598 Key: 14875, Value: value3696 Key: 55835, Value: value3820 Key: 47644, Value: value2305 Key: 14878, Value: value341 Key: 39456, Value: value198 Key: 47651, Value: value102 Key: 88610, Value: value875 Key: 14884, Value: value127 Key: 88612, Value: value4858 Key: 96807, Value: value2068 Key: 47658, Value: value24 Key: 14891, Value: value2266 Key: 23085, Value: value3381 Key: 88620, Value: value3857 Key: 6704, Value: value4209 Key: 47666, Value: value4997 Key: 14899, Value: value351 Key: 55863, Value: value773 Key: 55864, Value: value1088 Key: 6713, Value: value2549 Key: 31290, Value: value2699 Key: 88634, Value: value3599 Key: 47677, Value: value4555 Key: 55871, Value: value2975 Key: 88643, Value: value16 Key: 64070, Value: value3988 Key: 64075, Value: value2872 Key: 6734, Value: value1581 Key: 14935, Value: value2252 Key: 31325, Value: value2881 Key: 72284, Value: value3855 Key: 47711, Value: value2235 Key: 39520, Value: value1239 Key: 72289, Value: value2377 Key: 88672, Value: value207 Key: 39523, Value: value4766 Key: 47718, Value: value404 Key: 39528, Value: value1518 Key: 72299, Value: value1756 Key: 55916, Value: value3623 Key: 14960, Value: value949 Key: 88689, Value: value1355 Key: 39537, Value: value460 Key: 96889, Value: value1458 Key: 88699, Value: value3133 Key: 72315, Value: value4557 Key: 14972, Value: value1792 Key: 31357, Value: value2794 Key: 31361, Value: value4191 Key: 72322, Value: value847 Key: 64131, Value: value962 Key: 47749, Value: value1662 Key: 6790, Value: value3301 Key: 64135, Value: value1676 Key: 6792, Value: value2 Key: 55944, Value: value1211 Key: 88712, Value: value738 Key: 39565, Value: value1882 Key: 55949, Value: value3887 Key: 23183, Value: value2790 Key: 72336, Value: value1063 Key: 23185, Value: value4973 Key: 88723, Value: value1268 Key: 80531, Value: value2554 Key: 14995, Value: value2567 Key: 80532, Value: value1391 Key: 96919, Value: value1188 Key: 88728, Value: value4658 Key: 88731, Value: value832 Key: 6811, Value: value4327 Key: 96925, Value: value3631 Key: 88734, Value: value2785 Key: 31392, Value: value263 Key: 72353, Value: value2125 Key: 55968, Value: value4840 Key: 64161, Value: value11 Key: 96928, Value: value3705 Key: 31395, Value: value751 Key: 64163, Value: value2838 Key: 6823, Value: value2494 Key: 47784, Value: value3350 Key: 23219, Value: value605 Key: 96946, Value: value2934 Key: 15028, Value: value4445 Key: 15033, Value: value4377 Key: 88760, Value: value4616 Key: 47804, Value: value2386 Key: 39614, Value: value627 Key: 88767, Value: value4305 Key: 88766, Value: value2715 Key: 72382, Value: value2596 Key: 23233, Value: value1903 Key: 88768, Value: value3613 Key: 64194, Value: value2108 Key: 72387, Value: value2212 Key: 96962, Value: value3584 Key: 56005, Value: value3001 Key: 64197, Value: value3339 Key: 31432, Value: value4527 Key: 31435, Value: value809 Key: 88781, Value: value161 Key: 80593, Value: value3042 Key: 56017, Value: value1116 Key: 31441, Value: value3864 Key: 15057, Value: value4698 Key: 56019, Value: value744 Key: 64216, Value: value681 Key: 56024, Value: value3245 Key: 15065, Value: value389 Key: 56028, Value: value2485 Key: 31452, Value: value4307 Key: 47841, Value: value3889 Key: 47843, Value: value3545 Key: 15076, Value: value3272 Key: 64230, Value: value2195 Key: 64232, Value: value444 Key: 72425, Value: value1632 Key: 39657, Value: value4273 Key: 56041, Value: value4316 Key: 47852, Value: value301 Key: 80622, Value: value2778 Key: 56048, Value: value1210 Key: 56052, Value: value2473 Key: 97015, Value: value1259 Key: 97014, Value: value505 Key: 47865, Value: value2258 Key: 6907, Value: value17 Key: 31483, Value: value3626 Key: 47868, Value: value4886 Key: 88830, Value: value878 Key: 6911, Value: value4907 Key: 6912, Value: value1837 Key: 80643, Value: value685 Key: 56075, Value: value1825 Key: 47883, Value: value2866 Key: 23308, Value: value2132 Key: 31501, Value: value910 Key: 31502, Value: value4807 Key: 23312, Value: value4111 Key: 6929, Value: value125 Key: 31505, Value: value3187 Key: 6930, Value: value980 Key: 80658, Value: value2808 Key: 39700, Value: value2563 Key: 15125, Value: value1351 Key: 47893, Value: value1697 Key: 15126, Value: value1703 Key: 23319, Value: value3316 Key: 56089, Value: value4679 Key: 47906, Value: value3384 Key: 97059, Value: value3872 Key: 6947, Value: value852 Key: 15140, Value: value4189 Key: 23333, Value: value1590 Key: 47912, Value: value1065 Key: 23336, Value: value4245 Key: 56111, Value: value1131 Key: 31536, Value: value2757 Key: 6961, Value: value1501 Key: 97072, Value: value1571 Key: 72498, Value: value3314 Key: 56116, Value: value3628 Key: 64309, Value: value1185 Key: 97076, Value: value4450 Key: 15158, Value: value2726 Key: 39738, Value: value970 Key: 15163, Value: value2190 Key: 47932, Value: value3634 Key: 88892, Value: value1856 Key: 15166, Value: value1623 Key: 56126, Value: value1794 Key: 72513, Value: value693 Key: 88897, Value: value2369 Key: 6977, Value: value2763 Key: 56134, Value: value4382 Key: 15174, Value: value4785 Key: 15175, Value: value564 Key: 6984, Value: value3135 Key: 56143, Value: value2698 Key: 72529, Value: value542 Key: 80721, Value: value3656 Key: 39762, Value: value2135 Key: 80723, Value: value2276 Key: 56146, Value: value4946 Key: 6996, Value: value4480 Key: 7000, Value: value163 Key: 64344, Value: value438 Key: 39768, Value: value4996 Key: 7001, Value: value166 Key: 7002, Value: value4954 Key: 72538, Value: value4427 Key: 56156, Value: value4503 Key: 80735, Value: value4425 Key: 56161, Value: value614 Key: 64354, Value: value2193 Key: 7010, Value: value2925 Key: 7011, Value: value841 Key: 15206, Value: value318 Key: 7015, Value: value4452 Key: 47976, Value: value2019 Key: 72556, Value: value2198 Key: 88940, Value: value4901 Key: 7022, Value: value126 Key: 80753, Value: value1959 Key: 15218, Value: value716 Key: 31602, Value: value4949 Key: 64379, Value: value2151 Key: 39805, Value: value2521 Key: 97148, Value: value4672 Key: 80769, Value: value4052 Key: 7046, Value: value4701 Key: 56199, Value: value2458 Key: 80774, Value: value3912 Key: 39817, Value: value695 Key: 88968, Value: value3725 Key: 97163, Value: value2796 Key: 72586, Value: value2751 Key: 7051, Value: value2888 Key: 15244, Value: value2197 Key: 23436, Value: value3817 Key: 15245, Value: value2544 Key: 39823, Value: value671 Key: 97169, Value: value1080 Key: 80787, Value: value4234 Key: 23443, Value: value14 Key: 56211, Value: value3821 Key: 80789, Value: value1985 Key: 7061, Value: value2448 Key: 97177, Value: value2730 Key: 97176, Value: value2480 Key: 97179, Value: value2894 Key: 80794, Value: value3641 Key: 97178, Value: value4637 Key: 97180, Value: value729 Key: 31645, Value: value1488 Key: 23454, Value: value3013 Key: 15264, Value: value2313 Key: 97186, Value: value1535 Key: 31653, Value: value1557 Key: 80806, Value: value1224 Key: 80812, Value: value3635 Key: 64430, Value: value3332 Key: 15278, Value: value3770 Key: 80815, Value: value3951 Key: 97203, Value: value3654 Key: 7091, Value: value317 Key: 56243, Value: value3648 Key: 80820, Value: value3071 Key: 64441, Value: value3220 Key: 23481, Value: value4566 Key: 39866, Value: value3905 Key: 15293, Value: value646 Key: 48061, Value: value2915 Key: 97215, Value: value2114 Key: 48063, Value: value1449 Key: 56257, Value: value1850 Key: 64451, Value: value3795 Key: 39877, Value: value1659 Key: 72647, Value: value67 Key: 89031, Value: value4558 Key: 97223, Value: value4983 Key: 97222, Value: value4103 Key: 89030, Value: value4426 Key: 72651, Value: value2138 Key: 97226, Value: value4433 Key: 72654, Value: value297 Key: 89038, Value: value468 Key: 97230, Value: value1802 Key: 64464, Value: value4736 Key: 39889, Value: value811 Key: 23505, Value: value1828 Key: 23507, Value: value4306 Key: 64468, Value: value4905 Key: 56277, Value: value1233 Key: 39893, Value: value4491 Key: 48090, Value: value3388 Key: 72667, Value: value3721 Key: 39900, Value: value1392 Key: 97245, Value: value4853 Key: 31711, Value: value4194 Key: 80862, Value: value4520 Key: 80871, Value: value2321 Key: 80870, Value: value703 Key: 23527, Value: value3326 Key: 23528, Value: value1683 Key: 64490, Value: value89 Key: 80875, Value: value732 Key: 48110, Value: value1803 Key: 64495, Value: value2603 Key: 64499, Value: value3755 Key: 89077, Value: value113 Key: 31732, Value: value2346 Key: 56308, Value: value4231 Key: 39928, Value: value610 Key: 23544, Value: value3412 Key: 48122, Value: value4718 Key: 64510, Value: value966 Key: 48126, Value: value2592 Key: 64512, Value: value430 Key: 31744, Value: value3181 Key: 39939, Value: value2332 Key: 48133, Value: value3773 Key: 23558, Value: value1611 Key: 89095, Value: value2939 Key: 39942, Value: value4055 Key: 48135, Value: value820 Key: 56327, Value: value2428 Key: 23560, Value: value886 Key: 56328, Value: value4519 Key: 23565, Value: value154 Key: 89102, Value: value1014 Key: 56336, Value: value412 Key: 80912, Value: value3488 Key: 64532, Value: value752 Key: 15380, Value: value1527 Key: 39960, Value: value2926 Key: 56347, Value: value1879 Key: 56348, Value: value1543 Key: 15389, Value: value3985 Key: 39967, Value: value924 Key: 72739, Value: value4416 Key: 31779, Value: value630 Key: 31782, Value: value3824 Key: 48167, Value: value328 Key: 97325, Value: value2517 Key: 15405, Value: value4588 Key: 64558, Value: value303 Key: 48174, Value: value3559 Key: 15408, Value: value3674 Key: 39985, Value: value4205 Key: 15412, Value: value343 Key: 97332, Value: value3510 Key: 72761, Value: value2503 Key: 80953, Value: value4429 Key: 31802, Value: value4711 Key: 64571, Value: value2842 Key: 64573, Value: value4351 Key: 7231, Value: value2320 Key: 89152, Value: value2027 Key: 97347, Value: value171 Key: 56387, Value: value1098 Key: 23622, Value: value3055 Key: 64586, Value: value2120 Key: 72781, Value: value786 Key: 31820, Value: value2148 Key: 56398, Value: value6 Key: 64591, Value: value224 Key: 97360, Value: value2821 Key: 15442, Value: value1083 Key: 56406, Value: value1291 Key: 64599, Value: value1781 Key: 7256, Value: value2653 Key: 23641, Value: value2291 Key: 97370, Value: value1865 Key: 89181, Value: value3014 Key: 64606, Value: value1002 Key: 72799, Value: value1599 Key: 31838, Value: value1647 Key: 40031, Value: value48 Key: 40032, Value: value245 Key: 56416, Value: value1439 Key: 7266, Value: value3377 Key: 80996, Value: value1691 Key: 7270, Value: value2690 Key: 89193, Value: value1220 Key: 40040, Value: value4001 Key: 40042, Value: value3252 Key: 23661, Value: value3254 Key: 40047, Value: value1982 Key: 23669, Value: value423 Key: 23671, Value: value2834 Key: 48249, Value: value2378 Key: 72831, Value: value3959 Key: 97406, Value: value742 Key: 40063, Value: value4690 Key: 64640, Value: value4724 Key: 72837, Value: value289 Key: 64644, Value: value2051 Key: 48261, Value: value3008 Key: 89222, Value: value1040 Key: 40071, Value: value4082 Key: 40076, Value: value3811 Key: 15501, Value: value4359 Key: 7310, Value: value1784 Key: 40079, Value: value249 Key: 40080, Value: value3882 Key: 64657, Value: value2613 Key: 64658, Value: value1124 Key: 72850, Value: value2118 Key: 31894, Value: value4699 Key: 72856, Value: value3711 Key: 15517, Value: value4124 Key: 64670, Value: value4647 Key: 64673, Value: value266 Key: 31907, Value: value3809 Key: 40100, Value: value139 Key: 23721, Value: value2020 Key: 81067, Value: value1405 Key: 48299, Value: value2861 Key: 15534, Value: value3745 Key: 56497, Value: value1286 Key: 48306, Value: value56 Key: 72883, Value: value148 Key: 56500, Value: value15 Key: 31928, Value: value1738 Key: 48313, Value: value4607 Key: 31931, Value: value1312 Key: 72893, Value: value571 Key: 72892, Value: value1027 Key: 72895, Value: value1492 Key: 64702, Value: value4113 Key: 81086, Value: value3323 Key: 23744, Value: value2685 Key: 72899, Value: value922 Key: 7363, Value: value2297 Key: 15557, Value: value2645 Key: 40133, Value: value4556 Key: 7367, Value: value2524 Key: 40138, Value: value2243 Key: 23755, Value: value3079 Key: 7372, Value: value146 Key: 81100, Value: value2077 Key: 56526, Value: value4774 Key: 97486, Value: value3050 Key: 89297, Value: value2453 Key: 7378, Value: value3284 Key: 15572, Value: value3949 Key: 64724, Value: value4667 Key: 97492, Value: value4101 Key: 48346, Value: value1992 Key: 23773, Value: value2877 Key: 72927, Value: value321 Key: 15583, Value: value1168 Key: 97509, Value: value4021 Key: 31973, Value: value1047 Key: 56551, Value: value4959 Key: 72937, Value: value1412 Key: 15594, Value: value1464 Key: 81131, Value: value1919 Key: 81130, Value: value2388 Key: 72938, Value: value4419 Key: 89330, Value: value651 Key: 56565, Value: value2728 Key: 97526, Value: value3443 Key: 40185, Value: value749 Key: 23803, Value: value1028 Key: 64765, Value: value2036 Key: 7421, Value: value2470 Key: 15617, Value: value1308 Key: 97536, Value: value3349 Key: 97542, Value: value2303 Key: 15625, Value: value180 Key: 32009, Value: value4827 Key: 97549, Value: value4506 Key: 23827, Value: value2006 Key: 64789, Value: value4444 Key: 15638, Value: value4344 Key: 7447, Value: value904 Key: 32024, Value: value2933 Key: 7448, Value: value4897 Key: 72989, Value: value1199 Key: 23836, Value: value1830 Key: 15644, Value: value4844 Key: 72991, Value: value2826 Key: 15647, Value: value229 Key: 23839, Value: value1704 Key: 72995, Value: value3869 Key: 7460, Value: value3686 Key: 72998, Value: value1246 Key: 32040, Value: value4366 Key: 89388, Value: value2206 Key: 64813, Value: value2850 Key: 15661, Value: value4336 Key: 89391, Value: value3819 Key: 40239, Value: value2540 Key: 48435, Value: value2795 Key: 40244, Value: value106 Key: 73017, Value: value2542 Key: 48444, Value: value1479 Key: 81212, Value: value798 Key: 56639, Value: value1526 Key: 64831, Value: value3102 Key: 97598, Value: value3911 Key: 56640, Value: value147 Key: 40258, Value: value3921 Key: 73028, Value: value3375 Key: 73030, Value: value1330 Key: 64839, Value: value4673 Key: 15689, Value: value1707 Key: 48457, Value: value3764 Key: 23885, Value: value3241 Key: 81228, Value: value3768 Key: 48462, Value: value3157 Key: 7502, Value: value4282 Key: 73038, Value: value2529 Key: 7507, Value: value649 Key: 32085, Value: value3195 Key: 15702, Value: value167 Key: 40278, Value: value2507 Key: 64855, Value: value3550 Key: 32088, Value: value1511 Key: 40280, Value: value3734 Key: 97624, Value: value4292 Key: 40282, Value: value994 Key: 89437, Value: value657 Key: 81244, Value: value2916 Key: 40286, Value: value36 Key: 15712, Value: value4406 Key: 23910, Value: value999 Key: 64871, Value: value19 Key: 40295, Value: value394 Key: 23913, Value: value714 Key: 97640, Value: value4688 Key: 32109, Value: value3216 Key: 7535, Value: value3005 Key: 97648, Value: value2889 Key: 56690, Value: value1073 Key: 32114, Value: value2167 Key: 73077, Value: value90 Key: 7540, Value: value2186 Key: 23926, Value: value4833 Key: 40311, Value: value1021 Key: 89475, Value: value520 Key: 64901, Value: value4464 Key: 15750, Value: value1675 Key: 81286, Value: value3681 Key: 7562, Value: value3803 Key: 97679, Value: value2620 Key: 15759, Value: value4035 Key: 73105, Value: value2830 Key: 23953, Value: value396 Key: 64916, Value: value4397 Key: 15768, Value: value931 Key: 48538, Value: value4727 Key: 23963, Value: value1605 Key: 89502, Value: value1680 Key: 73120, Value: value1236 Key: 48545, Value: value4060 Key: 56739, Value: value2874 Key: 32165, Value: value448 Key: 32166, Value: value2457 Key: 32169, Value: value3527 Key: 81325, Value: value1740 Key: 64941, Value: value3417 Key: 32175, Value: value3849 Key: 23984, Value: value2527 Key: 81331, Value: value4153 Key: 73139, Value: value4683 Key: 73138, Value: value1494 Key: 7604, Value: value4916 Key: 89527, Value: value3166 Key: 40379, Value: value447 Key: 56763, Value: value3646 Key: 89530, Value: value4368 Key: 89532, Value: value2438 Key: 23999, Value: value274 Key: 81342, Value: value1487 Key: 32195, Value: value4891 Key: 73158, Value: value2124 Key: 56776, Value: value845 Key: 24010, Value: value4414 Key: 97741, Value: value874 Key: 24012, Value: value3827 Key: 15821, Value: value1589 Key: 81356, Value: value1819 Key: 97743, Value: value4323 Key: 64976, Value: value3340 Key: 56785, Value: value4902 Key: 7634, Value: value2416 Key: 97747, Value: value3434 Key: 48597, Value: value1842 Key: 15830, Value: value4262 Key: 15832, Value: value1864 Key: 89563, Value: value1476 Key: 56795, Value: value4049 Key: 56796, Value: value1831 Key: 15838, Value: value1685 Key: 73182, Value: value2218 Key: 15844, Value: value4361 Key: 15846, Value: value4146 Key: 97768, Value: value1445 Key: 15850, Value: value1426 Key: 56811, Value: value1669 Key: 7660, Value: value2560 Key: 15853, Value: value4037 Key: 40430, Value: value2102 Key: 48622, Value: value2536 Key: 7663, Value: value359 Key: 89585, Value: value2395 Key: 7664, Value: value4481 Key: 7665, Value: value4955 Key: 97778, Value: value991 Key: 81394, Value: value3784 Key: 48630, Value: value1052 Key: 32247, Value: value1712 Key: 97785, Value: value1153 Key: 89595, Value: value2468 Key: 73210, Value: value2988 Key: 97789, Value: value3406 Key: 73212, Value: value3720 Key: 24063, Value: value4677 Key: 32256, Value: value4325 Key: 89602, Value: value2034 Key: 48647, Value: value585 Key: 32264, Value: value1209 Key: 73225, Value: value3779 Key: 40461, Value: value361 Key: 32269, Value: value2299 Key: 24077, Value: value2472 Key: 7693, Value: value4733 Key: 65041, Value: value1260 Key: 7700, Value: value2131 Key: 65045, Value: value3762 Key: 81430, Value: value1867 Key: 89625, Value: value653 Key: 97817, Value: value1521 Key: 97819, Value: value405 Key: 15898, Value: value3758 Key: 15900, Value: value4525 Key: 81436, Value: value4048 Key: 40478, Value: value4117 Key: 32287, Value: value2754 Key: 15903, Value: value3893 Key: 81441, Value: value402 Key: 81442, Value: value2917 Key: 56870, Value: value1270 Key: 97835, Value: value1455 Key: 89644, Value: value2430 Key: 97838, Value: value851 Key: 40496, Value: value1655 Key: 89651, Value: value137 Key: 32307, Value: value3224 Key: 15924, Value: value2004 Key: 81461, Value: value3861 Key: 40503, Value: value3259 Key: 24121, Value: value323 Key: 32313, Value: value3914 Key: 97848, Value: value4335 Key: 24124, Value: value1663 Key: 65092, Value: value1105 Key: 15944, Value: value678 Key: 65100, Value: value3470 Key: 97868, Value: value1667 Key: 32336, Value: value3860 Key: 15954, Value: value216 Key: 15955, Value: value2263 Key: 32341, Value: value2487 Key: 56918, Value: value2107 Key: 81494, Value: value4440 Key: 15962, Value: value365 Key: 7770, Value: value3137 Key: 40540, Value: value4865 Key: 48737, Value: value4038 Key: 65122, Value: value2314 Key: 40548, Value: value1921 Key: 24168, Value: value1952 Key: 73320, Value: value3064 Key: 56937, Value: value4535 Key: 40555, Value: value2011 Key: 48752, Value: value619 Key: 81520, Value: value114 Key: 56945, Value: value4986 Key: 81525, Value: value3141 Key: 48757, Value: value3514 Key: 97917, Value: value28 Key: 73340, Value: value3962 Key: 81535, Value: value3685 Key: 81537, Value: value1688 Key: 65155, Value: value3498 Key: 48772, Value: value2994 Key: 56965, Value: value4168 Key: 48773, Value: value4960 Key: 24198, Value: value2085 Key: 73350, Value: value2215 Key: 73353, Value: value567 Key: 16009, Value: value4842 Key: 56972, Value: value1857 Key: 40590, Value: value1701 Key: 73358, Value: value2737 Key: 89745, Value: value2023 Key: 24210, Value: value3396 Key: 40595, Value: value694 Key: 16023, Value: value3033 Key: 56984, Value: value413 Key: 97944, Value: value3984 Key: 40602, Value: value3096 Key: 65180, Value: value1109 Key: 16028, Value: value1927 Key: 65182, Value: value2350 Key: 89759, Value: value4195 Key: 16033, Value: value1868 Key: 65188, Value: value2381 Key: 7845, Value: value2393 Key: 65190, Value: value2117 Key: 65191, Value: value1067 Key: 16040, Value: value2318 Key: 48810, Value: value2804 Key: 40621, Value: value2239 Key: 65199, Value: value1800 Key: 32431, Value: value3468 Key: 89777, Value: value3407 Key: 16049, Value: value371 Key: 24242, Value: value3378 Key: 7859, Value: value870 Key: 89778, Value: value4159 Key: 73397, Value: value3260 Key: 97973, Value: value3785 Key: 48824, Value: value577 Key: 65208, Value: value2012 Key: 81593, Value: value3251 Key: 32441, Value: value954 Key: 57022, Value: value348 Key: 7871, Value: value2956 Key: 97989, Value: value2740 Key: 40646, Value: value1648 Key: 48838, Value: value2648 Key: 97993, Value: value3748 Key: 57036, Value: value3679 Key: 81613, Value: value4184 Key: 7885, Value: value4694 Key: 7886, Value: value573 Key: 24272, Value: value3562 Key: 7892, Value: value329 Key: 48855, Value: value4920 Key: 73432, Value: value2128 Key: 40666, Value: value1614 Key: 24282, Value: value2798 Key: 57052, Value: value4229 Key: 73439, Value: value1159 Key: 7905, Value: value4911 Key: 40673, Value: value1942 Key: 16099, Value: value3499 Key: 98021, Value: value3714 Key: 40677, Value: value1038 Key: 32486, Value: value1863 Key: 98023, Value: value3737 Key: 73449, Value: value2260 Key: 73451, Value: value2137 Key: 98026, Value: value1279 Key: 73453, Value: value2654 Key: 65261, Value: value4299 Key: 32497, Value: value2105 Key: 32500, Value: value4171 Key: 40694, Value: value1099 Key: 16120, Value: value4061 Key: 81656, Value: value476 Key: 32505, Value: value2837 Key: 73464, Value: value4280 Key: 48890, Value: value4456 Key: 98042, Value: value3703 Key: 24317, Value: value2340 Key: 48896, Value: value864 Key: 89857, Value: value1601 Key: 73473, Value: value3090 Key: 89859, Value: value25 Key: 32514, Value: value1477 Key: 98050, Value: value844 Key: 57093, Value: value4073 Key: 16135, Value: value286 Key: 89865, Value: value4823 Key: 40714, Value: value827 Key: 89867, Value: value1631 Key: 98061, Value: value2323 Key: 73487, Value: value3792 Key: 32527, Value: value1423 Key: 98067, Value: value2853 Key: 48917, Value: value1252 Key: 32533, Value: value3523 Key: 32535, Value: value2330 Key: 32536, Value: value1826 Key: 81688, Value: value4862 Key: 98076, Value: value4228 Key: 65310, Value: value790 Key: 40734, Value: value4120 Key: 32542, Value: value4598 Key: 24356, Value: value3356 Key: 48934, Value: value4952 Key: 98086, Value: value4144 Key: 16169, Value: value1499 Key: 65326, Value: value380 Key: 7989, Value: value1416 Key: 65333, Value: value2947 Key: 48956, Value: value55 Key: 40765, Value: value31 Key: 73537, Value: value2461 Key: 24389, Value: value149 Key: 73545, Value: value315 Key: 48968, Value: value3190 Key: 16200, Value: value3569 Key: 98122, Value: value2825 Key: 65356, Value: value781 Key: 98127, Value: value3200 Key: 89934, Value: value3801 Key: 98135, Value: value1603 Key: 16215, Value: value2329 Key: 8023, Value: value4179 Key: 89945, Value: value1225 Key: 24409, Value: value1558 Key: 81754, Value: value593 Key: 32603, Value: value902 Key: 32605, Value: value2594 Key: 65374, Value: value3379 Key: 16223, Value: value1265 Key: 48997, Value: value2143 Key: 32613, Value: value2593 Key: 89959, Value: value4716 Key: 16231, Value: value4449 Key: 65386, Value: value4633 Key: 81773, Value: value4977 Key: 98159, Value: value987 Key: 8050, Value: value1155 Key: 40819, Value: value46 Key: 89975, Value: value4046 Key: 65399, Value: value4210 Key: 8056, Value: value1128 Key: 57208, Value: value2233 Key: 98169, Value: value4274 Key: 24442, Value: value2080 Key: 8059, Value: value2797 Key: 16253, Value: value3054 Key: 40830, Value: value259 Key: 65406, Value: value3668 Key: 73605, Value: value3255 Key: 24456, Value: value2585 Key: 98185, Value: value4483 Key: 57226, Value: value4275 Key: 8076, Value: value959 Key: 98191, Value: value2364 Key: 89998, Value: value1873 Key: 73614, Value: value2669 Key: 24469, Value: value3494 Key: 81815, Value: value262 Key: 8088, Value: value3010 Key: 81822, Value: value4138 Key: 81827, Value: value1363 Key: 49060, Value: value1914 Key: 98215, Value: value2202 Key: 90022, Value: value1133 Key: 49068, Value: value3710 Key: 16301, Value: value1541 Key: 65460, Value: value4682 Key: 24501, Value: value4212 Key: 81847, Value: value3217 Key: 73654, Value: value1878 Key: 98233, Value: value4388 Key: 98235, Value: value219 Key: 8122, Value: value3230 Key: 16314, Value: value4057 Key: 81852, Value: value381 Key: 24511, Value: value3007 Key: 65473, Value: value2397 Key: 81858, Value: value1274 Key: 24517, Value: value840 Key: 90055, Value: value3006 Key: 98246, Value: value2921 Key: 49096, Value: value2116 Key: 73673, Value: value2986 Key: 65482, Value: value471 Key: 73674, Value: value2625 Key: 65486, Value: value522 Key: 81871, Value: value666 Key: 65487, Value: value1321 Key: 16337, Value: value3095 Key: 16342, Value: value311 Key: 73689, Value: value3908 Key: 49113, Value: value1152 Key: 16345, Value: value3839 Key: 65498, Value: value133 Key: 8154, Value: value1807 Key: 81885, Value: value3427 Key: 90080, Value: value1167 Key: 16358, Value: value4582 Key: 40937, Value: value1926 Key: 16362, Value: value1097 Key: 32746, Value: value4352 Key: 65515, Value: value3493 Key: 98287, Value: value805 Key: 65520, Value: value1177 Key: 73712, Value: value3971 Key: 98290, Value: value1411 Key: 98292, Value: value1877 Key: 90109, Value: value195 Key: 65532, Value: value3242 Key: 40956, Value: value4154 .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2023/04/03/checkpoint.html",
            "relUrl": "/2023/04/03/checkpoint.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "vocab for weeks 6-10",
            "content": "A for loop is a type of loop in Java that allows you to iterate over a collection of elements, such as an array. It has a syntax that looks like this: . for (initialization; condition; increment) { // code to be executed } . The enhanced for loop is similar to a for loop, but it allows you to iterate over a collection of elements without having to worry about the index. It has a syntax that looks like this: . for (type element : array) { // code to be executed } . A while loop is a type of loop in Java that continues to execute its code block as long as a specified condition is true. It has a syntax that looks like this: . A do while loop is similar to a while loop, but it guarantees that the code block will be . do { // code to be executed } while (condition); . Nested loops are loops that are placed inside other loops. This allows you to iterate over multiple collections at the same time. For example, you could use a nested for loop to iterate over the elements of two different arrays. . Creating a class in Java involves defining a new data type. In order to create a class, you use the class keyword followed by the name of the class. There are certain naming conventions that should be followed when choosing a name for a class. For example, the name of a class should start with a capital letter, and it should use camel case (e.g. &quot;MyClass&quot;). . A constructor is a special type of method that is used to create and initialize an object. A constructor is called when an object is created, and it has the same name as the class. Unlike other methods, a constructor does not have a return type, not even void. This is because a constructor is not a function that returns a value, but rather it is used to initialize the object. . Accessor methods, also known as getter methods, are used to retrieve the value of a private field in a class. For example, if a class has a private field named name, it might have a getter method named getName() that returns the value of that field. This allows other classes to access the value of the private field without being able to modify it directly. . Mutator methods, also known as setter methods, are used to modify the value of a private field in a class. For example, if a class has a private field named name, it might have a setter method named setName() that allows you to change the value of that field. This allows other classes to modify the value of the private field without being able to access it directly. Setter methods typically have a void return type, because they do not return a value. . Static variables, also known as class variables, are variables that are associated with a class rather than with an individual object. They are defined using the static keyword, and they can be accessed using the class name rather than an object reference. For example: . public class MyClass { public static int count = 0; public static void incrementCount() { count++; } } . n this example, the count variable is a static variable .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/12/15/vocab.html",
            "relUrl": "/2022/12/15/vocab.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Week 10",
            "content": "public int factorial(int n) { if (n == 1) { return 1; // base case } return n * factorial(n - 1); // recursive case } . In this example, the factorial method calculates the factorial of a given number n. The method uses a base case of n == 1, which means that if the input is 1, the method returns 1 without making any further recursive calls. This is important because it provides a stopping point for the recursion. . In the recursive case, the method returns n * factorial(n - 1). This means that the method will call itself with n - 1 as the input. This will continue until the base case is reached, at which point the recursive calls will start returning and the final result will be calculated and returned. . Here is an example of how this method can be used: . int result = factorial(5); // calls factorial(5), which returns 5 * factorial(4) // calls factorial(4), which returns 4 * factorial(3) // calls factorial(3), which returns 3 * factorial(2) // calls factorial(2), which returns 2 * factorial(1) // calls factorial(1), which returns 1 // the recursive calls start returning: // factorial(2) returns 2 * 1 = 2 // factorial(3) returns 3 * 2 = 6 // factorial(4) returns 4 * 6 = 24 // factorial(5) returns 5 * 24 = 120 // the final result is 120 . Recursion can be a powerful tool for solving problems, but it&#39;s important to make sure that the base case is well-defined and that the recursion will eventually come to an end. Otherwise, the method will continue to call itself indefinitely, which can lead to stack overflow and other errors. . Here is an example of recursive code in action through printing numbers . public class RecursiveExample { public static void main(String[] args) { // Print the numbers from 1 to 10 printNumbers(1, 10); } // Recursive function to print the numbers from start to end public static void printNumbers(int start, int end) { // If the start number is greater than the end number, return if (start &gt; end) { return; } // Print the start number System.out.println(start); // Call the function again with the start number incremented by 1 printNumbers(start + 1, end); } } RecursiveExample.main(null); . 1 2 3 4 5 6 7 8 9 10 . World cup recursive hack(extra credit) . public class WorldCup { // Recursive function to simulate a team advancing through the tournament public static void advanceTeam(String teamName, int roundsWon) { // If the team has won the required number of rounds, they have won the tournament if (roundsWon == 7) { System.out.println(teamName + &quot; has won the World Cup!&quot;); return; } // Simulate the team winning a match in the current round System.out.println(teamName + &quot; has won a match in round &quot; + (roundsWon + 1)); // Advance the team to the next round by calling the function again advanceTeam(teamName, roundsWon + 1); } public static void main(String[] args) { // Simulate a team winning the World Cup advanceTeam(&quot;Brazil&quot;, 0); } } WorldCup.main(null); . Brazil has won a match in round 1 Brazil has won a match in round 2 Brazil has won a match in round 3 Brazil has won a match in round 4 Brazil has won a match in round 5 Brazil has won a match in round 6 Brazil has won a match in round 7 Brazil has won the World Cup! . In this program, the advanceTeam() function is called recursively to simulate a team advancing through the tournament by winning matches. Each time the function is called, the number of rounds won is incremented and checked to see if the team has won the required number of rounds to win the tournament. If so, a message is printed and the function returns. Otherwise, the function is called again to simulate the team advancing to the next round. This continues until the team has won the tournament, at which point the function returns and the program ends. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/12/14/week10.html",
            "relUrl": "/2022/12/14/week10.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 8",
            "content": "In Java, a 2D array is an array of arrays. It is used to store a collection of data, where each element in the collection is itself an array. This allows you to store multiple values in a single variable, and access them using a pair of indices. . Here is an example of how to create and initialize a 2D array in Java: . int[][] array = new int[3][4]; // Initialize the array with some values for (int i = 0; i &lt; 3; i++) { for (int j = 0; j &lt; 4; j++) { array[i][j] = i * j; } } . In this example, the 2D array array has 3 rows and 4 columns. It is initialized with the values 0, 0, 0, 0, 0, 1, 2, 3, 0, 2, 4, 6. You can access the elements in the array using a pair of indices, like this: . int element = array[i][j]; . Here, i is the index of the row, and j is the index of the column. This would retrieve the element in the ith row and the jth column of the array. . You can also use a 2D array to store objects, like this: . String[][] array = new String[3][4]; // Initialize the array with some values for (int i = 0; i &lt; 3; i++) { for (int j = 0; j &lt; 4; j++) { array[i][j] = &quot;Element &quot; + i + &quot;,&quot; + j; } } . This creates a 2D array of String objects, with 3 rows and 4 columns. The array is initialized with the values &quot;Element 0,0&quot;, &quot;Element 0,1&quot;, &quot;Element 0,2&quot;, &quot;Element 0,3&quot;, &quot;Element 1,0&quot;, &quot;Element 1,1&quot;, &quot;Element 1,2&quot;, &quot;Element 1,3&quot;, &quot;Element 2,0&quot;, &quot;Element 2,1&quot;, &quot;Element 2,2&quot;, &quot;Element 2,3&quot;. . You can use a 2D array when you need to store a collection of data where each element has multiple values. This can be useful in many applications, such as when working with matrices or images. For more information about 2D arrays in Java, you can refer to the Java documentation. . hacks . public class TwoDArray { private int[][] array; // The 2D array // Constructor for the TwoDArray class public TwoDArray(int rows, int columns) { // Create a new 2D array with the specified number of rows and columns array = new int[rows][columns]; } // Method to set the value of an element in the 2D array public void setValue(int row, int column, int value) { // Set the value of the specified element in the array array[row][column] = value; } // Method to get the value of an element in the 2D array public int getValue(int row, int column) { // Return the value of the specified element in the array return array[row][column]; } // Method to print the 2D array public void printArray() { // Loop through each row in the array for (int i = 0; i &lt; array.length; i++) { // Loop through each column in the row for (int j = 0; j &lt; array[i].length; j++) { // Print the value of the current element System.out.print(array[i][j] + &quot; &quot;); } // Print a newline after each row System.out.println(); } } } . 2D Iterations and Repetition are important concepts in computer science and programming. They involve using loops and other control structures to repeat certain operations or processes multiple times. . One common use of 2D iterations and repetition is to process data in a 2D array. For example, you might use a loop to iterate over each row and column of a 2D array, and then perform some operation on each element of the array. This can be useful for tasks such as searching for a specific value in the array, calculating the sum or average of all elements in the array, or printing the array to the screen. . Another common use of 2D iterations and repetition is to create and manipulate 2D shapes or patterns. For example, you might use a nested loop to generate a grid of squares or a checkerboard pattern. You can also use loops and repetition to animate 2D graphics or simulate complex behaviors, such as the movement of objects in a game. . In addition to 2D arrays, 2D iterations and repetition can also be applied to other data structures, such as 2D linked lists or 2D trees. These data structures can be useful for storing and organizing large or complex datasets, and loops and repetition can be used to efficiently process and manipulate the data. . Overall, 2D iterations and repetition are powerful tools for working with 2D data and creating complex 2D structures and behaviors. They allow for efficient and flexible processing of data, and can be applied to a wide range of applications in computer science and programming. . Aryan Shah Create a method too initialize a 2D array with arbitrary values Here is an example of a method in Java for initializing a 2D array with arbitrary values: . Copy code public void initializeArray(int[][] array, int value) { // Loop through each row in the array for (int i = 0; i &lt; array.length; i++) { // Loop through each column in the row for (int j = 0; j &lt; array[i].length; j++) { // Set the value of the current element to the specified value array[i][j] = value; } } . Create a method too initialize a 2D array with arbitrary values . public void initializeArray(int[][] array, int value) { // Loop through each row in the array for (int i = 0; i &lt; array.length; i++) { // Loop through each column in the row for (int j = 0; j &lt; array[i].length; j++) { // Set the value of the current element to the specified value array[i][j] = value; } } } . Create a method to reverse the 2D array and print out the values . public void initializeArray(int[][] array, int value) { // Loop through each row in the array for (int i = 0; i &lt; array.length; i++) { // Loop through each column in the row for (int j = 0; j &lt; array[i].length; j++) { // Set the value of the current element to the specified value array[i][j] = value; } } } . Create a method that asks for the input of a position and it returns the corresponding value . public int getValueFromPosition(int[][] array) { // Create a Scanner object for reading input Scanner input = new Scanner(System.in); // Ask the user for the row and column of the position System.out.print(&quot;Enter the row of the position: &quot;); int row = input.nextInt(); System.out.print(&quot;Enter the column of the position: &quot;); int column = input.nextInt(); // Return the value of the element at the specified position return array[row][column]; } . Create a method that multiplies each value in a row and then adds all the products together . public int multiplyAndAdd(int[][] array, int row) { // Create a variable for storing the sum of the products int sum = 0; // Loop through each column in the specified row for (int i = 0; i &lt; array[row].length; i++) { // Multiply the current element by the next element in the row int product = array[row][i] * array[row][i + 1]; // Add the product to the sum sum += product; } // Return the sum of the products return sum; } . World cup extra credit hack using concepts understood . public class WorldCup { public static void main(String[] args) { // Create a 2D array to store the teams in each group String[][] groups = new String[][] { {&quot;Brazil&quot;, &quot;Croatia&quot;, &quot;Mexico&quot;, &quot;Cameroon&quot;}, {&quot;Spain&quot;, &quot;Netherlands&quot;, &quot;Chile&quot;, &quot;Australia&quot;}, {&quot;Colombia&quot;, &quot;Greece&quot;, &quot;Ivory Coast&quot;, &quot;Japan&quot;}, {&quot;Uruguay&quot;, &quot;Costa Rica&quot;, &quot;England&quot;, &quot;Italy&quot;}, {&quot;Switzerland&quot;, &quot;Ecuador&quot;, &quot;France&quot;, &quot;Honduras&quot;}, {&quot;Argentina&quot;, &quot;Bosnia and Herzegovina&quot;, &quot;Iran&quot;, &quot;Nigeria&quot;}, {&quot;Germany&quot;, &quot;Portugal&quot;, &quot;Ghana&quot;, &quot;USA&quot;}, {&quot;Belgium&quot;, &quot;Algeria&quot;, &quot;Russia&quot;, &quot;Korea Republic&quot;} }; // Print the teams in each group for (int i = 0; i &lt; groups.length; i++) { System.out.println(&quot;Group &quot; + (i + 1) + &quot;: &quot; + Arrays.toString(groups[i])); } } } WorldCup.main(null); . Group 1: [Brazil, Croatia, Mexico, Cameroon] Group 2: [Spain, Netherlands, Chile, Australia] Group 3: [Colombia, Greece, Ivory Coast, Japan] Group 4: [Uruguay, Costa Rica, England, Italy] Group 5: [Switzerland, Ecuador, France, Honduras] Group 6: [Argentina, Bosnia and Herzegovina, Iran, Nigeria] Group 7: [Germany, Portugal, Ghana, USA] Group 8: [Belgium, Algeria, Russia, Korea Republic] . In this program, a 2D array called groups is created to store the teams in each group. The array has 8 rows, one for each group, and 4 columns, one for each team in each group. The teams in each group are then printed using a for loop. . Note that this is just one way to create and use a 2D array in a World Cup program. There are many other ways to do this depending on the specific requirements of the program. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/12/11/week8.html",
            "relUrl": "/2022/12/11/week8.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "week 7",
            "content": "An array list is a data structure that is similar to an array, but which can grow and shrink in size as needed. Unlike an array, which has a fixed size, an array list can be dynamically resized to accommodate more or fewer elements. This makes it a useful data structure for applications where the number of elements is not known in advance, or where the data set may change over time. . Array lists are typically implemented using arrays, with additional logic to handle resizing the underlying array when necessary. This means that array lists have many of the same properties as arrays, including random access to elements and good performance for common operations like inserting and deleting elements. However, they also have some additional overhead associated with managing the underlying array, which can make them slower than arrays in some cases. . Array lists are commonly used in applications where the data set is not known in advance, or where it is expected to change over time. They are also useful when the data needs to be sorted, since array lists can be easily sorted using standard sorting algorithms. . Specifically In Java, an array list is a class that is part of the Java Collection Framework. It is implemented as an array of objects, with additional logic to resize the array as needed. To create an array list, you would use the following syntax: . ArrayList&lt;Type&gt; list = new ArrayList&lt;&gt;(); . Here, Type is the type of elements that the array list will hold, and list is the name of the array list object. Once you have created the array list, you can add elements to it using the add() method, like this: . list.add(element); . You can access elements in the array list using the get() method, like this: . Type element = list.get(index); . Here, index is the index of the element you want to retrieve. Array lists are indexed starting from 0, so the first element in the array list has an index of 0, the second element has an index of 1, and so on. . Array lists in Java support many of the same operations as arrays, including adding, removing, and accessing elements. However, they also provide additional methods for managing the size of the array list and for sorting the elements in the array list. For more information, you can refer to the Java documentation for the ArrayList class. . Hacks . import java.util.*; public class JavaExample { public static void main(String args[]){ ArrayList&lt;String&gt; arraylist = new ArrayList&lt;String&gt;(); arraylist.add(&quot;AA&quot;); arraylist.add(&quot;ZZ&quot;); arraylist.add(&quot;CC&quot;); arraylist.add(&quot;FF&quot;); /*Unsorted List: ArrayList content before sorting*/ System.out.println(&quot;Before Sorting:&quot;); for(String str: arraylist){ System.out.println(str); } /* Sorting in decreasing order*/ Collections.sort(arraylist, Collections.reverseOrder()); /* Sorted List in reverse order*/ System.out.println(&quot;ArrayList in descending order:&quot;); for(String str: arraylist){ System.out.println(str); } } } JavaExample.main(null); . Before Sorting: AA ZZ CC FF ArrayList in descending order: ZZ FF CC AA . // Java Program for copying one ArrayList to another import java.io.*; import java.util.ArrayList; class GFG { public static void main(String[] args) { // creation of ArrayList of Integers ArrayList&lt;Integer&gt; gfg = new ArrayList&lt;&gt;(); // adding elements to first ArrayList gfg.add(10); gfg.add(21); gfg.add(22); gfg.add(35); // Assigning the first reference to second ArrayList&lt;Integer&gt; gfg2 = gfg; // Iterating over second ArrayList System.out.println( &quot;--Iterating over the second ArrayList-&quot;); for (Integer value : gfg2) { System.out.println(value); } // here we changed the third element to 23 // we changed in second list and you can // see the same change in the first Arraylist gfg2.set(2, 23); System.out.println(&quot;third element of first list =&quot; + gfg.get(2)); System.out.println(&quot;third element of second list =&quot; + gfg2.get(2)); } } GFG.main(null); .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/12/06/arrayhw.html",
            "relUrl": "/2022/12/06/arrayhw.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt; &lt;/script&gt; &lt;/head&gt; &lt;style&gt; body { margin: 0; padding: 0; } &lt;/style&gt; &lt;body&gt; &lt;h2&gt; Live date and time &lt;/h2&gt; &lt;h3 id = &quot;a&quot;&gt;&lt;/h3&gt; &lt;h2&gt; World Population &lt;/h2&gt; &lt;h3 id = &quot;population&quot;&gt; &lt;/h3&gt; &lt;input id=&quot;long&quot; placeholder=&quot;Your country&quot;&gt; &lt;br&gt; &lt;br&gt; &lt;button onclick=&quot;sub()&quot; class=out id= &quot;button&quot;&gt;enter&lt;/button&gt; &lt;br&gt; &lt;h5 id=&quot;pop&quot;&gt;&lt;/h5&gt; &lt;script&gt; /*setTimeout(function () { location.reload(true); }, 4000);*/ var A = document.getElementById(&quot;a&quot;); var Population = document.getElementById(&quot;population&quot;); function animation() { var date = new Date(); var dateNew = date.toLocaleString(); A.innerHTML = dateNew; } setInterval(animation, 1000); const settings = { &quot;async&quot;: true, &quot;crossDomain&quot;: true, &quot;url&quot;: &quot;https://world-population.p.rapidapi.com/worldpopulation&quot;, &quot;method&quot;: &quot;GET&quot;, &quot;headers&quot;: { &quot;X-RapidAPI-Key&quot;: &quot;9205057203msh04a5e5cadaa01c8p11274ejsnf67dea2bb043&quot;, &quot;X-RapidAPI-Host&quot;: &quot;world-population.p.rapidapi.com&quot; } }; $.ajax(settings).done(function (response) { console.log(response); var worldPopulation = response.body.world_population; function populationAnimation() { worldPopulation++; population.innerHTML = worldPopulation; worldPopulation++; population.innerHTML = worldPopulation; worldPopulation--; population.innerHTML = worldPopulation; worldPopulation++; population.innerHTML = worldPopulation; worldPopulation--; population.innerHTML = worldPopulation; } setInterval(populationAnimation, 250); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . evalmachine.&lt;anonymous&gt;:1 &lt;!DOCTYPE html&gt; ^ SyntaxError: Unexpected token &lt; at new Script (vm.js:79:7) at createScript (vm.js:251:10) at Object.runInThisContext (vm.js:303:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at process.emit (events.js:182:13) at emit (internal/child_process.js:812:12) at process._tickCallback (internal/process/next_tick.js:63:19) .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/09/worldometer.html",
            "relUrl": "/2022/11/09/worldometer.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "College Notes",
            "content": "Week 2 OOP . public: Accessible in all classes in your application. . protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). . private: Accessible only within the class in which it is defined. . default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. . The return type: The data type of the value returned by the method or void if it does not return a value . Method Name: The rules for field names apply to method names as well, but the convention is a little different. . Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). . Exception list: The exceptions you expect the method to throw. You can specify these exception(s). . Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. . college board mcq corrections .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/08/Collegeboard.html",
            "relUrl": "/2022/11/08/Collegeboard.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "week 1-Primitives",
            "content": "Casting . The process of converting one data type to another is called casting. Casting is often necessary when a function returns a data of type in different form then we need to perform an operation. Under certain circumstances Type conversion can be carried out automatically, in other cases it must be “forced” manually (explicitly). For example, the read() member function of the standard input stream (System.in) returns an int. If we want to store data of type int returned by read() into a variable of char type, we need to cast it : . import java.util.Scanner; public class binaryAddition { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter binary input: &quot;); String input1 = sc.nextLine(); System.out.println(input1); System.out.println(&quot;Enter another binary input: &quot;); String input2 = sc.nextLine(); System.out.println(input2); int sum = Integer.parseInt(input1, 2) + Integer.parseInt(input2, 2); System.out.println(); System.out.println(&quot;Your output is: &quot;); System.out.println(Integer.toBinaryString(sum)); } } binaryAddition.main(null); . Enter binary input: 1001 Enter another binary input: 0010 Your output is: 1011 . Wide type casting example . class Main { public static void main(String[] args) { // create int type variable int num = 10; System.out.println(&quot;The integer value: &quot; + num); // convert into double type double data = num; System.out.println(&quot;The double value: &quot; + data); } } Main.main(null) . The integer value: 10 The double value: 10.0 . Narrow type casting . Casting with rounding . The English meaning of truncate is to trim or prune, or cut something and the process of trimming is called truncation. In the computer science field, the term is often used in reference to data-types or variables (like String, floating-point numbers, etc.). It is a way of approximation. Let&#39;s discuss what is truncation in Java and how can we truncate a floating or double-type number through a Java program. . Truncation In Java programming, truncation means to trim some digits of a float or double-type number or some characters of a string from the right. We can also truncate the decimal portion completely that makes it an integer. Remember that after truncation, the number will not be round to its nearest value. Hence, truncation is a way of approximation. . It is usually used in computing (especially in database and programming) when division is done with integers and the results must be an integer. . class Main { public static void main(String[] args) { // create double type variable double num = 10.99; System.out.println(&quot;The double value: &quot; + num); // convert into int type int data = (int)num; System.out.println(&quot;The integer value: &quot; + data); } } Main.main(null) . The double value: 10.99 The integer value: 10 . Operator Operation . Addition | Subtraction | Multiplication / Division % Modulo Operation (Remainder after division) | . Homework . 2006 FRQ 2a and 3a . 2006 FRQ College Board direct questions . frq scoring guidlines . // 2A public double purchasePrice(double x){ x *= 1.3; return x; } purchasePrice(6.50); . 8.450000000000001 . Casting truncated . public class NearestInt //class name { public static void main(String[] args) { double number = 5.0 / 3; int nearestInt = (int)(number + 0.5); System.out.println(&quot;5.0/3 = &quot; + number); System.out.println(&quot;5/3 truncated: &quot; + (int)number ); System.out.println(&quot;5.0/3 rounded to nearest int: &quot; + nearestInt); double negNumber = -number; int nearestNegInt = (int)(negNumber - 0.5); System.out.println(&quot;-5.0/3 rounded to nearest negative int: &quot; + nearestNegInt); } } NearestInt.main(null) . 5.0/3 = 1.6666666666666667 5/3 truncated: 1 5.0/3 rounded to nearest int: 2 -5.0/3 rounded to nearest negative int: -2 . // 3A public class Customer { private String name; private int id; public Customer(String name, int idNum){ this.name = name; this.id = idNum; }; public String getName(){ return name; }; public int getID(){ return id; }; public void compareCustomer(Customer x){ System.out.println(id - x.id); }; } Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); c1.compareCustomer(c1); c1.compareCustomer(c2); c1.compareCustomer(c3); . 0 -1 -2 . Wrapper Classes . Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects. . The table below shows the primitive type and the equivalent wrapper class: . Why Wrap It??? . Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects): . They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value). The classes in java.util package handles only objects and hence wrapper classes help in this case also. Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types. An object is needed to support synchronization in multithreading. . Primitive Data Type Wrapper Class . KEY . byte Byte short Short int Integer long Long float Float double Double boolean Boolean char Character . Creating wrapper objects . public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = &#39;A&#39;; System.out.println(myInt); System.out.println(myDouble); System.out.println(myChar); } } Main.main(null); . 5 5.99 A . Concatenation . Concatenation is the process of combining two or more strings to form a new string by subsequently appending the next string to the end of the previous strings. In Java, two strings can be concatenated by using the + or += operator, or through the concat() method, defined in the java. lang. String class . Example with strings . class Main{ public static void main(String args[]){ String s=&quot; Sachin&quot;+&quot; Tendulkar&quot;; System.out.println(s);//Sachin Tendulkar String f=&quot;Aryan&quot;+&quot; Maulik&quot;+&quot; Shah&quot;; System.out.println(f); // Concatenation with direct variables String g=f+s; System.out.println(g); } } Main.main(null) . Sachin Tendulkar Aryan Maulik Shah Aryan Maulik Shah Sachin Tendulkar . Also Possible to do Concatenation with integers into a string . class Main{ public static void main(String args[]){ String s=20+30+&quot; Aryan &quot;+95+40; System.out.println(s); } } Main.main(null) . 50 Aryan 9540 .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/07/week1.html",
            "relUrl": "/2022/11/07/week1.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 6",
            "content": "Array in java is a group of like-typed variables referred to by a common name. Arrays in Java work differently than they do in C/C++. Following are some important points about Java arrays. . In Java, all arrays are dynamically allocated. (discussed below) Arrays are stored in contagious memory [consecutive memory locations]. Since arrays are objects in Java, we can find their length using the object property length. This is different from C/C++, where we find length using sizeof. A Java array variable can also be declared like other variables with [] after the data type. The variables in the array are ordered, and each has an index beginning from 0. Java array can also be used as a static field, a local variable, or a method parameter. The size of an array must be specified by int or short value and not long. The direct superclass of an array type is Object. Every array type implements the interfaces Cloneable and java.io.Serializable. This storage of arrays helps us randomly accessing the elements of an array [Support Random Access]. The size of the array cannot be altered(once initialized). However, an array reference can be made to point to another array. An array can contain primitives (int, char, etc.) and object (or non-primitive) references of a class depending on the definition of the array. In the case of primitive data types, the actual values are stored in contiguous memory locations. . dataType[] arrayName; . For example, if you wanted to create an array that would hold integer values, you could declare a variable called numbers like this: . int[] numbers; . Once you have declared the array, you need to allocate memory for it using the new keyword, like this: . numbers = new int[size]; . Here, size is an integer value that specifies the number of elements that the array will hold. For example, if you wanted to create an array that could hold 10 integer values, you would write: . numbers = new int[10]; . Hack 1 Swap the first and last element in the array . import java.util.Arrays; import java.util.*; public class ArrayMethods { public static void main(String[] args) { swapping(); } static void swapping() { int[] array = {20, 30, 40}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(array)); int x = array[0]; array[0] = array[array.length-1]; array[array.length-1] = x; System.out.println(&quot;New array after swapping the first and last elements: &quot;+Arrays.toString(array)); } } ArrayMethods.main(null) . Original Array: [20, 30, 40] New array after swapping the first and last elements: [40, 30, 20] . Hack to Evens in array . import java.util.Arrays; import java.util.*; public class ArrayMethods { public static void main(String[] args) { evens(); } static void evens(){ int[] number = {6, 8, 11, 16, 21, 23}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(number)); for(int i=0;i&lt;number.length;i++){ if(number[i]%2==0){ System.out.println(number[i]); } } } ArrayMethods.main(null) . Hack 3 check order (extra credit) . public class ArrayMethods { public static boolean isSorted(int[] a) { int i; for(i = 0; i &lt; a.length; i ++);{ if (a[i] &lt; a[i+1]) { return true; } else { return false; } } } public static void main(String[] args) { int ar[] = {3,5,6,7}; System.out.println(isSorted(ar)); } } . Hack 4 checking duplicates in array (extra credit) . public class ArrayMethods{ public static void main(String[] args) { duplicate(); } public static duplicates { int[] number = {6, 8, 11, 16, 21, 23}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(number)); for (int i = 0; i &lt; names.length; i++) { for (int j = i + 1 ; j &lt; names.length; j++) { if (names[i].equals(names[j])) { // got the duplicate element } } } } } . week 6 arrays .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week6.html",
            "relUrl": "/2022/11/06/week6.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Writing classes-Week 5",
            "content": "Class is a set of object which shares common characteristics/ behavior and common properties/ attributes. Class is not a real world entity. It is just a template or blueprint or prototype from which objects are created. Class does not occupy memory. Class is a group of variables of different data types and group of methods. . A class in java can contain: • data member • method • constructor • nested class and • interface . A class is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order: . Modifiers: A class can be public or has default access (Refer this for details). Class keyword: class keyword is used to create a class. Class name: The name should begin with an initial letter (capitalized by convention). Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent. Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface. Body: The class body is surrounded by braces, { }. Constructors are used for initializing new objects. Fields are variables that provide the state of the class and its objects, and methods are used to implement the behavior of the class and its objects. . Homework Assigned . FRQ 2021 1a 3a . 2021 frq . //1a public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) //check if substring are equal to secret count++; } return count * (guess.length() * guess.length()); } . //3a public void addMembers(String[] names, int gradYear) { for(String name : names) memberList.add(new MemberInfo(name, gradYear, true)); //included parameters here for members } . Why are there no returns for constructors . What actually happens with the constructor is that the runtime uses type data generated by the compiler to determine how much space is needed to store an object instance in memory, be it on the stack or on the heap. . This space includes all members variables and the vtbl. After this space is allocated, the constructor is called as an internal part of the instantiation and initialization process to initialize the contents of the fields. . Then, when the constructor exits, the runtime returns the newly-created instance. So the reason the constructor doesn&#39;t return a value is because it&#39;s not called directly by your code, it&#39;s called by the memory allocation and object initialization code in the runtime. . Its return value (if it actually has one when compiled down to machine code) is opaque to the user - therefore, you can&#39;t specify it. . Class naming conventions . Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML). . Examples . class Raster; class ImageSprite; . Accessors . The accessor method’s name is driven by the word “access” which allows the user to access the private information in a class. . If you have ever heard of the “get” method or “getters”, it is the same thing as accessors. The getters retrieve the private variables and constants to access outside the scope of a class. . public class Student { private String name; public String getName() { return name; } } . Mutators . The mutator method in Java is driven by the word “mutate”, which literally means to modify. Mutators allow the users to set/mutate the value of private variables of a class object. . In the object-oriented programming context, the “set” method or “setters” are also known as mutators. Setters facilitate encapsulation as private data members can not be modified directly. So setter methods/mutators are used to update a variable’s value outside the class scope. . public class Student { private String name; public void setName(String name) { this.name = name; } } . Why do we need accessors and mutators? . We need getters and setters or accessors and mutators to protect sensitive information in a class. The information is protected from Illegal use by using these standard methods. Moreover, the data set in a mutator can also be validated if it fulfils all the requirements of a program. . Using Static/class variables . class Main { static int count=0; public void increment() { count++; } public static void main(String args[]) { VariableDemo obj1=new VariableDemo(); VariableDemo obj2=new VariableDemo(); obj1.increment(); obj2.increment(); System.out.println(&quot;Obj1: count is=&quot;+obj1.count); System.out.println(&quot;Obj2: count is=&quot;+obj2.count); } } Main.main(null) . Access Modifiers . Access Specifier Inside Class Inside Package Outside package subclass Outside package Private Yes No No No Default Yes Yes No No Protected Yes Yes Yes No Public Yes Yes Yes Yes .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week5.html",
            "relUrl": "/2022/11/06/week5.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Week 2",
            "content": "Java Math class . provides several methods to work on math calculations like min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc. . Unlike some of the StrictMath class numeric methods, all implementations of the equivalent function of Math class can&#39;t define to return the bit-for-bit same results. This relaxation permits implementation with better-performance where strict reproducibility is not required. . If the size is int or long and the results overflow the range of value, the methods addExact(), subtractExact(), multiplyExact(), and toIntExact() throw an ArithmeticException. . For other arithmetic operations like increment, decrement, divide, absolute value, and negation overflow occur only with a specific minimum or maximum value. It should be checked against the maximum and minimum value as appropriate. . public class JavaMathExample1 { public static void main(String[] args) { double x = 28; double y = 4; // return the maximum of two numbers System.out.println(&quot;Maximum number of x and y is: &quot; +Math.max(x, y)); // return the square root of y System.out.println(&quot;Square root of y is: &quot; + Math.sqrt(y)); //returns 28 power of 4 i.e. 28*28*28*28 System.out.println(&quot;Power of x and y is: &quot; + Math.pow(x, y)); // return the logarithm of given value System.out.println(&quot;Logarithm of x is: &quot; + Math.log(x)); System.out.println(&quot;Logarithm of y is: &quot; + Math.log(y)); // return the logarithm of given value when base is 10 System.out.println(&quot;log10 of x is: &quot; + Math.log10(x)); System.out.println(&quot;log10 of y is: &quot; + Math.log10(y)); // return the log of x + 1 System.out.println(&quot;log1p of x is: &quot; +Math.log1p(x)); // return a power of 2 System.out.println(&quot;exp of a is: &quot; +Math.exp(x)); } } JavaMathExample1.main(null) . Maximum number of x and y is: 28.0 Square root of y is: 2.0 Power of x and y is: 614656.0 Logarithm of x is: 3.332204510175204 Logarithm of y is: 1.3862943611198906 log10 of x is: 1.4471580313422192 log10 of y is: 0.6020599913279624 log1p of x is: 3.367295829986474 exp of a is: 1.446257064291475E12 . OOP notes . As the name suggests, Object-Oriented Programming or OOPs refers to languages that use objects in programming, they use objects as a primary source to implement what is to happen in the code. Objects are seen by the viewer or user, performing tasks assigned by you. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc. in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function. . Let us discuss prerequisites by polishing concepts of method declaration and message passing. Starting off with the method declaration, it consists of six components: . Access Modifier: Defines the access type of the method i.e. from where it can be accessed in your application. In Java, there are 4 types of access specifiers: public: Accessible in all classes in your application. protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). private: Accessible only within the class in which it is defined. default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. The return type: The data type of the value returned by the method or void if it does not return a value. Method Name: The rules for field names apply to method names as well, but the convention is a little different. Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). Exception list: The exceptions you expect the method to throw. You can specify these exception(s). Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. . Quizlet . Group Goblin Homework . /* import java.util.Random; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } import java.util.Random; public class Duel { public static void fight(Goblin goblin1, Goblin goblin2, Double rand) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { for(int i = 0; i &lt; 5; i++) { if (rand &gt; goblin1.getHitChance()) { System.out.println(&quot;Missed&quot;); } else { System.out.println(&quot;Hit&quot;); break; }} goblin1.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(2); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); Random x = new Random(); double rand = x.nextDouble(); fight(goblin1, goblin2, rand); } } Duel.main(null); gob.txt 3 KB .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/week2.html",
            "relUrl": "/2022/11/06/week2.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "week 3-Boolean and Conditionals",
            "content": "Implementing Boolean into if else statements . boolean isTired = true; // setting boolean to true. if(isTired) { // isTired is the same thing as if(isTired == True) System.out.println(&quot;Go to sleep&quot;); } else { System.out.println(&quot;KeepWorking&quot;); } . Go to sleep . if-elseif-elseif-elsif-else statement, 5 or more conditions . int day= 4; if(day==1){ System.out.println(&quot;Sunday&quot;); } else if(day==2){ System.out.println(&quot;Monday&quot;); } else if(day==3){ System.out.println(&quot;Tuesday&quot;); } else if(day==4){ System.out.println(&quot;Wednesday&quot;); } else if(day==5){ System.out.println(&quot;Thursday&quot;); } else if(day==6){ System.out.println(&quot;Friday&quot;); } else if(day==7){ System.out.println(&quot;Saturday&quot;); } . Wednesday . int day=3; switch(day){ case 1: System.out.println(&quot;Sunday&quot;); break; case 2: System.out.println(&quot;Monday&quot;); break; case 3: System.out.println(&quot;Tuesday&quot;); break; case 4: System.out.println(&quot;Wednesday&quot;); break; case 5: System.out.println(&quot;Thursday&quot;); break; case 6: System.out.println(&quot;Friday&quot;); break; case 7: System.out.println(&quot;Saturday&quot;); break; } . Tuesday . int x = 4, y = 3; if (!(x &lt; 3 || y &gt; 2)) { System.out.println(&quot;True&quot;); } else { System.out.println(&quot;False&quot;); } . Now let&#39;s switch up! Time to make things easier and use switch case . A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each switch case. . int x = 4, y = 3; if (!(x &lt; 3 &amp;&amp; y &gt; 2)) { System.out.println(&quot;True); } else { System.out.println(&quot;False&quot;); } . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2) . Basic logic gates There are seven basic logic gates: AND, OR, XOR, NOT, NAND, NOR, and XNOR. . AND | OR | XOR | NOT | NAND | NOR | XNOR . The AND gate is so named because, if 0 is called &quot;false&quot; and 1 is called &quot;true,&quot; the gate acts in the same way as the logical &quot;and&quot; operator. The following illustration and table show the circuit symbol and logic combinations for an AND gate. (In the symbol, the input terminals are at left and the output terminal is at right.) The output is &quot;true&quot; when both inputs are &quot;true.&quot; Otherwise, the output is &quot;false.&quot; In other words, the output is 1 only when both inputs one AND two are 1. . Homework . 2009 frq 3b 2017 frq 1b 2019 frq 2b . College Board 2009 frq . College Board 2017 frq . College Board 2019 frq . //2009 3b private int getChargingCost(int startHour, int chargeTime) { int cost = 0; int rIndex = startHour; int hoursRemaining = chargeTime; while(hoursRemaining &gt; 0) { cost += rateTable[rIndex]; rIndex++; if(rIndex == rateTable.length) rIndex = 0; hoursRemaining--; } return cost; //final cost returned } . //2017 1b public boolean isStrictlyIncreasing() { for (int i = 0; i &lt; digitList.size()-1; i++) //checks if values increasing { if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()) { return false; } } return true; } . //2019 frq 2b public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; //add one to weekday if(weekday == 7) weekday = 0; //set to 0 } return weekday; } . The Truth Table . The following table (also called a truth table) shows the result for P &amp;&amp; Q when P and Q are both expressions that can be true or false. An expression involving logical operators like (P &amp;&amp; Q) evaluates to a Boolean value, true or false. As you can see below the result of P &amp;&amp; Q is only true if both P and Q are true. . Compound Boolean Expression . What if you want to go out and your parents say you can go out if you clean your room and do your homework? Run the code below and try different values for cleanedRoom and didHomework and see what they have to be for it to print You can go out. . public class Main { public static void main(String[] args) { boolean cleanedRoom = true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework) { System.out.println(&quot;You can go out&quot;); } else { System.out.println(&quot;No, you can&#39;t go out&quot;); } } } Main.main(null) . No, you can&#39;t go out .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/11/06/Javabooleanif.html",
            "relUrl": "/2022/11/06/Javabooleanif.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "conditionals and booleans",
            "content": "//Part A // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) { return getTime().overlapsWith(other.getTime()); } . //Part B // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) { int i = 0; while (i &lt; apptList.size()) if (((Appointment)apptList.get(i)).conflictsWith(appt)) apptList.remove(i); else i++; 1 } . //Part C // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) { if (emergency) { clearConflicts(appt); apptList.add(appt); return true; } for (int i = 0; i &lt; apptList.size(); i++) if (((Appointment)apptList.get(i)).conflictsWith(appt)) return false; apptList.add(appt); return true; } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/23/conditionalboolean.html",
            "relUrl": "/2022/10/23/conditionalboolean.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "array list",
            "content": "ArrayList in Java . ArrayList can grow and shrink automatically based on the addition and removal of elements. ArrayList can contain duplicate elements ArrayList maintains the insertion order, which means the elements appear in the same order in which they are inserted. ArrayList is non synchronized. However you can make it synchronized. . One can add elements by using Add new elements to an ArrayList using the add() method. . check if an ArrayList is empty using the isEmpty() method. . access the element at a particular index in an ArrayList using the get() method . modify the element at a particular index in an ArrayList using the set() method. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); cars.add(&quot;Breakfast: Protein Pancakes and protein shake&quot;); cars.add(&quot;Lunch: Carbs- pasta arriabata with legumes&quot;); cars.add(&quot;Snack: Peanut butter shake and bannana&quot;); cars.add(&quot;Dinner: Mexican bown with beans&quot;); Collections.sort(cars); for (String i : cars) { System.out.println(i); } } } Main.main(null) . Breakfast: Protein Pancakes and protein shake Dinner: Mexican bown with beans Lunch: Carbs- pasta arriabata with legumes Snack: Peanut butter shake and bannana . Practice towards array item changes, removal, etc. . import java.util.ArrayList; import java.util.Collections; public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); cars.add(&quot;Breakfast: Protein Pancakes and protein shake&quot;); cars.add(&quot;Lunch: Carbs- pasta arriabata with legumes&quot;); cars.add(&quot;Snack: Peanut butter shake and bannana&quot;); cars.add(&quot;Dinner: Mexican bown with beans&quot;); Collections.sort(cars); cars.set(2, &quot;Snack is now popcorn&quot;); //set changes the index value 2 which is the third item in the array in this case snack cars.size(); for (String i : cars) { System.out.println(i); } } } Main.main(null) . Breakfast: Protein Pancakes and protein shake Dinner: Mexican bown with beans Snack is now popcorn Snack: Peanut butter shake and bannana . Now I will create a array geared towards usage in my PBL . import java.util.ArrayList; import java.util.Collections; import java.util.Scanner; public class workoutplan { public static void main(String[] args) { ArrayList days= new ArrayList(); days.add(&quot;Day 1&quot;); days.add(&quot;Day 2&quot;); days.add(&quot;Day 3&quot;); days.add(&quot;day 4&quot;); System.out.println(days); Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter Day 1-4:&quot;); String usr = myObj.nextLine(); // Read user input System.out.println(&quot;Day chosen &quot; + usr); // Output user input int num=Integer.parseInt(usr); if(num == 1){ System.out.println(&quot;Todays push&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Bench press 6 sets&quot;); lifts.add(&quot; 2: Push ups 30 reps 3 sets&quot;); lifts.add(&quot; 3: shoulder press 5 sets&quot;); lifts.add(&quot; 4: Incline bench&quot;); lifts.add(&quot; 5: Incline Dumbell press&quot;); lifts.add(&quot; 6: Rest&quot;); lifts.add(&quot; 7: Normal dumbell press&quot;); lifts.add(&quot; 8: Chest machine&quot;); lifts.add(&quot; 9: Incline chest machine&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } if(num == 2){ System.out.println(&quot;Todays push&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Pull up 6 sets&quot;); lifts.add(&quot; 2: Bicept curls 10 reps 3 sets&quot;); lifts.add(&quot; 3: tricept extensions 5 sets&quot;); lifts.add(&quot; 4: Back Machine 5 sets&quot;); lifts.add(&quot; 5: Lat pulldowns 5 sets&quot;); lifts.add(&quot; 6: chin up 5 sets&quot;); lifts.add(&quot; 7: Rest&quot;); lifts.add(&quot; 8: Dumbell Rows&quot;); lifts.add(&quot; 9: Bicept machine&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } if(num == 3){ System.out.println(&quot;Todays a rest day!!&quot;); } if(num == 4){ System.out.println(&quot;Todays List&quot;); ArrayList&lt;String&gt; lifts = new ArrayList&lt;String&gt;(); lifts.add(&quot; 1: Squats 6 sets&quot;); lifts.add(&quot; 2: Lunges 10 reps 3 sets&quot;); lifts.add(&quot; 3: Deadlifts 5 sets&quot;); lifts.add(&quot; 4: Leg press&quot;); lifts.add(&quot; 5: Jump lunges&quot;); lifts.add(&quot; 6: Deadlifts&quot;); lifts.add(&quot; 7: Leg machine&quot;); lifts.add(&quot; 8: Hip thrusts&quot;); for(int i=0; i&lt;days.size(); i++ ) { System.out.println(lifts.get(i)); System.out.println(&quot;rest&quot;); } } } } workoutplan.main(null); /*Scanner onj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Add day 5 for extra work out: Y or N&quot;); String five = onj.nextLine(); // Read user input if(five.equals(&quot;Y&quot;)){ days.add(&quot;day 5&quot;); system.out.println(days) } else{ system.out.println(&quot;Don&#39;t be lazy SMH&quot;) } */ . [Day 1, Day 2, Day 3, day 4] Enter Day 1-4: Day chosen 3 Todays a rest day!! .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/10/arraylist.html",
            "relUrl": "/2022/10/10/arraylist.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Title",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics dove = new Pics(&quot;dove&quot;, &quot;png&quot;); // dove.greyscale(); // dove.redscale(); //dove.greenscale(); //dove.bluescale(); // dove.printStats(&quot;Original&quot;); // dove.resize(33); // dove.printStats(&quot;Scaled&quot;); dove.convertToAscii(); } } Pics.main(null); . import java.awt.*; import java.awt.image.BufferedImage; import java.io.*; import javax.imageio.ImageIO; import javax.swing.JFrame; public class GrayScale { BufferedImage image; int width; int height; public GrayScale() { try { File input = new File(&quot;tate.jpeg&quot;); image = ImageIO.read(input); width = image.getWidth(); height = image.getHeight(); for(int i=0; i&lt;height; i++) { for(int j=0; j&lt;width; j++) { Color c = new Color(image.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); Color newColor = new Color(red+green+blue, red+green+blue,red+green+blue); image.setRGB(j,i,newColor.getRGB()); } } File ouptut = new File(&quot;grayscale.jpg&quot;); ImageIO.write(tate, &quot;jpeg&quot;, output); } catch (Exception e) {} } static public void main(String args[]) throws Exception { GrayScale obj = new GrayScale(); } } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/10/02/greyscale.html",
            "relUrl": "/2022/10/02/greyscale.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Title",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { int count = 100, num1 = 0, num2 = 1; System.out.print(&quot;Fibonacci Series of &quot;+count+&quot; numbers:&quot;); for (int i = 1; i &lt;= count; ++i) { System.out.print(num1+&quot; &quot;); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ int sumOfPrevTwo = num1 + num2; num1 = num2; num2 = sumOfPrevTwo; } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Input In [1] * Creator: Nighthawk Coding Society ^ IndentationError: unexpected indent . recursive fibo . Finding the nth digit in fibo . // Fibonacci Series using Recursion finding the nth digit class fibonacci { static int fib(int n) { if (n &lt;= 1) { return n; } else { return fib(n - 1) + fib(n - 2); } } public static void main(String args[]) { int n = 9; System.out.println(fib(n)); System.out.println(fib(7)); } } /* This code is contributed by Rajat Mishra */ fibonacci.main(null) . 34 13 . Fibonacci notes: . In mathematics, the Fibonacci numbers, commonly denoted Fₙ, form a sequence, the Fibonacci sequence, in which each number is the sum of the two preceding ones. The sequence commonly starts from 0 and 1, although some authors omit the initial terms and start the sequence from 1 and 1 or from 1 and 2. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/25/fibo_and_jsquiz.html",
            "relUrl": "/2022/09/25/fibo_and_jsquiz.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Title",
            "content": "Takeaways . It is necessary for me to have a good state of mind to maximize my efficiency | A happy coder is the best coder | . I am grateful for...... . 1) A family 2) Good Friends 3) A good education and support system 4) Being brought up in a good community .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/11/humanday.html",
            "relUrl": "/2022/09/11/humanday.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Java week 3",
            "content": "Implementing Boolean into if else statements . boolean isTired = true; // setting boolean to true. if(isTired) { // isTired is the same thing as if(isTired == True) System.out.println(&quot;Go to sleep&quot;); } else { System.out.println(&quot;KeepWorking&quot;); } . Go to sleep . if-elseif-elseif-elsif-else statement, 5 or more conditions . int day= 4; if(day==1){ System.out.println(&quot;Sunday&quot;); } else if(day==2){ System.out.println(&quot;Monday&quot;); } else if(day==3){ System.out.println(&quot;Tuesday&quot;); } else if(day==4){ System.out.println(&quot;Wednesday&quot;); } else if(day==5){ System.out.println(&quot;Thursday&quot;); } else if(day==6){ System.out.println(&quot;Friday&quot;); } else if(day==7){ System.out.println(&quot;Saturday&quot;); } . Wednesday . Now let&#39;s switch up! Time to make things easier and use switch case . A switch statement allows a variable to be tested for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each switch case. . int day=3; switch(day){ case 1: System.out.println(&quot;Sunday&quot;); break; case 2: System.out.println(&quot;Monday&quot;); break; case 3: System.out.println(&quot;Tuesday&quot;); break; case 4: System.out.println(&quot;Wednesday&quot;); break; case 5: System.out.println(&quot;Thursday&quot;); break; case 6: System.out.println(&quot;Friday&quot;); break; case 7: System.out.println(&quot;Saturday&quot;); break; } . Tuesday . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2) . int x = 4, y = 3; if (!(x &lt; 3 || y &gt; 2)) { System.out.println(&quot;True&quot;); } else { System.out.println(&quot;False&quot;); } . int x = 4, y = 3; if (!(x &lt; 3 &amp;&amp; y &gt; 2)) { System.out.println(&quot;True); } else { System.out.println(&quot;False&quot;); } .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/11/Javabooleanif.html",
            "relUrl": "/2022/09/11/Javabooleanif.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Notes",
            "content": "Week 2 OOP . public: Accessible in all classes in your application. . protected: Accessible within the package in which it is defined and in its subclass(es) (including subclasses declared outside the package). . private: Accessible only within the class in which it is defined. . default (declared/defined without using any modifier): Accessible within the same class and package within which its class is defined. . The return type: The data type of the value returned by the method or void if it does not return a value . Method Name: The rules for field names apply to method names as well, but the convention is a little different. . Parameter list: Comma-separated list of the input parameters that are defined, preceded by their data type, within the enclosed parentheses. If there are no parameters, you must use empty parentheses (). . Exception list: The exceptions you expect the method to throw. You can specify these exception(s). . Method body: It is the block of code, enclosed between braces, that you need to execute to perform your intended operations. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/05/Collegeboard.html",
            "relUrl": "/2022/09/05/Collegeboard.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": "import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.lang.Math.*; public class NamarRep extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JMenu menu1; private JLabel message = new JLabel(&quot;Enter Decimal Number:&quot;); private JTextField numVal = new JTextField(20); private JButton clearButton = new JButton(&quot;Clear&quot;); public String[] NUM = { // 1D Array of Menu Choices &quot;Hex&quot;, &quot;Binary&quot;, &quot;Octal&quot; }; public String[] NUM1 = { // 1D Array of Menu Choices &quot;Sine&quot;, &quot;Cosine&quot;, &quot;Tangent&quot; }; public NamarRep(String title) { //System.setProperty(&quot;java.awt.headless&quot;, &quot;false&quot;); // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Number Representations&quot;); menu1 = new JMenu(&quot;Trigonometric Functions&quot;); //Initializing Menu objects and adding actions for (String mx : NUM) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } //Initializing Menu objects and adding actions for (String mx : NUM1) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu1.add(m); } clearButton.addActionListener(this); menubar.add(menu); menubar.add(menu1); frame.setJMenuBar(menubar); frame.setLayout(new FlowLayout()); //frame.setLayout(50,30); frame.add(message); frame.add(numVal); frame.add(clearButton); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setSize(500,200); frame.setVisible(true); } public void actionPerformed(ActionEvent e) { String s = e.getActionCommand(); double value=0; //declaring double to hold values with decimals String out=&quot;&quot;; if(s.equals(NUM1[0])) { value = Math.sin(Math.toRadians(Double.parseDouble(numVal.getText()))); //Changes input to radians in order to use sin function and return the value as a double numVal.setText(String.valueOf(value)); //gets value inputted in text box } else if (s.equals(NUM1[1])) { value = Math.cos(Math.toRadians(Double.parseDouble(numVal.getText()))); //Same operation as sin but with cos function numVal.setText(String.valueOf(value)); } else if(s.equals(NUM1[2])) { value = Math.tan(Math.toRadians(Double.parseDouble(numVal.getText()))); //tangent operaton numVal.setText(String.valueOf(value)); } else if(s.equals(NUM[0])) { int x = Integer.parseInt(numVal.getText()); out=&quot;&quot;; int a; for(;x&gt;=1; x=x/16) { a = x % 16; if(a&gt;9) { if(a==10) { out+= &#39;A&#39;; } else if(a == 11) { out+= &#39;B&#39;; } else if(a == 12) { out+= &#39;C&#39;; } else if(a == 13) { out+= &#39;D&#39;; } else if(a == 14) { out+= &#39;E&#39;; } else if(a == 15) { out+= &#39;F&#39;; } } else out+=String.valueOf(a); } numVal.setText(&quot;0x&quot;+reverseString(out)); } else if(s.equals(NUM[1])) { int x = Integer.parseInt(numVal.getText()); int a; out=&quot;&quot;; for(; x&gt;=1; x=x/2) { a = x % 2; out+=String.valueOf(a); } numVal.setText(reverseString(out)); } else if(s.equals(NUM[2])) { int x = Integer.parseInt(numVal.getText()); int a; out = &quot;&quot;; for(;x&gt;=1;x=x/8) { a = x % 8; out+=String.valueOf(a); } numVal.setText(reverseString(out)); } else if(s.equals(&quot;Clear&quot;)) { numVal.setText(&quot;&quot;); } } private String reverseString(String out) { char[] ch = out.toCharArray(); int x = out.length()-1; String s=&quot;&quot;; for(;x&gt;=0;x--) { s+=ch[x]; } return s; } public static void main(String[] args) { NamarRep np= new NamarRep(&quot;My Menu&quot;); } } NamarRep.main(null) . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/partnermenu.html",
            "relUrl": "/2022/09/02/partnermenu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Individual OOP Menu",
            "content": "import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;roll a dice&quot;, &quot;LCM&quot;, &quot;GCM&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action Random dice=new Random(); int x= dice.nextInt(6); msg = &quot;You rolled a: &quot; + x; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action //Here number is the base and p is the exponent int number = 2, p = 5; long result = 1; //Copying the exponent value to the loop counter int i = p; for (;i != 0; --i) { result *= number; } //Displaying the output System.out.println(number+&quot;^&quot;+p+&quot; = &quot;+result); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/menu.html",
            "relUrl": "/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Title",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; double lat=37.372; double longitude= -122.038; HttpRequest request = HttpRequest.newBuilder() //.uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=37.372&amp;long=-122.038&amp;format=json&amp;u=f&quot;)) .uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=&quot;+lat+&quot;&amp;long=&quot;+longitude+&quot;&amp;format=json&amp;u=f&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a53d1a4acemsh90db192dc27d5f7p1028a2jsn2e483944f85c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;yahoo-weather5.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); a . {&#34;location&#34;:{&#34;city&#34;:&#34;Sunnyvale&#34;,&#34;region&#34;:&#34; CA&#34;,&#34;woeid&#34;:2502265,&#34;country&#34;:&#34;United States&#34;,&#34;lat&#34;:37.371609,&#34;long&#34;:-122.038254,&#34;timezone_id&#34;:&#34;America/Los_Angeles&#34;},&#34;current_observation&#34;:{&#34;wind&#34;:{&#34;chill&#34;:68,&#34;direction&#34;:338,&#34;speed&#34;:16},&#34;atmosphere&#34;:{&#34;humidity&#34;:59,&#34;visibility&#34;:9.01,&#34;pressure&#34;:30.01,&#34;rising&#34;:0},&#34;astronomy&#34;:{&#34;sunrise&#34;:&#34;7:5 am&#34;,&#34;sunset&#34;:&#34;6:49 pm&#34;},&#34;condition&#34;:{&#34;code&#34;:32,&#34;text&#34;:&#34;Sunny&#34;,&#34;temperature&#34;:70},&#34;pubDate&#34;:1664816100},&#34;forecasts&#34;:[{&#34;day&#34;:&#34;Mon&#34;,&#34;date&#34;:1664769600,&#34;low&#34;:57,&#34;high&#34;:73,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1664856000,&#34;low&#34;:57,&#34;high&#34;:75,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1664942400,&#34;low&#34;:56,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1665028800,&#34;low&#34;:58,&#34;high&#34;:80,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Fri&#34;,&#34;date&#34;:1665115200,&#34;low&#34;:60,&#34;high&#34;:80,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Sat&#34;,&#34;date&#34;:1665201600,&#34;low&#34;:59,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Sun&#34;,&#34;date&#34;:1665288000,&#34;low&#34;:57,&#34;high&#34;:79,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Mon&#34;,&#34;date&#34;:1665374400,&#34;low&#34;:58,&#34;high&#34;:78,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1665460800,&#34;low&#34;:56,&#34;high&#34;:74,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1665547200,&#34;low&#34;:53,&#34;high&#34;:77,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1665633600,&#34;low&#34;:52,&#34;high&#34;:76,&#34;text&#34;:&#34;Sunny&#34;,&#34;code&#34;:32}]} . | String json_String_to_print = ... illegal start of expression . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; public class Api{ double lat; double longitude; Api(double lat, double longitude) { this.lat= lat; this.longitude= longitude; } public void Call() { HttpRequest request = HttpRequest.newBuilder() //.uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=37.372&amp;long=-122.038&amp;format=json&amp;u=f&quot;)) .uri(URI.create(&quot;https://yahoo-weather5.p.rapidapi.com/weather?lat=&quot;+this.lat+&quot;&amp;long=&quot;+this.longitude+&quot;&amp;format=json&amp;u=f&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a53d1a4acemsh90db192dc27d5f7p1028a2jsn2e483944f85c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;yahoo-weather5.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } public class driver{ Public static void main(String[] args){ Api first=new Api(37.372,-122.038); new.Call(); } } driver.main(null); . | HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); unreported exception java.io.IOException; must be caught or declared to be thrown .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/09/02/API.html",
            "relUrl": "/2022/09/02/API.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Objects",
            "content": "import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 7: Unexpected choice, try again. 9: Unexpected choice, try again. 3: Loading...#################### 1: Hello, World! 3: Loading...#################### 7: Unexpected choice, try again. 5: Unexpected choice, try again. 3: Loading...#################### . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/30/objects.html",
            "relUrl": "/2022/08/30/objects.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Markdown",
            "content": "python --version java --version javac --version . Python 3.9.12 java 18.0.2.1 2022-08-18 Java(TM) SE Runtime Environment (build 18.0.2.1+1-1) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing) javac 18.0.2.1 . npm -version conda --version . 6.4.1 conda 4.13.0 . conda list . # packages in environment at /Users/HP/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . jupyter kernelspec list . Available kernels: bash /Users/HP/Library/Jupyter/kernels/bash java /Users/HP/Library/Jupyter/kernels/java javascript /Users/HP/Library/Jupyter/kernels/javascript python3 /Users/HP/opt/anaconda3/share/jupyter/kernels/python3 . .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/28/bash.html",
            "relUrl": "/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "My First Python Post",
            "content": "print(&#39;Aryan-hello world&#39;) .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/jupyter/2022/08/21/myfirstpython.html",
            "relUrl": "/jupyter/2022/08/21/myfirstpython.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Ijava Primitives",
            "content": "Ijava Primitives . import java.util.Scanner; public class percent{ public static void main(String args[]){ Scanner input=new Scanner(System.in); int a=input.nextInt(); System.out.println(a); Scanner input3=new Scanner(System.in); String operator=input3.nextLine(); System.out.println(operator); Scanner input2=new Scanner(System.in); int b=input2.nextInt(); System.out.println(b); if(operator.equals(&quot;+&quot;)){ int ans=a+b; System.out.println(&quot;Answer= &quot;+ ans); } if(operator.equals(&quot;x&quot;)){ int answer=a*b; System.out.println(&quot;Answer= &quot;+ answer); } if(operator.equals(&quot;-&quot;)){ //System.out.println(&quot;Answer= &quot;+ a-b); } if(operator.equals(&quot;/&quot;)){ double quotiant=(double) a/(double) b; System.out.println(&quot;Answer= &quot;+ quotiant); } boolean happy= true(;) System.out.println(happy); } } percent.main(null); . 2 x 8 Answer= 16 . import java.util.Scanner; public class JavaExample { public static void main(String args[]) { float p, r, t, sinterest; Scanner scan = new Scanner(System.in); System.out.print(&quot;Enter the Principal : &quot;); p = scan.nextFloat(); System.out.print(&quot;Enter the Rate of interest : &quot;); r = scan.nextFloat(); System.out.print(&quot;Enter the Time period : &quot;); t = scan.nextFloat(); scan.close(); sinterest = (p * r * t) / 100; System.out.print(&quot;Simple Interest is: &quot; +sinterest); } } JavaExample.main(null); . Enter the Principal : Enter the Rate of interest : Enter the Time period : Simple Interest is: 360.0 .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/2022/08/21/Ijavaprimitaves.html",
            "relUrl": "/2022/08/21/Ijavaprimitaves.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post30": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aryanboxout.github.io/Aryanfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post31": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aryanboxout.github.io/Aryanfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aryanboxout.github.io/Aryanfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aryanboxout.github.io/Aryanfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}